// @generated by protoc-gen-es v2.7.0 with parameter "target=ts,import_extension=js"
// @generated from file intent.proto (package bitwars, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Vec2 } from "./vec2_pb.js";
import { file_vec2 } from "./vec2_pb.js";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file intent.proto.
 */
export const file_intent: GenFile = /*@__PURE__*/
  fileDesc("CgxpbnRlbnQucHJvdG8SB2JpdHdhcnMiQgoMTW90aW9uVGFyZ2V0Eh0KBnRhcmdldBgBIAEoCzINLmJpdHdhcnMuVmVjMhITCgtzdG9wX3JhZGl1cxgCIAEoAiJyChRNb3ZlVG9Mb2NhdGlvbkludGVudBIRCgllbnRpdHlfaWQYASABKAQSHQoGdGFyZ2V0GAIgASgLMg0uYml0d2Fycy5WZWMyEhUKDWNsaWVudF9jbWRfaWQYAyABKAkSEQoJcGxheWVyX2lkGAQgASgJIl4KDEF0dGFja0ludGVudBIRCgllbnRpdHlfaWQYASABKAQSEQoJdGFyZ2V0X2lkGAIgASgEEhUKDWNsaWVudF9jbWRfaWQYAyABKAkSEQoJcGxheWVyX2lkGAQgASgJIoEBCgtCdWlsZEludGVudBIRCgllbnRpdHlfaWQYASABKAQSFAoMYmx1ZXByaW50X2lkGAIgASgJEh8KCGxvY2F0aW9uGAMgASgLMg0uYml0d2Fycy5WZWMyEhUKDWNsaWVudF9jbWRfaWQYBCABKAkSEQoJcGxheWVyX2lkGAUgASgJIo8BCgZJbnRlbnQSLQoEbW92ZRgBIAEoCzIdLmJpdHdhcnMuTW92ZVRvTG9jYXRpb25JbnRlbnRIABInCgZhdHRhY2sYAiABKAsyFS5iaXR3YXJzLkF0dGFja0ludGVudEgAEiUKBWJ1aWxkGAMgASgLMhQuYml0d2Fycy5CdWlsZEludGVudEgAQgYKBGtpbmQiLQoLSW50ZW50UXVldWUSHgoFaXRlbXMYASADKAsyDy5iaXR3YXJzLkludGVudCKkAgoLSW50ZW50U3RhdGUSPQoNaW50ZW50X3F1ZXVlcxgBIAMoCzImLmJpdHdhcnMuSW50ZW50U3RhdGUuSW50ZW50UXVldWVzRW50cnkSPwoOY3VycmVudF9hY3Rpb24YAiADKAsyJy5iaXR3YXJzLkludGVudFN0YXRlLkN1cnJlbnRBY3Rpb25FbnRyeRpJChFJbnRlbnRRdWV1ZXNFbnRyeRILCgNrZXkYASABKAQSIwoFdmFsdWUYAiABKAsyFC5iaXR3YXJzLkludGVudFF1ZXVlOgI4ARpKChJDdXJyZW50QWN0aW9uRW50cnkSCwoDa2V5GAEgASgEEiMKBXZhbHVlGAIgASgLMhQuYml0d2Fycy5BY3Rpb25TdGF0ZToCOAEiMgoJTW92ZVN0YXRlEiUKBnRhcmdldBgBIAEoCzIVLmJpdHdhcnMuTW90aW9uVGFyZ2V0IkcKC0F0dGFja1N0YXRlEhEKCXRhcmdldF9pZBgBIAEoBBIlCg5sYXN0X2tub3duX3BvcxgCIAEoCzINLmJpdHdhcnMuVmVjMiJVCgpCdWlsZFN0YXRlEhQKDGJsdWVwcmludF9pZBgBIAEoCRIfCghsb2NhdGlvbhgCIAEoCzINLmJpdHdhcnMuVmVjMhIQCghwcm9ncmVzcxgDIAEoAiKoAQoLQWN0aW9uU3RhdGUSHwoGaW50ZW50GAEgASgLMg8uYml0d2Fycy5JbnRlbnQSIgoEbW92ZRgCIAEoCzISLmJpdHdhcnMuTW92ZVN0YXRlSAASJgoGYXR0YWNrGAMgASgLMhQuYml0d2Fycy5BdHRhY2tTdGF0ZUgAEiQKBWJ1aWxkGAQgASgLMhMuYml0d2Fycy5CdWlsZFN0YXRlSABCBgoEZXhlY2IGcHJvdG8z", [file_vec2]);

/**
 * Represents an in-flight destination for an entity (server-side).
 *
 * @generated from message bitwars.MotionTarget
 */
export type MotionTarget = Message<"bitwars.MotionTarget"> & {
  /**
   * world-space destination
   *
   * @generated from field: bitwars.Vec2 target = 1;
   */
  target?: Vec2;

  /**
   * distance threshold for arrival (world units)
   *
   * @generated from field: float stop_radius = 2;
   */
  stopRadius: number;
};

/**
 * Describes the message bitwars.MotionTarget.
 * Use `create(MotionTargetSchema)` to create a new message.
 */
export const MotionTargetSchema: GenMessage<MotionTarget> = /*@__PURE__*/
  messageDesc(file_intent, 0);

/**
 * Minimal payload for a Move intent.
 *
 * @generated from message bitwars.MoveToLocationIntent
 */
export type MoveToLocationIntent = Message<"bitwars.MoveToLocationIntent"> & {
  /**
   * the server-side entity id to move
   *
   * @generated from field: uint64 entity_id = 1;
   */
  entityId: bigint;

  /**
   * desired destination
   *
   * @generated from field: bitwars.Vec2 target = 2;
   */
  target?: Vec2;

  /**
   * client-generated id for idempotency
   *
   * @generated from field: string client_cmd_id = 3;
   */
  clientCmdId: string;

  /**
   * issuing player
   *
   * @generated from field: string player_id = 4;
   */
  playerId: string;
};

/**
 * Describes the message bitwars.MoveToLocationIntent.
 * Use `create(MoveToLocationIntentSchema)` to create a new message.
 */
export const MoveToLocationIntentSchema: GenMessage<MoveToLocationIntent> = /*@__PURE__*/
  messageDesc(file_intent, 1);

/**
 * Attack intent payload (authoritative server-side).
 *
 * @generated from message bitwars.AttackIntent
 */
export type AttackIntent = Message<"bitwars.AttackIntent"> & {
  /**
   * attacker
   *
   * @generated from field: uint64 entity_id = 1;
   */
  entityId: bigint;

  /**
   * target entity
   *
   * @generated from field: uint64 target_id = 2;
   */
  targetId: bigint;

  /**
   * @generated from field: string client_cmd_id = 3;
   */
  clientCmdId: string;

  /**
   * @generated from field: string player_id = 4;
   */
  playerId: string;
};

/**
 * Describes the message bitwars.AttackIntent.
 * Use `create(AttackIntentSchema)` to create a new message.
 */
export const AttackIntentSchema: GenMessage<AttackIntent> = /*@__PURE__*/
  messageDesc(file_intent, 2);

/**
 * Build intent payload (authoritative server-side).
 *
 * @generated from message bitwars.BuildIntent
 */
export type BuildIntent = Message<"bitwars.BuildIntent"> & {
  /**
   * builder
   *
   * @generated from field: uint64 entity_id = 1;
   */
  entityId: bigint;

  /**
   * id of structure/unit blueprint
   *
   * @generated from field: string blueprint_id = 2;
   */
  blueprintId: string;

  /**
   * build location
   *
   * @generated from field: bitwars.Vec2 location = 3;
   */
  location?: Vec2;

  /**
   * @generated from field: string client_cmd_id = 4;
   */
  clientCmdId: string;

  /**
   * @generated from field: string player_id = 5;
   */
  playerId: string;
};

/**
 * Describes the message bitwars.BuildIntent.
 * Use `create(BuildIntentSchema)` to create a new message.
 */
export const BuildIntentSchema: GenMessage<BuildIntent> = /*@__PURE__*/
  messageDesc(file_intent, 3);

/**
 * Extensible Intent envelope.
 * Additional intent kinds can be added to this oneof later (Attack, Patrol, etc.)
 *
 * @generated from message bitwars.Intent
 */
export type Intent = Message<"bitwars.Intent"> & {
  /**
   * @generated from oneof bitwars.Intent.kind
   */
  kind: {
    /**
     * @generated from field: bitwars.MoveToLocationIntent move = 1;
     */
    value: MoveToLocationIntent;
    case: "move";
  } | {
    /**
     * @generated from field: bitwars.AttackIntent attack = 2;
     */
    value: AttackIntent;
    case: "attack";
  } | {
    /**
     * @generated from field: bitwars.BuildIntent build = 3;
     */
    value: BuildIntent;
    case: "build";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message bitwars.Intent.
 * Use `create(IntentSchema)` to create a new message.
 */
export const IntentSchema: GenMessage<Intent> = /*@__PURE__*/
  messageDesc(file_intent, 4);

/**
 * Per-entity queue of intents (for M1 and beyond).
 *
 * @generated from message bitwars.IntentQueue
 */
export type IntentQueue = Message<"bitwars.IntentQueue"> & {
  /**
   * @generated from field: repeated bitwars.Intent items = 1;
   */
  items: Intent[];
};

/**
 * Describes the message bitwars.IntentQueue.
 * Use `create(IntentQueueSchema)` to create a new message.
 */
export const IntentQueueSchema: GenMessage<IntentQueue> = /*@__PURE__*/
  messageDesc(file_intent, 5);

/**
 * Server-side auxiliary state for intents and destinations.
 * NOTE: You can embed these maps into your authoritative GameState,
 * or publish them via a separate snapshot/delta channel.
 * For M0 you likely won't publish these; theyâ€™re server internals.
 *
 * @generated from message bitwars.IntentState
 */
export type IntentState = Message<"bitwars.IntentState"> & {
  /**
   * Per-entity intent queues (entity_id -> queue)
   *
   * @generated from field: map<uint64, bitwars.IntentQueue> intent_queues = 1;
   */
  intentQueues: { [key: string]: IntentQueue };

  /**
   * Current executing action per entity (entity_id -> action state)
   *
   * @generated from field: map<uint64, bitwars.ActionState> current_action = 2;
   */
  currentAction: { [key: string]: ActionState };
};

/**
 * Describes the message bitwars.IntentState.
 * Use `create(IntentStateSchema)` to create a new message.
 */
export const IntentStateSchema: GenMessage<IntentState> = /*@__PURE__*/
  messageDesc(file_intent, 6);

/**
 * Execution state per kind (authoritative server-side).
 *
 * @generated from message bitwars.MoveState
 */
export type MoveState = Message<"bitwars.MoveState"> & {
  /**
   * @generated from field: bitwars.MotionTarget target = 1;
   */
  target?: MotionTarget;
};

/**
 * Describes the message bitwars.MoveState.
 * Use `create(MoveStateSchema)` to create a new message.
 */
export const MoveStateSchema: GenMessage<MoveState> = /*@__PURE__*/
  messageDesc(file_intent, 7);

/**
 * @generated from message bitwars.AttackState
 */
export type AttackState = Message<"bitwars.AttackState"> & {
  /**
   * @generated from field: uint64 target_id = 1;
   */
  targetId: bigint;

  /**
   * Optional for LOS/prediction policies
   *
   * @generated from field: bitwars.Vec2 last_known_pos = 2;
   */
  lastKnownPos?: Vec2;
};

/**
 * Describes the message bitwars.AttackState.
 * Use `create(AttackStateSchema)` to create a new message.
 */
export const AttackStateSchema: GenMessage<AttackState> = /*@__PURE__*/
  messageDesc(file_intent, 8);

/**
 * @generated from message bitwars.BuildState
 */
export type BuildState = Message<"bitwars.BuildState"> & {
  /**
   * @generated from field: string blueprint_id = 1;
   */
  blueprintId: string;

  /**
   * @generated from field: bitwars.Vec2 location = 2;
   */
  location?: Vec2;

  /**
   * 0..1 (casts/channels/build progress)
   *
   * @generated from field: float progress = 3;
   */
  progress: number;
};

/**
 * Describes the message bitwars.BuildState.
 * Use `create(BuildStateSchema)` to create a new message.
 */
export const BuildStateSchema: GenMessage<BuildState> = /*@__PURE__*/
  messageDesc(file_intent, 9);

/**
 * Unified per-entity execution container (one active at a time).
 *
 * @generated from message bitwars.ActionState
 */
export type ActionState = Message<"bitwars.ActionState"> & {
  /**
   * Echo original intent for correlation/observability (optional but useful)
   *
   * @generated from field: bitwars.Intent intent = 1;
   */
  intent?: Intent;

  /**
   * @generated from oneof bitwars.ActionState.exec
   */
  exec: {
    /**
     * @generated from field: bitwars.MoveState move = 2;
     */
    value: MoveState;
    case: "move";
  } | {
    /**
     * @generated from field: bitwars.AttackState attack = 3;
     */
    value: AttackState;
    case: "attack";
  } | {
    /**
     * @generated from field: bitwars.BuildState build = 4;
     */
    value: BuildState;
    case: "build";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message bitwars.ActionState.
 * Use `create(ActionStateSchema)` to create a new message.
 */
export const ActionStateSchema: GenMessage<ActionState> = /*@__PURE__*/
  messageDesc(file_intent, 10);

