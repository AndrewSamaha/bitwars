// @generated by protoc-gen-es v2.7.0 with parameter "target=ts,import_extension=js"
// @generated from file intent.proto (package bitwars, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Delta } from "./delta_pb.js";
import { file_delta } from "./delta_pb.js";
import type { Vec2 } from "./vec2_pb.js";
import { file_vec2 } from "./vec2_pb.js";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file intent.proto.
 */
export const file_intent: GenFile = /*@__PURE__*/
  fileDesc("CgxpbnRlbnQucHJvdG8SB2JpdHdhcnMiQgoMTW90aW9uVGFyZ2V0Eh0KBnRhcmdldBgBIAEoCzINLmJpdHdhcnMuVmVjMhITCgtzdG9wX3JhZGl1cxgCIAEoAiJ6ChRNb3ZlVG9Mb2NhdGlvbkludGVudBIRCgllbnRpdHlfaWQYASABKAQSHQoGdGFyZ2V0GAIgASgLMg0uYml0d2Fycy5WZWMyEhkKDWNsaWVudF9jbWRfaWQYAyABKAlCAhgBEhUKCXBsYXllcl9pZBgEIAEoCUICGAEiZgoMQXR0YWNrSW50ZW50EhEKCWVudGl0eV9pZBgBIAEoBBIRCgl0YXJnZXRfaWQYAiABKAQSGQoNY2xpZW50X2NtZF9pZBgDIAEoCUICGAESFQoJcGxheWVyX2lkGAQgASgJQgIYASKJAQoLQnVpbGRJbnRlbnQSEQoJZW50aXR5X2lkGAEgASgEEhQKDGJsdWVwcmludF9pZBgCIAEoCRIfCghsb2NhdGlvbhgDIAEoCzINLmJpdHdhcnMuVmVjMhIZCg1jbGllbnRfY21kX2lkGAQgASgJQgIYARIVCglwbGF5ZXJfaWQYBSABKAlCAhgBIt8CCg5JbnRlbnRFbnZlbG9wZRIVCg1jbGllbnRfY21kX2lkGAEgASgMEhEKCWludGVudF9pZBgCIAEoDBIRCglwbGF5ZXJfaWQYAyABKAkSEgoKY2xpZW50X3NlcRgEIAEoBBITCgtzZXJ2ZXJfdGljaxgFIAEoBBIYChBwcm90b2NvbF92ZXJzaW9uGAYgASgNEiUKBnBvbGljeRgHIAEoDjIVLmJpdHdhcnMuSW50ZW50UG9saWN5Ei0KBG1vdmUYCiABKAsyHS5iaXR3YXJzLk1vdmVUb0xvY2F0aW9uSW50ZW50SAASJwoGYXR0YWNrGAsgASgLMhUuYml0d2Fycy5BdHRhY2tJbnRlbnRIABIlCgVidWlsZBgMIAEoCzIULmJpdHdhcnMuQnVpbGRJbnRlbnRIAEIJCgdwYXlsb2FkSgQICBAJSgQICRAKSgQIDRAOSgQIDhAPSgQIDxAQIo8BCgZJbnRlbnQSLQoEbW92ZRgBIAEoCzIdLmJpdHdhcnMuTW92ZVRvTG9jYXRpb25JbnRlbnRIABInCgZhdHRhY2sYAiABKAsyFS5iaXR3YXJzLkF0dGFja0ludGVudEgAEiUKBWJ1aWxkGAMgASgLMhQuYml0d2Fycy5CdWlsZEludGVudEgAQgYKBGtpbmQizgEKDkxpZmVjeWNsZUV2ZW50EhEKCWludGVudF9pZBgBIAEoDBIVCg1jbGllbnRfY21kX2lkGAIgASgMEhEKCXBsYXllcl9pZBgDIAEoCRITCgtzZXJ2ZXJfdGljaxgEIAEoBBImCgVzdGF0ZRgFIAEoDjIXLmJpdHdhcnMuTGlmZWN5Y2xlU3RhdGUSKAoGcmVhc29uGAYgASgOMhguYml0d2Fycy5MaWZlY3ljbGVSZWFzb24SGAoQcHJvdG9jb2xfdmVyc2lvbhgHIAEoDSJtChJFdmVudHNTdHJlYW1SZWNvcmQSLAoJbGlmZWN5Y2xlGAEgASgLMhcuYml0d2Fycy5MaWZlY3ljbGVFdmVudEgAEh8KBWRlbHRhGAIgASgLMg4uYml0d2Fycy5EZWx0YUgAQggKBnJlY29yZCItCgtJbnRlbnRRdWV1ZRIeCgVpdGVtcxgBIAMoCzIPLmJpdHdhcnMuSW50ZW50IqQCCgtJbnRlbnRTdGF0ZRI9Cg1pbnRlbnRfcXVldWVzGAEgAygLMiYuYml0d2Fycy5JbnRlbnRTdGF0ZS5JbnRlbnRRdWV1ZXNFbnRyeRI/Cg5jdXJyZW50X2FjdGlvbhgCIAMoCzInLmJpdHdhcnMuSW50ZW50U3RhdGUuQ3VycmVudEFjdGlvbkVudHJ5GkkKEUludGVudFF1ZXVlc0VudHJ5EgsKA2tleRgBIAEoBBIjCgV2YWx1ZRgCIAEoCzIULmJpdHdhcnMuSW50ZW50UXVldWU6AjgBGkoKEkN1cnJlbnRBY3Rpb25FbnRyeRILCgNrZXkYASABKAQSIwoFdmFsdWUYAiABKAsyFC5iaXR3YXJzLkFjdGlvblN0YXRlOgI4ASIyCglNb3ZlU3RhdGUSJQoGdGFyZ2V0GAEgASgLMhUuYml0d2Fycy5Nb3Rpb25UYXJnZXQiRwoLQXR0YWNrU3RhdGUSEQoJdGFyZ2V0X2lkGAEgASgEEiUKDmxhc3Rfa25vd25fcG9zGAIgASgLMg0uYml0d2Fycy5WZWMyIlUKCkJ1aWxkU3RhdGUSFAoMYmx1ZXByaW50X2lkGAEgASgJEh8KCGxvY2F0aW9uGAIgASgLMg0uYml0d2Fycy5WZWMyEhAKCHByb2dyZXNzGAMgASgCIqgBCgtBY3Rpb25TdGF0ZRIfCgZpbnRlbnQYASABKAsyDy5iaXR3YXJzLkludGVudBIiCgRtb3ZlGAIgASgLMhIuYml0d2Fycy5Nb3ZlU3RhdGVIABImCgZhdHRhY2sYAyABKAsyFC5iaXR3YXJzLkF0dGFja1N0YXRlSAASJAoFYnVpbGQYBCABKAsyEy5iaXR3YXJzLkJ1aWxkU3RhdGVIAEIGCgRleGVjKmQKDEludGVudFBvbGljeRIdChlJTlRFTlRfUE9MSUNZX1VOU1BFQ0lGSUVEEAASEgoOUkVQTEFDRV9BQ1RJVkUQARIKCgZBUFBFTkQQAhIVChFDTEVBUl9USEVOX0FQUEVORBADKpUBCg5MaWZlY3ljbGVTdGF0ZRIfChtMSUZFQ1lDTEVfU1RBVEVfVU5TUEVDSUZJRUQQABIMCghSRUNFSVZFRBABEgwKCEFDQ0VQVEVEEAISDwoLSU5fUFJPR1JFU1MQAxILCgdCTE9DS0VEEAQSDAoIRklOSVNIRUQQBRIMCghDQU5DRUxFRBAGEgwKCFJFSkVDVEVEEAcqmgEKD0xpZmVjeWNsZVJlYXNvbhIgChxMSUZFQ1lDTEVfUkVBU09OX1VOU1BFQ0lGSUVEEAASCAoETk9ORRABEg8KC0lOVEVSUlVQVEVEEAISDQoJRFVQTElDQVRFEAMSEAoMT1VUX09GX09SREVSEAQSEgoOSU5WQUxJRF9UQVJHRVQQBRIVChFQUk9UT0NPTF9NSVNNQVRDSBAGYgZwcm90bzM", [file_delta, file_vec2]);

/**
 * Represents an in-flight destination for an entity (server-side).
 *
 * @generated from message bitwars.MotionTarget
 */
export type MotionTarget = Message<"bitwars.MotionTarget"> & {
  /**
   * world-space destination
   *
   * @generated from field: bitwars.Vec2 target = 1;
   */
  target?: Vec2;

  /**
   * distance threshold for arrival (world units)
   *
   * @generated from field: float stop_radius = 2;
   */
  stopRadius: number;
};

/**
 * Describes the message bitwars.MotionTarget.
 * Use `create(MotionTargetSchema)` to create a new message.
 */
export const MotionTargetSchema: GenMessage<MotionTarget> = /*@__PURE__*/
  messageDesc(file_intent, 0);

/**
 * Minimal payload for a Move intent.
 *
 * @generated from message bitwars.MoveToLocationIntent
 */
export type MoveToLocationIntent = Message<"bitwars.MoveToLocationIntent"> & {
  /**
   * the server-side entity id to move
   *
   * @generated from field: uint64 entity_id = 1;
   */
  entityId: bigint;

  /**
   * desired destination
   *
   * @generated from field: bitwars.Vec2 target = 2;
   */
  target?: Vec2;

  /**
   * client-generated id for idempotency
   *
   * @generated from field: string client_cmd_id = 3 [deprecated = true];
   * @deprecated
   */
  clientCmdId: string;

  /**
   * issuing player
   *
   * @generated from field: string player_id = 4 [deprecated = true];
   * @deprecated
   */
  playerId: string;
};

/**
 * Describes the message bitwars.MoveToLocationIntent.
 * Use `create(MoveToLocationIntentSchema)` to create a new message.
 */
export const MoveToLocationIntentSchema: GenMessage<MoveToLocationIntent> = /*@__PURE__*/
  messageDesc(file_intent, 1);

/**
 * Attack intent payload (authoritative server-side).
 *
 * @generated from message bitwars.AttackIntent
 */
export type AttackIntent = Message<"bitwars.AttackIntent"> & {
  /**
   * attacker
   *
   * @generated from field: uint64 entity_id = 1;
   */
  entityId: bigint;

  /**
   * target entity
   *
   * @generated from field: uint64 target_id = 2;
   */
  targetId: bigint;

  /**
   * @generated from field: string client_cmd_id = 3 [deprecated = true];
   * @deprecated
   */
  clientCmdId: string;

  /**
   * @generated from field: string player_id = 4 [deprecated = true];
   * @deprecated
   */
  playerId: string;
};

/**
 * Describes the message bitwars.AttackIntent.
 * Use `create(AttackIntentSchema)` to create a new message.
 */
export const AttackIntentSchema: GenMessage<AttackIntent> = /*@__PURE__*/
  messageDesc(file_intent, 2);

/**
 * Build intent payload (authoritative server-side).
 *
 * @generated from message bitwars.BuildIntent
 */
export type BuildIntent = Message<"bitwars.BuildIntent"> & {
  /**
   * builder
   *
   * @generated from field: uint64 entity_id = 1;
   */
  entityId: bigint;

  /**
   * id of structure/unit blueprint
   *
   * @generated from field: string blueprint_id = 2;
   */
  blueprintId: string;

  /**
   * build location
   *
   * @generated from field: bitwars.Vec2 location = 3;
   */
  location?: Vec2;

  /**
   * @generated from field: string client_cmd_id = 4 [deprecated = true];
   * @deprecated
   */
  clientCmdId: string;

  /**
   * @generated from field: string player_id = 5 [deprecated = true];
   * @deprecated
   */
  playerId: string;
};

/**
 * Describes the message bitwars.BuildIntent.
 * Use `create(BuildIntentSchema)` to create a new message.
 */
export const BuildIntentSchema: GenMessage<BuildIntent> = /*@__PURE__*/
  messageDesc(file_intent, 3);

/**
 * Transport envelope that wraps all intent payloads and carries authoritative metadata.
 *
 * @generated from message bitwars.IntentEnvelope
 */
export type IntentEnvelope = Message<"bitwars.IntentEnvelope"> & {
  /**
   * UUIDv7 (16 bytes), supplied by client
   *
   * @generated from field: bytes client_cmd_id = 1;
   */
  clientCmdId: Uint8Array;

  /**
   * UUIDv7 (16 bytes), assigned by server
   *
   * @generated from field: bytes intent_id = 2;
   */
  intentId: Uint8Array;

  /**
   * @generated from field: string player_id = 3;
   */
  playerId: string;

  /**
   * client-maintained monotonic counter
   *
   * @generated from field: uint64 client_seq = 4;
   */
  clientSeq: bigint;

  /**
   * frozen when ACCEPTED
   *
   * @generated from field: uint64 server_tick = 5;
   */
  serverTick: bigint;

  /**
   * major version
   *
   * @generated from field: uint32 protocol_version = 6;
   */
  protocolVersion: number;

  /**
   * defaults to REPLACE_ACTIVE when omitted
   *
   * @generated from field: bitwars.IntentPolicy policy = 7;
   */
  policy: IntentPolicy;

  /**
   * @generated from oneof bitwars.IntentEnvelope.payload
   */
  payload: {
    /**
     * @generated from field: bitwars.MoveToLocationIntent move = 10;
     */
    value: MoveToLocationIntent;
    case: "move";
  } | {
    /**
     * @generated from field: bitwars.AttackIntent attack = 11;
     */
    value: AttackIntent;
    case: "attack";
  } | {
    /**
     * @generated from field: bitwars.BuildIntent build = 12;
     */
    value: BuildIntent;
    case: "build";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message bitwars.IntentEnvelope.
 * Use `create(IntentEnvelopeSchema)` to create a new message.
 */
export const IntentEnvelopeSchema: GenMessage<IntentEnvelope> = /*@__PURE__*/
  messageDesc(file_intent, 4);

/**
 * Extensible Intent envelope.
 * Additional intent kinds can be added to this oneof later (Attack, Patrol, etc.)
 *
 * @generated from message bitwars.Intent
 */
export type Intent = Message<"bitwars.Intent"> & {
  /**
   * @generated from oneof bitwars.Intent.kind
   */
  kind: {
    /**
     * @generated from field: bitwars.MoveToLocationIntent move = 1;
     */
    value: MoveToLocationIntent;
    case: "move";
  } | {
    /**
     * @generated from field: bitwars.AttackIntent attack = 2;
     */
    value: AttackIntent;
    case: "attack";
  } | {
    /**
     * @generated from field: bitwars.BuildIntent build = 3;
     */
    value: BuildIntent;
    case: "build";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message bitwars.Intent.
 * Use `create(IntentSchema)` to create a new message.
 */
export const IntentSchema: GenMessage<Intent> = /*@__PURE__*/
  messageDesc(file_intent, 5);

/**
 * @generated from message bitwars.LifecycleEvent
 */
export type LifecycleEvent = Message<"bitwars.LifecycleEvent"> & {
  /**
   * @generated from field: bytes intent_id = 1;
   */
  intentId: Uint8Array;

  /**
   * @generated from field: bytes client_cmd_id = 2;
   */
  clientCmdId: Uint8Array;

  /**
   * @generated from field: string player_id = 3;
   */
  playerId: string;

  /**
   * emission tick for this state
   *
   * @generated from field: uint64 server_tick = 4;
   */
  serverTick: bigint;

  /**
   * @generated from field: bitwars.LifecycleState state = 5;
   */
  state: LifecycleState;

  /**
   * @generated from field: bitwars.LifecycleReason reason = 6;
   */
  reason: LifecycleReason;

  /**
   * @generated from field: uint32 protocol_version = 7;
   */
  protocolVersion: number;
};

/**
 * Describes the message bitwars.LifecycleEvent.
 * Use `create(LifecycleEventSchema)` to create a new message.
 */
export const LifecycleEventSchema: GenMessage<LifecycleEvent> = /*@__PURE__*/
  messageDesc(file_intent, 6);

/**
 * @generated from message bitwars.EventsStreamRecord
 */
export type EventsStreamRecord = Message<"bitwars.EventsStreamRecord"> & {
  /**
   * @generated from oneof bitwars.EventsStreamRecord.record
   */
  record: {
    /**
     * @generated from field: bitwars.LifecycleEvent lifecycle = 1;
     */
    value: LifecycleEvent;
    case: "lifecycle";
  } | {
    /**
     * Metrics payloads may be added in a future milestone.
     *
     * @generated from field: bitwars.Delta delta = 2;
     */
    value: Delta;
    case: "delta";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message bitwars.EventsStreamRecord.
 * Use `create(EventsStreamRecordSchema)` to create a new message.
 */
export const EventsStreamRecordSchema: GenMessage<EventsStreamRecord> = /*@__PURE__*/
  messageDesc(file_intent, 7);

/**
 * Per-entity queue of intents (for M1 and beyond).
 *
 * @generated from message bitwars.IntentQueue
 */
export type IntentQueue = Message<"bitwars.IntentQueue"> & {
  /**
   * @generated from field: repeated bitwars.Intent items = 1;
   */
  items: Intent[];
};

/**
 * Describes the message bitwars.IntentQueue.
 * Use `create(IntentQueueSchema)` to create a new message.
 */
export const IntentQueueSchema: GenMessage<IntentQueue> = /*@__PURE__*/
  messageDesc(file_intent, 8);

/**
 * Server-side auxiliary state for intents and destinations.
 * NOTE: You can embed these maps into your authoritative GameState,
 * or publish them via a separate snapshot/delta channel.
 * For M0 you likely won't publish these; they’re server internals.
 *
 * @generated from message bitwars.IntentState
 */
export type IntentState = Message<"bitwars.IntentState"> & {
  /**
   * Per-entity intent queues (entity_id -> queue)
   *
   * @generated from field: map<uint64, bitwars.IntentQueue> intent_queues = 1;
   */
  intentQueues: { [key: string]: IntentQueue };

  /**
   * Current executing action per entity (entity_id -> action state)
   *
   * @generated from field: map<uint64, bitwars.ActionState> current_action = 2;
   */
  currentAction: { [key: string]: ActionState };
};

/**
 * Describes the message bitwars.IntentState.
 * Use `create(IntentStateSchema)` to create a new message.
 */
export const IntentStateSchema: GenMessage<IntentState> = /*@__PURE__*/
  messageDesc(file_intent, 9);

/**
 * Execution state per kind (authoritative server-side).
 *
 * @generated from message bitwars.MoveState
 */
export type MoveState = Message<"bitwars.MoveState"> & {
  /**
   * @generated from field: bitwars.MotionTarget target = 1;
   */
  target?: MotionTarget;
};

/**
 * Describes the message bitwars.MoveState.
 * Use `create(MoveStateSchema)` to create a new message.
 */
export const MoveStateSchema: GenMessage<MoveState> = /*@__PURE__*/
  messageDesc(file_intent, 10);

/**
 * @generated from message bitwars.AttackState
 */
export type AttackState = Message<"bitwars.AttackState"> & {
  /**
   * @generated from field: uint64 target_id = 1;
   */
  targetId: bigint;

  /**
   * Optional for LOS/prediction policies
   *
   * @generated from field: bitwars.Vec2 last_known_pos = 2;
   */
  lastKnownPos?: Vec2;
};

/**
 * Describes the message bitwars.AttackState.
 * Use `create(AttackStateSchema)` to create a new message.
 */
export const AttackStateSchema: GenMessage<AttackState> = /*@__PURE__*/
  messageDesc(file_intent, 11);

/**
 * @generated from message bitwars.BuildState
 */
export type BuildState = Message<"bitwars.BuildState"> & {
  /**
   * @generated from field: string blueprint_id = 1;
   */
  blueprintId: string;

  /**
   * @generated from field: bitwars.Vec2 location = 2;
   */
  location?: Vec2;

  /**
   * 0..1 (casts/channels/build progress)
   *
   * @generated from field: float progress = 3;
   */
  progress: number;
};

/**
 * Describes the message bitwars.BuildState.
 * Use `create(BuildStateSchema)` to create a new message.
 */
export const BuildStateSchema: GenMessage<BuildState> = /*@__PURE__*/
  messageDesc(file_intent, 12);

/**
 * Unified per-entity execution container (one active at a time).
 *
 * @generated from message bitwars.ActionState
 */
export type ActionState = Message<"bitwars.ActionState"> & {
  /**
   * Echo original intent for correlation/observability (optional but useful)
   *
   * @generated from field: bitwars.Intent intent = 1;
   */
  intent?: Intent;

  /**
   * @generated from oneof bitwars.ActionState.exec
   */
  exec: {
    /**
     * @generated from field: bitwars.MoveState move = 2;
     */
    value: MoveState;
    case: "move";
  } | {
    /**
     * @generated from field: bitwars.AttackState attack = 3;
     */
    value: AttackState;
    case: "attack";
  } | {
    /**
     * @generated from field: bitwars.BuildState build = 4;
     */
    value: BuildState;
    case: "build";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message bitwars.ActionState.
 * Use `create(ActionStateSchema)` to create a new message.
 */
export const ActionStateSchema: GenMessage<ActionState> = /*@__PURE__*/
  messageDesc(file_intent, 13);

/**
 * @generated from enum bitwars.IntentPolicy
 */
export enum IntentPolicy {
  /**
   * @generated from enum value: INTENT_POLICY_UNSPECIFIED = 0;
   */
  INTENT_POLICY_UNSPECIFIED = 0,

  /**
   * @generated from enum value: REPLACE_ACTIVE = 1;
   */
  REPLACE_ACTIVE = 1,

  /**
   * @generated from enum value: APPEND = 2;
   */
  APPEND = 2,

  /**
   * @generated from enum value: CLEAR_THEN_APPEND = 3;
   */
  CLEAR_THEN_APPEND = 3,
}

/**
 * Describes the enum bitwars.IntentPolicy.
 */
export const IntentPolicySchema: GenEnum<IntentPolicy> = /*@__PURE__*/
  enumDesc(file_intent, 0);

/**
 * @generated from enum bitwars.LifecycleState
 */
export enum LifecycleState {
  /**
   * @generated from enum value: LIFECYCLE_STATE_UNSPECIFIED = 0;
   */
  LIFECYCLE_STATE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: RECEIVED = 1;
   */
  RECEIVED = 1,

  /**
   * @generated from enum value: ACCEPTED = 2;
   */
  ACCEPTED = 2,

  /**
   * @generated from enum value: IN_PROGRESS = 3;
   */
  IN_PROGRESS = 3,

  /**
   * @generated from enum value: BLOCKED = 4;
   */
  BLOCKED = 4,

  /**
   * @generated from enum value: FINISHED = 5;
   */
  FINISHED = 5,

  /**
   * @generated from enum value: CANCELED = 6;
   */
  CANCELED = 6,

  /**
   * @generated from enum value: REJECTED = 7;
   */
  REJECTED = 7,
}

/**
 * Describes the enum bitwars.LifecycleState.
 */
export const LifecycleStateSchema: GenEnum<LifecycleState> = /*@__PURE__*/
  enumDesc(file_intent, 1);

/**
 * @generated from enum bitwars.LifecycleReason
 */
export enum LifecycleReason {
  /**
   * @generated from enum value: LIFECYCLE_REASON_UNSPECIFIED = 0;
   */
  LIFECYCLE_REASON_UNSPECIFIED = 0,

  /**
   * @generated from enum value: NONE = 1;
   */
  NONE = 1,

  /**
   * @generated from enum value: INTERRUPTED = 2;
   */
  INTERRUPTED = 2,

  /**
   * @generated from enum value: DUPLICATE = 3;
   */
  DUPLICATE = 3,

  /**
   * @generated from enum value: OUT_OF_ORDER = 4;
   */
  OUT_OF_ORDER = 4,

  /**
   * @generated from enum value: INVALID_TARGET = 5;
   */
  INVALID_TARGET = 5,

  /**
   * @generated from enum value: PROTOCOL_MISMATCH = 6;
   */
  PROTOCOL_MISMATCH = 6,
}

/**
 * Describes the enum bitwars.LifecycleReason.
 */
export const LifecycleReasonSchema: GenEnum<LifecycleReason> = /*@__PURE__*/
  enumDesc(file_intent, 2);

