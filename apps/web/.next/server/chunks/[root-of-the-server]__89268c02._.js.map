{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/lib/db/connection.ts"],"sourcesContent":["import { createClient } from \"redis\";\n\nexport const redis = createClient({ url: process.env.GAMESTATE_REDIS_URL });\nawait redis.connect();"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,QAAQ,IAAA,0MAAY,EAAC;IAAE,KAAK,QAAQ,GAAG,CAAC,mBAAmB;AAAC;AACzE,MAAM,MAAM,OAAO","debugId":null}},
    {"offset": {"line": 102, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/features/gamestate/schema/entity/entity.ts"],"sourcesContent":["// zod schema + helpers\nimport { z } from \"zod\";\nexport const EntitySchema = z.object({\n  id: z.uuid(),\n  gameId: z.string(),\n  ownerId: z.uuid(),\n  name: z.string(),\n  // Position Info\n  x: z.number(),\n  y: z.number(),\n  dir: z.number(), // radians\n  speed: z.number(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  // Unit-specific info; non-indexed\n  detail: z.record(z.string(), z.unknown()).optional(),\n  detailVersion: z.tuple([z.number(), z.number(), z.number()]).optional(),\n});\nexport type Entity = z.infer<typeof EntitySchema>;\n\nexport const semVer = (version: [number, number, number]) => `${version[0]}.${version[1]}.${version[2]}`;\n"],"names":[],"mappings":"AAAA,uBAAuB;;;;;;;AACvB;;AACO,MAAM,eAAe,oOAAC,CAAC,MAAM,CAAC;IACnC,IAAI,oOAAC,CAAC,IAAI;IACV,QAAQ,oOAAC,CAAC,MAAM;IAChB,SAAS,oOAAC,CAAC,IAAI;IACf,MAAM,oOAAC,CAAC,MAAM;IACd,gBAAgB;IAChB,GAAG,oOAAC,CAAC,MAAM;IACX,GAAG,oOAAC,CAAC,MAAM;IACX,KAAK,oOAAC,CAAC,MAAM;IACb,OAAO,oOAAC,CAAC,MAAM;IACf,WAAW,oOAAC,CAAC,IAAI;IACjB,WAAW,oOAAC,CAAC,IAAI;IACjB,kCAAkC;IAClC,QAAQ,oOAAC,CAAC,MAAM,CAAC,oOAAC,CAAC,MAAM,IAAI,oOAAC,CAAC,OAAO,IAAI,QAAQ;IAClD,eAAe,oOAAC,CAAC,KAAK,CAAC;QAAC,oOAAC,CAAC,MAAM;QAAI,oOAAC,CAAC,MAAM;QAAI,oOAAC,CAAC,MAAM;KAAG,EAAE,QAAQ;AACvE;AAGO,MAAM,SAAS,CAAC,UAAsC,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE,EAAE","debugId":null}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/features/gamestate/schema/entity/entityDoc.ts"],"sourcesContent":["// schema/entityDoc.ts\nimport { z } from \"zod\";\nimport { EntitySchema } from \"./entity\";\n\nexport const EntityDocSchema = EntitySchema.extend({\n  // overwrite date types for storage:\n  createdAt: z.iso.datetime(),\n  updatedAt: z.iso.datetime(),\n\n}).strict();\n\nexport type EntityDoc = z.infer<typeof EntityDocSchema>;\n"],"names":[],"mappings":"AAAA,sBAAsB;;;;;AACtB;AACA;;;AAEO,MAAM,kBAAkB,2LAAY,CAAC,MAAM,CAAC;IACjD,oCAAoC;IACpC,WAAW,oOAAC,CAAC,GAAG,CAAC,QAAQ;IACzB,WAAW,oOAAC,CAAC,GAAG,CAAC,QAAQ;AAE3B,GAAG,MAAM","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/features/gamestate/schema/keys.ts"],"sourcesContent":["export const ENTITY_INDEX = \"idx:entity\";\nexport const ENTITY_PREFIX = \"entity:\";\n\nexport const entityKey = (id: string) => `entity:${id}`;\nexport const geoKey = (gameId: string) => `geo:game:${gameId}`;\n"],"names":[],"mappings":";;;;;;;;;;AAAO,MAAM,eAAe;AACrB,MAAM,gBAAgB;AAEtB,MAAM,YAAY,CAAC,KAAe,CAAC,OAAO,EAAE,IAAI;AAChD,MAAM,SAAS,CAAC,SAAmB,CAAC,SAAS,EAAE,QAAQ","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/features/gamestate/schema/entity/mappers.ts"],"sourcesContent":["// schema/mappers.ts\nimport type { Entity } from \"./entity\";\nimport type { EntityDoc } from \"./entityDoc\";\n\nexport const toEntityDoc = (e: Entity): EntityDoc => ({\n  ...e,\n  createdAt: e.createdAt.toISOString(),\n  updatedAt: e.updatedAt.toISOString(),\n});\n\nexport const fromEntityDoc = (d: EntityDoc): Entity => {\n  return {\n    ...d,\n    createdAt: new Date(d.createdAt),\n    updatedAt: new Date(d.updatedAt),\n  };\n};\n"],"names":[],"mappings":"AAAA,oBAAoB;;;;;;;AAIb,MAAM,cAAc,CAAC,IAAyB,CAAC;QACpD,GAAG,CAAC;QACJ,WAAW,EAAE,SAAS,CAAC,WAAW;QAClC,WAAW,EAAE,SAAS,CAAC,WAAW;IACpC,CAAC;AAEM,MAAM,gBAAgB,CAAC;IAC5B,OAAO;QACL,GAAG,CAAC;QACJ,WAAW,IAAI,KAAK,EAAE,SAAS;QAC/B,WAAW,IAAI,KAAK,EAAE,SAAS;IACjC;AACF","debugId":null}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/features/gamestate/queries/read/getAllEntities.ts"],"sourcesContent":["import { redis } from \"@/lib/db/connection\";\nimport { type Entity, EntitySchema } from \"@/features/gamestate/schema/entity/entity\";\nimport { EntityDocSchema } from \"@/features/gamestate/schema/entity/entityDoc\";\nimport { ENTITY_INDEX } from \"@/features/gamestate/schema/keys\";\nimport { fromEntityDoc } from \"@/features/gamestate/schema/entity/mappers\";\n\n// Return all keys + values (entities) on the entity index.\n// Uses FT.SEARCH to enumerate JSON docs and returns their Redis keys with parsed Entity values.\nexport async function getAllEntitiesFromIndex(\n    limit = 1000,\n    offset = 0\n  ): Promise<Array<{ key: string; entity: Entity }>> {\n    const resp = await redis.sendCommand([\n      \"FT.SEARCH\",\n      ENTITY_INDEX,\n      \"*\",\n      \"RETURN\", \"1\", \"$\",\n      \"LIMIT\", String(offset), String(limit)\n    ]);\n  \n    const root = resp as unknown;\n    if (!Array.isArray(root)) return [];\n  \n    const out: Array<{ key: string; entity: Entity }> = [];\n    // Shape: [total, docId1, fields1, docId2, fields2, ...]\n    for (let i = 1; i < root.length; i += 2) {\n      const key = String(root[i]);\n      const fields = root[i + 1];\n  \n      let map: Record<string, any> = {};\n      if (Array.isArray(fields)) {\n        for (let j = 0; j < fields.length; j += 2) {\n          map[String(fields[j])] = fields[j + 1];\n        }\n      } else if (fields instanceof Map) {\n        for (const [k, v] of fields as Map<any, any>) {\n          map[String(k)] = v;\n        }\n      } else if (fields && typeof fields === \"object\") {\n        map = fields as Record<string, any>;\n      } else {\n        console.log('skipping this one: no fields')\n        console.log({key, fields})\n        continue;\n      }\n  \n      const rawJson = map[\"$\"];\n      if (!rawJson) {\n        console.log('skipping this one: no raw json')\n        console.log({key, fields})\n        continue;\n      };\n  \n      const raw = JSON.parse(typeof rawJson === \"string\" ? rawJson : String(rawJson));\n      const doc = EntityDocSchema.parse(raw);\n      const entity = fromEntityDoc(doc);\n      out.push({ key, entity });\n    }\n  \n    return out;\n  }\n  "],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;;;;;;;;;AAIO,eAAe,wBAClB,QAAQ,IAAI,EACZ,SAAS,CAAC;IAEV,MAAM,OAAO,MAAM,wJAAK,CAAC,WAAW,CAAC;QACnC;QACA,+KAAY;QACZ;QACA;QAAU;QAAK;QACf;QAAS,OAAO;QAAS,OAAO;KACjC;IAED,MAAM,OAAO;IACb,IAAI,CAAC,MAAM,OAAO,CAAC,OAAO,OAAO,EAAE;IAEnC,MAAM,MAA8C,EAAE;IACtD,wDAAwD;IACxD,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,EAAE,KAAK,EAAG;QACvC,MAAM,MAAM,OAAO,IAAI,CAAC,EAAE;QAC1B,MAAM,SAAS,IAAI,CAAC,IAAI,EAAE;QAE1B,IAAI,MAA2B,CAAC;QAChC,IAAI,MAAM,OAAO,CAAC,SAAS;YACzB,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,KAAK,EAAG;gBACzC,GAAG,CAAC,OAAO,MAAM,CAAC,EAAE,EAAE,GAAG,MAAM,CAAC,IAAI,EAAE;YACxC;QACF,OAAO,IAAI,kBAAkB,KAAK;YAChC,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,OAAyB;gBAC5C,GAAG,CAAC,OAAO,GAAG,GAAG;YACnB;QACF,OAAO,IAAI,UAAU,OAAO,WAAW,UAAU;YAC/C,MAAM;QACR,OAAO;YACL,QAAQ,GAAG,CAAC;YACZ,QAAQ,GAAG,CAAC;gBAAC;gBAAK;YAAM;YACxB;QACF;QAEA,MAAM,UAAU,GAAG,CAAC,IAAI;QACxB,IAAI,CAAC,SAAS;YACZ,QAAQ,GAAG,CAAC;YACZ,QAAQ,GAAG,CAAC;gBAAC;gBAAK;YAAM;YACxB;QACF;;QAEA,MAAM,MAAM,KAAK,KAAK,CAAC,OAAO,YAAY,WAAW,UAAU,OAAO;QACtE,MAAM,MAAM,iMAAe,CAAC,KAAK,CAAC;QAClC,MAAM,SAAS,IAAA,6LAAa,EAAC;QAC7B,IAAI,IAAI,CAAC;YAAE;YAAK;QAAO;IACzB;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/features/users/utils/jwt.ts"],"sourcesContent":["import { jwtVerify } from 'jose';\n\nconst SECRET = process.env.PLAYER_AUTH_SECRET;\n\nexport async function verifyToken(token: string) {\n  if (!SECRET) {\n    console.error('PLAYER_AUTH_SECRET is not set');\n    return null;\n  }\n  try {\n    const encoder = new TextEncoder();\n    const { payload } = await jwtVerify(token, encoder.encode(SECRET), {\n      algorithms: ['HS256'],\n    });\n    return payload;\n  } catch (err) {\n    // Token invalid or expired\n    return null;\n  }\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,SAAS,QAAQ,GAAG,CAAC,kBAAkB;AAEtC,eAAe,YAAY,KAAa;IAC7C,IAAI,CAAC,QAAQ;QACX,QAAQ,KAAK,CAAC;QACd,OAAO;IACT;IACA,IAAI;QACF,MAAM,UAAU,IAAI;QACpB,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAA,uNAAS,EAAC,OAAO,QAAQ,MAAM,CAAC,SAAS;YACjE,YAAY;gBAAC;aAAQ;QACvB;QACA,OAAO;IACT,EAAE,OAAO,KAAK;QACZ,2BAA2B;QAC3B,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/features/users/utils/auth.ts"],"sourcesContent":["// lib/auth.ts\nimport { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\nimport { verifyToken } from './jwt';\nimport { NextResponse } from 'next/server';\n\ntype AuthPayload = {\n  playerId: string;\n  name: string;\n  normalizedName: string;\n  exp?: number;\n  iat?: number;\n};\n\n/**\n * Server-only auth guard for pages and actions.\n *\n * Use at the top of Server Components or Server Actions to ensure the user is\n * authenticated before continuing. If the JWT cookie is missing or invalid,\n * this calls Next.js redirect (which throws) to navigate to the provided path\n * (defaults to '/').\n *\n * Use requireAuthOr401 for API route handlers (files under app/.../route.ts).\n * \n * Behavior summary:\n * - Reads the player_token httpOnly cookie.\n * - Verifies the JWT (HS256) with the server secret.\n * - On failure: redirects to the given path.\n * - On success: returns the decoded payload.\n *\n * Examples:\n *\n * ```ts\n * import { requireAuthOrRedirect } from '@/features/users/utils/auth';\n *\n * export default async function Page() {\n *   const auth = await requireAuthOrRedirect('/');\n *   return <div>Welcome, {`{`}{auth.name}{`}`}</div>;\n * }\n * ```\n *\n */\nexport async function requireAuthOrRedirect(redirectTo: string = '/') : Promise<AuthPayload> {\n  const token = (await cookies()).get('player_token')?.value;\n  if (!token) redirect(redirectTo); // throws to stop execution\n\n  try {\n    const payload = await verifyToken(token);\n    if (!payload) redirect(redirectTo);\n    return payload as AuthPayload;\n  } catch {\n    redirect(redirectTo);\n  }\n}\n\n/**\n * API-route auth helper that returns 401 Unauthorized when not authenticated.\n *\n * Intended usage: call at the top of API route handlers (files under\n * app/.../route.ts). This function reads and verifies the player_token cookie.\n * If missing or invalid, it returns a NextResponse JSON with status 401.\n * If valid, it returns the decoded auth payload and no response.\n *\n * Return shape:\n * - { auth: null,  res: NextResponse } when unauthorized (status 401)\n * - { auth: object, res: null } when authorized (payload is the decoded JWT)\n *\n * Example (API route handler):\n * ```ts\n * import { NextResponse } from 'next/server';\n * import { requireAuthOr401 } from '@/features/users/utils/auth';\n *\n * export async function GET() {\n *   const { auth, res } = await requireAuthOr401();\n *   if (res) return res; // 401 when not authenticated\n *\n *   // authenticated request logic here, e.g. use auth.playerId\n *   return NextResponse.json({ ok: true, playerId: (auth as any).playerId });\n * }\n * ```\n */\nexport async function requireAuthOr401() {\n    const token = (await cookies()).get('player_token')?.value;\n    if (!token) return { \n        auth: null,\n        res: NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    };\n  \n    try {\n      const payload = await verifyToken(token);\n      return {\n        auth: payload,\n        res: null\n      };\n    } catch {\n      return {\n        auth: null,\n        res: NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n      };\n    }\n  }\n"],"names":[],"mappings":"AAAA,cAAc;;;;;;;AACd;AACA;AAAA;AACA;AACA;;;;;AAsCO,eAAe,sBAAsB,aAAqB,GAAG;IAClE,MAAM,QAAQ,CAAC,MAAM,IAAA,2QAAO,GAAE,EAAE,GAAG,CAAC,iBAAiB;IACrD,IAAI,CAAC,OAAO,IAAA,kUAAQ,EAAC,aAAa,2BAA2B;IAE7D,IAAI;QACF,MAAM,UAAU,MAAM,IAAA,wKAAW,EAAC;QAClC,IAAI,CAAC,SAAS,IAAA,kUAAQ,EAAC;QACvB,OAAO;IACT,EAAE,OAAM;QACN,IAAA,kUAAQ,EAAC;IACX;AACF;AA4BO,eAAe;IAClB,MAAM,QAAQ,CAAC,MAAM,IAAA,2QAAO,GAAE,EAAE,GAAG,CAAC,iBAAiB;IACrD,IAAI,CAAC,OAAO,OAAO;QACf,MAAM;QACN,KAAK,+QAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;IAEA,IAAI;QACF,MAAM,UAAU,MAAM,IAAA,wKAAW,EAAC;QAClC,OAAO;YACL,MAAM;YACN,KAAK;QACP;IACF,EAAE,OAAM;QACN,OAAO;YACL,MAAM;YACN,KAAK,+QAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QAClE;IACF;AACF","debugId":null}},
    {"offset": {"line": 377, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/app/api/gamestate/stream/route.ts"],"sourcesContent":["import { getAllEntitiesFromIndex } from '@/features/gamestate/queries/read/getAllEntities';\nimport { requireAuthOr401 } from '@/features/users/utils/auth';\n\nexport async function GET(request: Request) {\n  const { res } = await requireAuthOr401();\n  if (res) return res; // 401 when not authenticated\n\n  const encoder = new TextEncoder();\n  const stream = new ReadableStream({\n    async start(controller) {\n      let closed = false;\n\n      const safeEnqueue = (chunk: Uint8Array) => {\n        if (closed) return;\n        try {\n          controller.enqueue(chunk);\n        } catch {\n          // controller already closed\n          closed = true;\n        }\n      };\n\n      // Cleanup helper\n      const cleanup = (id?: ReturnType<typeof setInterval>) => {\n        if (id) clearInterval(id);\n        if (!closed) {\n          closed = true;\n          try { controller.close(); } catch {}\n        }\n      };\n\n      // Abort/disconnect handling\n      const onAbort = () => cleanup(intervalId);\n      request.signal.addEventListener('abort', onAbort);\n\n      // Initial tick\n      try {\n        const entities = await getAllEntitiesFromIndex();\n        safeEnqueue(encoder.encode(`event: entities\\ndata: ${JSON.stringify(entities)}\\n\\n`));\n      } catch (err) {\n        safeEnqueue(encoder.encode(`event: error\\ndata: ${JSON.stringify({ message: 'initial fetch failed' })}\\n\\n`));\n      }\n\n      // Periodic polling\n      const intervalId = setInterval(async () => {\n        if (closed) return;\n        try {\n          const entities = await getAllEntitiesFromIndex();\n          safeEnqueue(encoder.encode(`event: entities\\ndata: ${JSON.stringify(entities)}\\n\\n`));\n        } catch (err) {\n          safeEnqueue(encoder.encode(`event: error\\ndata: ${JSON.stringify({ message: 'poll failed' })}\\n\\n`));\n        }\n      }, 1000);\n\n      // Store cleanup on controller\n      (controller as any)._cleanup = () => {\n        request.signal.removeEventListener('abort', onAbort);\n        cleanup(intervalId);\n      };\n    },\n    cancel() {\n      const doCleanup = (this as any)._cleanup;\n      if (typeof doCleanup === 'function') doCleanup();\n    }\n  });\n\n  return new Response(stream, {\n    headers: {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache, no-transform',\n      'Connection': 'keep-alive'\n    }\n  });\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;;;;AAEO,eAAe,IAAI,OAAgB;IACxC,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,IAAA,8KAAgB;IACtC,IAAI,KAAK,OAAO,KAAK,6BAA6B;IAElD,MAAM,UAAU,IAAI;IACpB,MAAM,SAAS,IAAI,eAAe;QAChC,MAAM,OAAM,UAAU;YACpB,IAAI,SAAS;YAEb,MAAM,cAAc,CAAC;gBACnB,IAAI,QAAQ;gBACZ,IAAI;oBACF,WAAW,OAAO,CAAC;gBACrB,EAAE,OAAM;oBACN,4BAA4B;oBAC5B,SAAS;gBACX;YACF;YAEA,iBAAiB;YACjB,MAAM,UAAU,CAAC;gBACf,IAAI,IAAI,cAAc;gBACtB,IAAI,CAAC,QAAQ;oBACX,SAAS;oBACT,IAAI;wBAAE,WAAW,KAAK;oBAAI,EAAE,OAAM,CAAC;gBACrC;YACF;YAEA,4BAA4B;YAC5B,MAAM,UAAU,IAAM,QAAQ;YAC9B,QAAQ,MAAM,CAAC,gBAAgB,CAAC,SAAS;YAEzC,eAAe;YACf,IAAI;gBACF,MAAM,WAAW,MAAM,IAAA,6MAAuB;gBAC9C,YAAY,QAAQ,MAAM,CAAC,CAAC,uBAAuB,EAAE,KAAK,SAAS,CAAC,UAAU,IAAI,CAAC;YACrF,EAAE,OAAO,KAAK;gBACZ,YAAY,QAAQ,MAAM,CAAC,CAAC,oBAAoB,EAAE,KAAK,SAAS,CAAC;oBAAE,SAAS;gBAAuB,GAAG,IAAI,CAAC;YAC7G;YAEA,mBAAmB;YACnB,MAAM,aAAa,YAAY;gBAC7B,IAAI,QAAQ;gBACZ,IAAI;oBACF,MAAM,WAAW,MAAM,IAAA,6MAAuB;oBAC9C,YAAY,QAAQ,MAAM,CAAC,CAAC,uBAAuB,EAAE,KAAK,SAAS,CAAC,UAAU,IAAI,CAAC;gBACrF,EAAE,OAAO,KAAK;oBACZ,YAAY,QAAQ,MAAM,CAAC,CAAC,oBAAoB,EAAE,KAAK,SAAS,CAAC;wBAAE,SAAS;oBAAc,GAAG,IAAI,CAAC;gBACpG;YACF,GAAG;YAEH,8BAA8B;YAC7B,WAAmB,QAAQ,GAAG;gBAC7B,QAAQ,MAAM,CAAC,mBAAmB,CAAC,SAAS;gBAC5C,QAAQ;YACV;QACF;QACA;YACE,MAAM,YAAY,AAAC,IAAI,CAAS,QAAQ;YACxC,IAAI,OAAO,cAAc,YAAY;QACvC;IACF;IAEA,OAAO,IAAI,SAAS,QAAQ;QAC1B,SAAS;YACP,gBAAgB;YAChB,iBAAiB;YACjB,cAAc;QAChB;IACF;AACF","debugId":null}}]
}