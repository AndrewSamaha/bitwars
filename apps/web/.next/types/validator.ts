// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/page.tsx
{
  const handler = {} as typeof import("../../src/app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../src/app/play/page.tsx
{
  const handler = {} as typeof import("../../src/app/play/page.js")
  handler satisfies AppPageConfig<"/play">
}

// Validate ../../src/app/api/gamestate/debug/route.ts
{
  const handler = {} as typeof import("../../src/app/api/gamestate/debug/route.js")
  handler satisfies RouteHandlerConfig<"/api/gamestate/debug">
}

// Validate ../../src/app/api/gamestate/mocks/create_gamestate/route.ts
{
  const handler = {} as typeof import("../../src/app/api/gamestate/mocks/create_gamestate/route.js")
  handler satisfies RouteHandlerConfig<"/api/gamestate/mocks/create_gamestate">
}

// Validate ../../src/app/api/gamestate/poll/route.ts
{
  const handler = {} as typeof import("../../src/app/api/gamestate/poll/route.js")
  handler satisfies RouteHandlerConfig<"/api/gamestate/poll">
}

// Validate ../../src/app/api/gamestate/stream/route.ts
{
  const handler = {} as typeof import("../../src/app/api/gamestate/stream/route.js")
  handler satisfies RouteHandlerConfig<"/api/gamestate/stream">
}

// Validate ../../src/app/api/init/route.ts
{
  const handler = {} as typeof import("../../src/app/api/init/route.js")
  handler satisfies RouteHandlerConfig<"/api/init">
}

// Validate ../../src/app/api/players/getActive/route.ts
{
  const handler = {} as typeof import("../../src/app/api/players/getActive/route.js")
  handler satisfies RouteHandlerConfig<"/api/players/getActive">
}

// Validate ../../src/app/api/players/getSuggestedLoginDetails/route.ts
{
  const handler = {} as typeof import("../../src/app/api/players/getSuggestedLoginDetails/route.js")
  handler satisfies RouteHandlerConfig<"/api/players/getSuggestedLoginDetails">
}

// Validate ../../src/app/api/players/login/route.ts
{
  const handler = {} as typeof import("../../src/app/api/players/login/route.js")
  handler satisfies RouteHandlerConfig<"/api/players/login">
}

// Validate ../../src/app/api/players/me/route.ts
{
  const handler = {} as typeof import("../../src/app/api/players/me/route.js")
  handler satisfies RouteHandlerConfig<"/api/players/me">
}

// Validate ../../src/app/api/players/mocks/create_players/route.ts
{
  const handler = {} as typeof import("../../src/app/api/players/mocks/create_players/route.js")
  handler satisfies RouteHandlerConfig<"/api/players/mocks/create_players">
}





// Validate ../../src/app/layout.tsx
{
  const handler = {} as typeof import("../../src/app/layout.js")
  handler satisfies LayoutConfig<"/">
}

// Validate ../../src/app/play/layout.tsx
{
  const handler = {} as typeof import("../../src/app/play/layout.js")
  handler satisfies LayoutConfig<"/play">
}
