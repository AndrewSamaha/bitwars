{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/utils/definedProps.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/utils/definedProps.ts"],"sourcesContent":["/**\n * Returns a new object with all properties from the input object that have defined values.\n * @template T - The type of the input object.\n * @param {T} obj - The input object.\n * @returns {T} - A new object with only the defined properties from the input object.\n * @category utils\n * @ignore\n */\nexport function definedProps<T extends Record<string, any>>(obj: T): T\n{\n    const result: Partial<T> = {};\n\n    for (const key in obj)\n    {\n        if (obj[key] !== undefined)\n        {\n            result[key] = obj[key];\n        }\n    }\n\n    return result as T;\n}\n"],"names":[],"mappings":";;;;;AAQO,SAAS,aAA4C,GAC5D,EAAA;IACI,MAAM,SAAqB,CAAA,CAAC,CAAA;IAE5B,IAAA,MAAW,OAAO,GAClB,CAAA;QACQ,IAAA,GAAA,CAAI,GAAG,CAAA,KAAM,KACjB,CAAA,EAAA;YACW,MAAA,CAAA,GAAG,CAAI,GAAA,GAAA,CAAI,GAAG,CAAA,CAAA;QAAA,CACzB;IAAA,CACJ;IAEO,OAAA,MAAA,CAAA;AACX","debugId":null}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/bounds/Bounds.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/bounds/Bounds.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../maths/shapes/Rectangle';\n\n/**\n * A simple axis-aligned bounding box (AABB) data structure used to define rectangular boundaries.\n * Provides a clearer alternative to array-based bounds representation [minX, minY, maxX, maxY].\n * @example\n * ```ts\n * // Create bounds data\n * const bounds: BoundsData = {\n *     minX: 0,\n *     minY: 0,\n *     maxX: 100,\n *     maxY: 100\n * };\n *\n * // Calculate dimensions\n * const width = bounds.maxX - bounds.minX;\n * const height = bounds.maxY - bounds.minY;\n *\n * // Check if point is inside\n * const isInside = (x: number, y: number) =>\n *     x >= bounds.minX && x <= bounds.maxX &&\n *     y >= bounds.minY && y <= bounds.maxY;\n * ```\n * @see {@link Bounds} For full bounds implementation\n * @see {@link Container#getBounds} For getting bounds\n * @category rendering\n * @standard\n */\nexport interface BoundsData\n{\n    /** The minimum X coordinate of the bounds */\n    minX: number;\n    /** The minimum Y coordinate of the bounds */\n    minY: number;\n    /** The maximum X coordinate of the bounds */\n    maxX: number;\n    /** The maximum Y coordinate of the bounds */\n    maxY: number;\n}\n\nconst defaultMatrix = new Matrix();\n\n// TODO optimisations\n// 1 - get rectangle could use a dirty flag, rather than setting the data each time is called\n// 2- getFrame ALWAYS assumes a matrix, could be optimised to avoid the matrix calculation if not needed\n\n/**\n * A representation of an axis-aligned bounding box (AABB) used for efficient collision detection and culling.\n * Stores minimum and maximum coordinates to define a rectangular boundary.\n * @example\n * ```ts\n * // Create bounds\n * const bounds = new Bounds();\n *\n * // Add a rectangular frame\n * bounds.addFrame(0, 0, 100, 100);\n * console.log(bounds.width, bounds.height); // 100, 100\n *\n * // Transform bounds\n * const matrix = new Matrix()\n *     .translate(50, 50)\n *     .rotate(Math.PI / 4);\n * bounds.applyMatrix(matrix);\n *\n * // Check point intersection\n * if (bounds.containsPoint(75, 75)) {\n *     console.log('Point is inside bounds!');\n * }\n * ```\n * @category rendering\n * @standard\n */\nexport class Bounds\n{\n    /**\n     * The minimum X coordinate of the bounds.\n     * Represents the leftmost edge of the bounding box.\n     * @example\n     * ```ts\n     * const bounds = new Bounds();\n     * // Set left edge\n     * bounds.minX = 100;\n     * ```\n     * @default Infinity\n     */\n    public minX = Infinity;\n\n    /**\n     * The minimum Y coordinate of the bounds.\n     * Represents the topmost edge of the bounding box.\n     * @example\n     * ```ts\n     * const bounds = new Bounds();\n     * // Set top edge\n     * bounds.minY = 100;\n     * ```\n     * @default Infinity\n     */\n    public minY = Infinity;\n\n    /**\n     * The maximum X coordinate of the bounds.\n     * Represents the rightmost edge of the bounding box.\n     * @example\n     * ```ts\n     * const bounds = new Bounds();\n     * // Set right edge\n     * bounds.maxX = 200;\n     * // Get width\n     * const width = bounds.maxX - bounds.minX;\n     * ```\n     * @default -Infinity\n     */\n    public maxX = -Infinity;\n\n    /**\n     * The maximum Y coordinate of the bounds.\n     * Represents the bottommost edge of the bounding box.\n     * @example\n     * ```ts\n     * const bounds = new Bounds();\n     * // Set bottom edge\n     * bounds.maxY = 200;\n     * // Get height\n     * const height = bounds.maxY - bounds.minY;\n     * ```\n     * @default -Infinity\n     */\n    public maxY = -Infinity;\n\n    /**\n     * The transformation matrix applied to this bounds object.\n     * Used when calculating bounds with transforms.\n     * @example\n     * ```ts\n     * const bounds = new Bounds();\n     *\n     * // Apply translation matrix\n     * bounds.matrix = new Matrix()\n     *     .translate(100, 100);\n     *\n     * // Combine transformations\n     * bounds.matrix = new Matrix()\n     *     .translate(50, 50)\n     *     .rotate(Math.PI / 4)\n     *     .scale(2, 2);\n     *\n     * // Use in bounds calculations\n     * bounds.addFrame(0, 0, 100, 100); // Uses current matrix\n     * bounds.addFrame(0, 0, 100, 100, customMatrix); // Override matrix\n     * ```\n     * @advanced\n     */\n    public matrix = defaultMatrix;\n\n    private _rectangle: Rectangle;\n\n    /**\n     * Creates a new Bounds object.\n     * @param minX - The minimum X coordinate of the bounds.\n     * @param minY - The minimum Y coordinate of the bounds.\n     * @param maxX - The maximum X coordinate of the bounds.\n     * @param maxY - The maximum Y coordinate of the bounds.\n     */\n    constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity)\n    {\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Checks if bounds are empty, meaning either width or height is zero or negative.\n     * Empty bounds occur when min values exceed max values on either axis.\n     * @example\n     * ```ts\n     * const bounds = new Bounds();\n     *\n     * // Check if newly created bounds are empty\n     * console.log(bounds.isEmpty()); // true, default bounds are empty\n     *\n     * // Add frame and check again\n     * bounds.addFrame(0, 0, 100, 100);\n     * console.log(bounds.isEmpty()); // false, bounds now have area\n     *\n     * // Clear bounds\n     * bounds.clear();\n     * console.log(bounds.isEmpty()); // true, bounds are empty again\n     * ```\n     * @returns True if bounds are empty (have no area)\n     * @see {@link Bounds#clear} For resetting bounds\n     * @see {@link Bounds#isValid} For checking validity\n     */\n    public isEmpty(): boolean\n    {\n        return this.minX > this.maxX || this.minY > this.maxY;\n    }\n\n    /**\n     * The bounding rectangle representation of these bounds.\n     * Lazily creates and updates a Rectangle instance based on the current bounds.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(0, 0, 100, 100);\n     *\n     * // Get rectangle representation\n     * const rect = bounds.rectangle;\n     * console.log(rect.x, rect.y, rect.width, rect.height);\n     *\n     * // Use for hit testing\n     * if (bounds.rectangle.contains(mouseX, mouseY)) {\n     *     console.log('Mouse is inside bounds!');\n     * }\n     * ```\n     * @see {@link Rectangle} For rectangle methods\n     * @see {@link Bounds.isEmpty} For bounds validation\n     */\n    get rectangle(): Rectangle\n    {\n        if (!this._rectangle)\n        {\n            this._rectangle = new Rectangle();\n        }\n\n        const rectangle = this._rectangle;\n\n        if (this.minX > this.maxX || this.minY > this.maxY)\n        {\n            rectangle.x = 0;\n            rectangle.y = 0;\n            rectangle.width = 0;\n            rectangle.height = 0;\n        }\n        else\n        {\n            rectangle.copyFromBounds(this);\n        }\n\n        return rectangle;\n    }\n\n    /**\n     * Clears the bounds and resets all coordinates to their default values.\n     * Resets the transformation matrix back to identity.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(0, 0, 100, 100);\n     * console.log(bounds.isEmpty()); // false\n     * // Clear the bounds\n     * bounds.clear();\n     * console.log(bounds.isEmpty()); // true\n     * ```\n     * @returns This bounds object for chaining\n     */\n    public clear(): this\n    {\n        this.minX = Infinity;\n        this.minY = Infinity;\n        this.maxX = -Infinity;\n        this.maxY = -Infinity;\n\n        this.matrix = defaultMatrix;\n\n        return this;\n    }\n\n    /**\n     * Sets the bounds directly using coordinate values.\n     * Provides a way to set all bounds values at once.\n     * @example\n     * ```ts\n     * const bounds = new Bounds();\n     * bounds.set(0, 0, 100, 100);\n     * ```\n     * @param x0 - Left X coordinate of frame\n     * @param y0 - Top Y coordinate of frame\n     * @param x1 - Right X coordinate of frame\n     * @param y1 - Bottom Y coordinate of frame\n     * @see {@link Bounds#addFrame} For matrix-aware bounds setting\n     * @see {@link Bounds#clear} For resetting bounds\n     */\n    public set(x0: number, y0: number, x1: number, y1: number)\n    {\n        this.minX = x0;\n        this.minY = y0;\n        this.maxX = x1;\n        this.maxY = y1;\n    }\n\n    /**\n     * Adds a rectangular frame to the bounds, optionally transformed by a matrix.\n     * Updates the bounds to encompass the new frame coordinates.\n     * @example\n     * ```ts\n     * const bounds = new Bounds();\n     * bounds.addFrame(0, 0, 100, 100);\n     *\n     * // Add transformed frame\n     * const matrix = new Matrix()\n     *     .translate(50, 50)\n     *     .rotate(Math.PI / 4);\n     * bounds.addFrame(0, 0, 100, 100, matrix);\n     * ```\n     * @param x0 - Left X coordinate of frame\n     * @param y0 - Top Y coordinate of frame\n     * @param x1 - Right X coordinate of frame\n     * @param y1 - Bottom Y coordinate of frame\n     * @param matrix - Optional transformation matrix\n     * @see {@link Bounds#addRect} For adding Rectangle objects\n     * @see {@link Bounds#addBounds} For adding other Bounds\n     */\n    public addFrame(x0: number, y0: number, x1: number, y1: number, matrix?: Matrix): void\n    {\n        matrix ||= this.matrix;\n\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        let x = (a * x0) + (c * y0) + tx;\n        let y = (b * x0) + (d * y0) + ty;\n\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n\n        x = (a * x1) + (c * y0) + tx;\n        y = (b * x1) + (d * y0) + ty;\n\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n\n        x = (a * x0) + (c * y1) + tx;\n        y = (b * x0) + (d * y1) + ty;\n\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n\n        x = (a * x1) + (c * y1) + tx;\n        y = (b * x1) + (d * y1) + ty;\n\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds a rectangle to the bounds, optionally transformed by a matrix.\n     * Updates the bounds to encompass the given rectangle.\n     * @example\n     * ```ts\n     * const bounds = new Bounds();\n     * // Add simple rectangle\n     * const rect = new Rectangle(0, 0, 100, 100);\n     * bounds.addRect(rect);\n     *\n     * // Add transformed rectangle\n     * const matrix = new Matrix()\n     *     .translate(50, 50)\n     *     .rotate(Math.PI / 4);\n     * bounds.addRect(rect, matrix);\n     * ```\n     * @param rect - The rectangle to be added\n     * @param matrix - Optional transformation matrix\n     * @see {@link Bounds#addFrame} For adding raw coordinates\n     * @see {@link Bounds#addBounds} For adding other bounds\n     */\n    public addRect(rect: Rectangle, matrix?: Matrix)\n    {\n        this.addFrame(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height, matrix);\n    }\n\n    /**\n     * Adds another bounds object to this one, optionally transformed by a matrix.\n     * Expands the bounds to include the given bounds' area.\n     * @example\n     * ```ts\n     * const bounds = new Bounds();\n     *\n     * // Add child bounds\n     * const childBounds = sprite.getBounds();\n     * bounds.addBounds(childBounds);\n     *\n     * // Add transformed bounds\n     * const matrix = new Matrix()\n     *     .scale(2, 2);\n     * bounds.addBounds(childBounds, matrix);\n     * ```\n     * @param bounds - The bounds to be added\n     * @param matrix - Optional transformation matrix\n     * @see {@link Bounds#addFrame} For adding raw coordinates\n     * @see {@link Bounds#addRect} For adding rectangles\n     */\n    public addBounds(bounds: BoundsData, matrix?: Matrix)\n    {\n        this.addFrame(bounds.minX, bounds.minY, bounds.maxX, bounds.maxY, matrix);\n    }\n\n    /**\n     * Adds other Bounds as a mask, creating an intersection of the two bounds.\n     * Only keeps the overlapping region between current bounds and mask bounds.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(0, 0, 100, 100);\n     * // Create mask bounds\n     * const mask = new Bounds();\n     * mask.addFrame(50, 50, 150, 150);\n     * // Apply mask - results in bounds of (50,50,100,100)\n     * bounds.addBoundsMask(mask);\n     * ```\n     * @param mask - The Bounds to use as a mask\n     * @see {@link Bounds#addBounds} For union operation\n     * @see {@link Bounds#fit} For fitting to rectangle\n     */\n    public addBoundsMask(mask: Bounds): void\n    {\n        this.minX = this.minX > mask.minX ? this.minX : mask.minX;\n        this.minY = this.minY > mask.minY ? this.minY : mask.minY;\n        this.maxX = this.maxX < mask.maxX ? this.maxX : mask.maxX;\n        this.maxY = this.maxY < mask.maxY ? this.maxY : mask.maxY;\n    }\n\n    /**\n     * Applies a transformation matrix to the bounds, updating its coordinates.\n     * Transforms all corners of the bounds using the given matrix.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(0, 0, 100, 100);\n     * // Apply translation\n     * const translateMatrix = new Matrix()\n     *     .translate(50, 50);\n     * bounds.applyMatrix(translateMatrix);\n     * ```\n     * @param matrix - The matrix to apply to the bounds\n     * @see {@link Matrix} For matrix operations\n     * @see {@link Bounds#addFrame} For adding transformed frames\n     */\n    public applyMatrix(matrix: Matrix): void\n    {\n        const minX = this.minX;\n        const minY = this.minY;\n        const maxX = this.maxX;\n        const maxY = this.maxY;\n\n        // multiple bounds by matrix\n        const { a, b, c, d, tx, ty } = matrix;\n\n        let x = (a * minX) + (c * minY) + tx;\n        let y = (b * minX) + (d * minY) + ty;\n\n        this.minX = x;\n        this.minY = y;\n        this.maxX = x;\n        this.maxY = y;\n\n        x = (a * maxX) + (c * minY) + tx;\n        y = (b * maxX) + (d * minY) + ty;\n        this.minX = x < this.minX ? x : this.minX;\n        this.minY = y < this.minY ? y : this.minY;\n        this.maxX = x > this.maxX ? x : this.maxX;\n        this.maxY = y > this.maxY ? y : this.maxY;\n\n        x = (a * minX) + (c * maxY) + tx;\n        y = (b * minX) + (d * maxY) + ty;\n        this.minX = x < this.minX ? x : this.minX;\n        this.minY = y < this.minY ? y : this.minY;\n        this.maxX = x > this.maxX ? x : this.maxX;\n        this.maxY = y > this.maxY ? y : this.maxY;\n\n        x = (a * maxX) + (c * maxY) + tx;\n        y = (b * maxX) + (d * maxY) + ty;\n        this.minX = x < this.minX ? x : this.minX;\n        this.minY = y < this.minY ? y : this.minY;\n        this.maxX = x > this.maxX ? x : this.maxX;\n        this.maxY = y > this.maxY ? y : this.maxY;\n    }\n\n    /**\n     * Resizes the bounds object to fit within the given rectangle.\n     * Clips the bounds if they extend beyond the rectangle's edges.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(0, 0, 200, 200);\n     * // Fit within viewport\n     * const viewport = new Rectangle(50, 50, 100, 100);\n     * bounds.fit(viewport);\n     * // bounds are now (50, 50, 150, 150)\n     * ```\n     * @param rect - The rectangle to fit within\n     * @returns This bounds object for chaining\n     * @see {@link Bounds#addBoundsMask} For intersection\n     * @see {@link Bounds#pad} For expanding bounds\n     */\n    public fit(rect: Rectangle): this\n    {\n        if (this.minX < rect.left) this.minX = rect.left;\n        if (this.maxX > rect.right) this.maxX = rect.right;\n\n        if (this.minY < rect.top) this.minY = rect.top;\n        if (this.maxY > rect.bottom) this.maxY = rect.bottom;\n\n        return this;\n    }\n\n    /**\n     * Resizes the bounds object to include the given bounds.\n     * Similar to fit() but works with raw coordinate values instead of a Rectangle.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(0, 0, 200, 200);\n     * // Fit to specific coordinates\n     * bounds.fitBounds(50, 150, 50, 150);\n     * // bounds are now (50, 50, 150, 150)\n     * ```\n     * @param left - The left value of the bounds\n     * @param right - The right value of the bounds\n     * @param top - The top value of the bounds\n     * @param bottom - The bottom value of the bounds\n     * @returns This bounds object for chaining\n     * @see {@link Bounds#fit} For fitting to Rectangle\n     * @see {@link Bounds#addBoundsMask} For intersection\n     */\n    public fitBounds(left: number, right: number, top: number, bottom: number): this\n    {\n        if (this.minX < left) this.minX = left;\n        if (this.maxX > right) this.maxX = right;\n\n        if (this.minY < top) this.minY = top;\n        if (this.maxY > bottom) this.maxY = bottom;\n\n        return this;\n    }\n\n    /**\n     * Pads bounds object, making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(0, 0, 100, 100);\n     *\n     * // Add equal padding\n     * bounds.pad(10);\n     * // bounds are now (-10, -10, 110, 110)\n     *\n     * // Add different padding for x and y\n     * bounds.pad(20, 10);\n     * // bounds are now (-30, -20, 130, 120)\n     * ```\n     * @param paddingX - The horizontal padding amount\n     * @param paddingY - The vertical padding amount\n     * @returns This bounds object for chaining\n     * @see {@link Bounds#fit} For constraining bounds\n     * @see {@link Bounds#scale} For uniform scaling\n     */\n    public pad(paddingX: number, paddingY: number = paddingX): this\n    {\n        this.minX -= paddingX;\n        this.maxX += paddingX;\n\n        this.minY -= paddingY;\n        this.maxY += paddingY;\n\n        return this;\n    }\n\n    /**\n     * Ceils the bounds by rounding up max values and rounding down min values.\n     * Useful for pixel-perfect calculations and avoiding fractional pixels.\n     * @example\n     * ```ts\n     * const bounds = new Bounds();\n     * bounds.set(10.2, 10.9, 50.1, 50.8);\n     *\n     * // Round to whole pixels\n     * bounds.ceil();\n     * // bounds are now (10, 10, 51, 51)\n     * ```\n     * @returns This bounds object for chaining\n     * @see {@link Bounds#scale} For size adjustments\n     * @see {@link Bounds#fit} For constraining bounds\n     */\n    public ceil(): this\n    {\n        this.minX = Math.floor(this.minX);\n        this.minY = Math.floor(this.minY);\n        this.maxX = Math.ceil(this.maxX);\n        this.maxY = Math.ceil(this.maxY);\n\n        return this;\n    }\n\n    /**\n     * Creates a new Bounds instance with the same values.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(0, 0, 100, 100);\n     *\n     * // Create a copy\n     * const copy = bounds.clone();\n     *\n     * // Original and copy are independent\n     * bounds.pad(10);\n     * console.log(copy.width === bounds.width); // false\n     * ```\n     * @returns A new Bounds instance with the same values\n     * @see {@link Bounds#copyFrom} For reusing existing bounds\n     */\n    public clone(): Bounds\n    {\n        return new Bounds(this.minX, this.minY, this.maxX, this.maxY);\n    }\n\n    /**\n     * Scales the bounds by the given values, adjusting all edges proportionally.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(0, 0, 100, 100);\n     *\n     * // Scale uniformly\n     * bounds.scale(2);\n     * // bounds are now (0, 0, 200, 200)\n     *\n     * // Scale non-uniformly\n     * bounds.scale(0.5, 2);\n     * // bounds are now (0, 0, 100, 400)\n     * ```\n     * @param x - The X value to scale by\n     * @param y - The Y value to scale by (defaults to x)\n     * @returns This bounds object for chaining\n     * @see {@link Bounds#pad} For adding padding\n     * @see {@link Bounds#fit} For constraining size\n     */\n    public scale(x: number, y: number = x): this\n    {\n        this.minX *= x;\n        this.minY *= y;\n        this.maxX *= x;\n        this.maxY *= y;\n\n        return this;\n    }\n\n    /**\n     * The x position of the bounds in local space.\n     * Setting this value will move the bounds while maintaining its width.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(0, 0, 100, 100);\n     * // Get x position\n     * console.log(bounds.x); // 0\n     *\n     * // Move bounds horizontally\n     * bounds.x = 50;\n     * console.log(bounds.minX, bounds.maxX); // 50, 150\n     *\n     * // Width stays the same\n     * console.log(bounds.width); // Still 100\n     * ```\n     */\n    get x(): number\n    {\n        return this.minX;\n    }\n    set x(value: number)\n    {\n        const width = this.maxX - this.minX;\n\n        this.minX = value;\n        this.maxX = value + width;\n    }\n\n    /**\n     * The y position of the bounds in local space.\n     * Setting this value will move the bounds while maintaining its height.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(0, 0, 100, 100);\n     * // Get y position\n     * console.log(bounds.y); // 0\n     *\n     * // Move bounds vertically\n     * bounds.y = 50;\n     * console.log(bounds.minY, bounds.maxY); // 50, 150\n     *\n     * // Height stays the same\n     * console.log(bounds.height); // Still 100\n     * ```\n     */\n    get y(): number\n    {\n        return this.minY;\n    }\n\n    set y(value: number)\n    {\n        const height = this.maxY - this.minY;\n\n        this.minY = value;\n        this.maxY = value + height;\n    }\n\n    /**\n     * The width value of the bounds.\n     * Represents the distance between minX and maxX coordinates.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(0, 0, 100, 100);\n     * // Get width\n     * console.log(bounds.width); // 100\n     * // Resize width\n     * bounds.width = 200;\n     * console.log(bounds.maxX - bounds.minX); // 200\n     * ```\n     */\n    get width(): number\n    {\n        return this.maxX - this.minX;\n    }\n\n    set width(value: number)\n    {\n        this.maxX = this.minX + value;\n    }\n\n    /**\n     * The height value of the bounds.\n     * Represents the distance between minY and maxY coordinates.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(0, 0, 100, 100);\n     * // Get height\n     * console.log(bounds.height); // 100\n     * // Resize height\n     * bounds.height = 150;\n     * console.log(bounds.maxY - bounds.minY); // 150\n     * ```\n     */\n    get height(): number\n    {\n        return this.maxY - this.minY;\n    }\n\n    set height(value: number)\n    {\n        this.maxY = this.minY + value;\n    }\n\n    /**\n     * The left edge coordinate of the bounds.\n     * Alias for minX.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(50, 0, 150, 100);\n     * console.log(bounds.left); // 50\n     * console.log(bounds.left === bounds.minX); // true\n     * ```\n     * @readonly\n     */\n    get left(): number\n    {\n        return this.minX;\n    }\n\n    /**\n     * The right edge coordinate of the bounds.\n     * Alias for maxX.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(0, 0, 100, 100);\n     * console.log(bounds.right); // 100\n     * console.log(bounds.right === bounds.maxX); // true\n     * ```\n     * @readonly\n     */\n    get right(): number\n    {\n        return this.maxX;\n    }\n\n    /**\n     * The top edge coordinate of the bounds.\n     * Alias for minY.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(0, 25, 100, 125);\n     * console.log(bounds.top); // 25\n     * console.log(bounds.top === bounds.minY); // true\n     * ```\n     * @readonly\n     */\n    get top(): number\n    {\n        return this.minY;\n    }\n\n    /**\n     * The bottom edge coordinate of the bounds.\n     * Alias for maxY.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(0, 0, 100, 200);\n     * console.log(bounds.bottom); // 200\n     * console.log(bounds.bottom === bounds.maxY); // true\n     * ```\n     * @readonly\n     */\n    get bottom(): number\n    {\n        return this.maxY;\n    }\n\n    /**\n     * Whether the bounds has positive width and height.\n     * Checks if both dimensions are greater than zero.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(0, 0, 100, 100);\n     * // Check if bounds are positive\n     * console.log(bounds.isPositive); // true\n     *\n     * // Negative bounds\n     * bounds.maxX = bounds.minX;\n     * console.log(bounds.isPositive); // false, width is 0\n     * ```\n     * @readonly\n     * @see {@link Bounds#isEmpty} For checking empty state\n     * @see {@link Bounds#isValid} For checking validity\n     */\n    get isPositive(): boolean\n    {\n        return (this.maxX - this.minX > 0) && (this.maxY - this.minY > 0);\n    }\n\n    /**\n     * Whether the bounds has valid coordinates.\n     * Checks if the bounds has been initialized with real values.\n     * @example\n     * ```ts\n     * const bounds = new Bounds();\n     * console.log(bounds.isValid); // false, default state\n     *\n     * // Set valid bounds\n     * bounds.addFrame(0, 0, 100, 100);\n     * console.log(bounds.isValid); // true\n     * ```\n     * @readonly\n     * @see {@link Bounds#isEmpty} For checking empty state\n     * @see {@link Bounds#isPositive} For checking dimensions\n     */\n    get isValid(): boolean\n    {\n        return (this.minX + this.minY !== Infinity);\n    }\n\n    /**\n     * Adds vertices from a Float32Array to the bounds, optionally transformed by a matrix.\n     * Used for efficiently updating bounds from raw vertex data.\n     * @example\n     * ```ts\n     * const bounds = new Bounds();\n     *\n     * // Add vertices from geometry\n     * const vertices = new Float32Array([\n     *     0, 0,    // Vertex 1\n     *     100, 0,  // Vertex 2\n     *     100, 100 // Vertex 3\n     * ]);\n     * bounds.addVertexData(vertices, 0, 6);\n     *\n     * // Add transformed vertices\n     * const matrix = new Matrix()\n     *     .translate(50, 50)\n     *     .rotate(Math.PI / 4);\n     * bounds.addVertexData(vertices, 0, 6, matrix);\n     *\n     * // Add subset of vertices\n     * bounds.addVertexData(vertices, 2, 4); // Only second vertex\n     * ```\n     * @param vertexData - The array of vertices to add\n     * @param beginOffset - Starting index in the vertex array\n     * @param endOffset - Ending index in the vertex array (excluded)\n     * @param matrix - Optional transformation matrix\n     * @see {@link Bounds#addFrame} For adding rectangular frames\n     * @see {@link Matrix} For transformation details\n     */\n    public addVertexData(vertexData: Float32Array, beginOffset: number, endOffset: number, matrix?: Matrix): void\n    {\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        matrix ||= this.matrix;\n\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        for (let i = beginOffset; i < endOffset; i += 2)\n        {\n            const localX = vertexData[i];\n            const localY = vertexData[i + 1];\n\n            const x = (a * localX) + (c * localY) + tx;\n            const y = (b * localX) + (d * localY) + ty;\n\n            minX = x < minX ? x : minX;\n            minY = y < minY ? y : minY;\n            maxX = x > maxX ? x : maxX;\n            maxY = y > maxY ? y : maxY;\n        }\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Checks if a point is contained within the bounds.\n     * Returns true if the point's coordinates fall within the bounds' area.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(0, 0, 100, 100);\n     * // Basic point check\n     * console.log(bounds.containsPoint(50, 50)); // true\n     * console.log(bounds.containsPoint(150, 150)); // false\n     *\n     * // Check edges\n     * console.log(bounds.containsPoint(0, 0));   // true, includes edges\n     * console.log(bounds.containsPoint(100, 100)); // true, includes edges\n     * ```\n     * @param x - x coordinate to check\n     * @param y - y coordinate to check\n     * @returns True if the point is inside the bounds\n     * @see {@link Bounds#isPositive} For valid bounds check\n     * @see {@link Bounds#rectangle} For Rectangle representation\n     */\n    public containsPoint(x: number, y: number): boolean\n    {\n        if (this.minX <= x && this.minY <= y && this.maxX >= x && this.maxY >= y)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns a string representation of the bounds.\n     * Useful for debugging and logging bounds information.\n     * @example\n     * ```ts\n     * const bounds = new Bounds(0, 0, 100, 100);\n     * console.log(bounds.toString()); // \"[pixi.js:Bounds minX=0 minY=0 maxX=100 maxY=100 width=100 height=100]\"\n     * ```\n     * @returns A string describing the bounds\n     * @see {@link Bounds#copyFrom} For copying bounds\n     * @see {@link Bounds#clone} For creating a new instance\n     */\n    public toString(): string\n    {\n        // eslint-disable-next-line max-len\n        return `[pixi.js:Bounds minX=${this.minX} minY=${this.minY} maxX=${this.maxX} maxY=${this.maxY} width=${this.width} height=${this.height}]`;\n    }\n\n    /**\n     * Copies the bounds from another bounds object.\n     * Useful for reusing bounds objects and avoiding allocations.\n     * @example\n     * ```ts\n     * const sourceBounds = new Bounds(0, 0, 100, 100);\n     * // Copy bounds\n     * const targetBounds = new Bounds();\n     * targetBounds.copyFrom(sourceBounds);\n     * ```\n     * @param bounds - The bounds to copy from\n     * @returns This bounds object for chaining\n     * @see {@link Bounds#clone} For creating new instances\n     */\n    public copyFrom(bounds: Bounds): this\n    {\n        this.minX = bounds.minX;\n        this.minY = bounds.minY;\n        this.maxX = bounds.maxX;\n        this.maxY = bounds.maxY;\n\n        return this;\n    }\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 824, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/container-mixins/cacheAsTextureMixin.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/container-mixins/cacheAsTextureMixin.ts"],"sourcesContent":["import { deprecation } from '../../../utils/logging/deprecation';\n\nimport type { Container } from '../Container';\nimport type { CacheAsTextureOptions } from '../RenderGroup';\n\n/** @ignore */\nexport interface CacheAsTextureMixinConstructor\n{\n    cacheAsTexture?: (val: boolean | CacheAsTextureOptions) => void;\n}\n\n/**\n * The CacheAsTextureMixin interface provides methods and properties for caching a container as a texture.\n * This can improve rendering performance for complex static containers by allowing them to be rendered as a single texture.\n * It includes methods to enable or disable caching, update the cached texture, and check\n * 1if the container is currently cached.\n * @category scene\n * @advanced\n */\nexport interface CacheAsTextureMixin extends Required<CacheAsTextureMixinConstructor>\n{\n    /**\n     * Caches this container as a texture. This allows the container to be rendered as a single texture,\n     * which can improve performance for complex static containers.\n     * @example\n     * ```ts\n     * // Basic caching\n     * container.cacheAsTexture(true);\n     *\n     * // With custom options\n     * container.cacheAsTexture({\n     *     resolution: 2,\n     *     antialias: true,\n     * });\n     *\n     * // Disable caching\n     * container.cacheAsTexture(false);\n     *\n     * // Cache a complex UI\n     * const ui = new Container();\n     * // Add multiple children...\n     * ui.cacheAsTexture(true);\n     * ui.updateCacheTexture(); // Update if contents change\n     * ```\n     * @param val - If true, enables caching with default options.\n     *             If false, disables caching.\n     *             Can also pass options object to configure caching behavior.\n     * @see {@link Container#updateCacheTexture} For updating cached content\n     * @see {@link Container#isCachedAsTexture} For checking cache state\n     */\n    cacheAsTexture: (val: boolean | CacheAsTextureOptions) => void;\n\n    /**\n     * Updates the cached texture of this container. This will flag the container's cached texture\n     * to be redrawn on the next render.\n     * @example\n     * ```ts\n     * // Basic update after changes\n     * container.updateCacheTexture();\n     * ```\n     */\n    updateCacheTexture: () => void;\n\n    /**\n     * Legacy property for backwards compatibility with PixiJS v7 and below.\n     * Use `cacheAsTexture` instead.\n     * @deprecated since 8.0.0\n     */\n    cacheAsBitmap: boolean;\n\n    /**\n     * Whether this container is currently cached as a texture.\n     * @example\n     * ```ts\n     * // Check cache state\n     * if (container.isCachedAsTexture) {\n     *     console.log('Container is cached');\n     * }\n     * ```\n     * @readonly\n     * @see {@link Container#cacheAsTexture} For enabling caching\n     * @see {@link Container#updateCacheTexture} For updating cache\n     */\n    readonly isCachedAsTexture: boolean;\n}\n\n/** @internal */\nexport const cacheAsTextureMixin: Partial<Container> = {\n    get isCachedAsTexture(): boolean\n    {\n        return !!this.renderGroup?.isCachedAsTexture;\n    },\n\n    cacheAsTexture(val: boolean | CacheAsTextureOptions): void\n    {\n        if (typeof val === 'boolean' && val === false)\n        {\n            this.disableRenderGroup();\n        }\n        else\n        {\n            this.enableRenderGroup();\n            this.renderGroup.enableCacheAsTexture(val === true ? {} : val);\n        }\n    },\n\n    updateCacheTexture(): void\n    {\n        this.renderGroup?.updateCacheTexture();\n    },\n\n    get cacheAsBitmap(): boolean\n    {\n        return this.isCachedAsTexture;\n    },\n\n    set cacheAsBitmap(val: boolean)\n    {\n        // #if _DEBUG\n        deprecation('v8.6.0', 'cacheAsBitmap is deprecated, use cacheAsTexture instead.');\n        // #endif\n        this.cacheAsTexture(val);\n    },\n} as Container;\n"],"names":[],"mappings":";;;;;;;AAuFO,MAAM,mBAA0C,GAAA;IACnD,IAAI,iBACJ,IAAA;QACW,OAAA,CAAC,CAAC,IAAA,CAAK,WAAa,EAAA,iBAAA,CAAA;IAAA,CAC/B;IAEA,gBAAe,IACf,EAAA;QACI,IAAI,OAAO,GAAA,MAAQ,SAAa,IAAA,GAAA,MAAQ,KACxC,EAAA;YACI,IAAA,CAAK,kBAAmB,EAAA,CAAA;QAAA,CAG5B,MAAA;YACI,IAAA,CAAK,iBAAkB,EAAA,CAAA;YACvB,IAAA,CAAK,WAAA,CAAY,oBAAqB,CAAA,GAAA,MAAQ,IAAO,GAAA,CAAA,IAAK,GAAG,CAAA,CAAA;QAAA,CACjE;IAAA,CACJ;IAEA,kBACA,GAAA;QACI,IAAA,CAAK,WAAA,EAAa,kBAAmB,EAAA,CAAA;IAAA,CACzC;IAEA,IAAI,aACJ,IAAA;QACI,OAAO,IAAK,CAAA,iBAAA,CAAA;IAAA,CAChB;IAEA,IAAI,eAAc,GAClB,CAAA;YAEI,4OAAA,EAAY,UAAU,0DAA0D,CAAA,CAAA;QAEhF,IAAA,CAAK,cAAA,CAAe,GAAG,CAAA,CAAA;IAAA,CAC3B;AACJ","debugId":null}},
    {"offset": {"line": 860, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/container-mixins/childrenHelperMixin.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/container-mixins/childrenHelperMixin.ts"],"sourcesContent":["import { removeItems } from '../../../utils/data/removeItems';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\n\nimport type { IRenderLayer } from '../../layers/RenderLayer';\nimport type { Container, ContainerChild } from '../Container';\n\n/**\n * Mixin interface for containers that allows them to manage children.\n * It provides methods for adding, removing, and manipulating child containers.\n * @category scene\n * @advanced\n */\nexport interface ChildrenHelperMixin<C = ContainerChild>\n{\n    /** @internal */\n    allowChildren: boolean;\n    addChild<U extends(C | IRenderLayer)[]>(...children: U): U[0];\n    removeChild<U extends(C | IRenderLayer)[]>(...children: U): U[0];\n    /**\n     * Removes all children from this container that are within the begin and end indexes.\n     * @example\n     * ```ts\n     * // Remove all children\n     * container.removeChildren();\n     *\n     * // Remove first 3 children\n     * const removed = container.removeChildren(0, 3);\n     * console.log('Removed:', removed.length); // 3\n     *\n     * // Remove children from index 2 onwards\n     * container.removeChildren(2);\n     *\n     * // Remove specific range\n     * const middle = container.removeChildren(1, 4);\n     * ```\n     * @param {number} beginIndex - The beginning position\n     * @param {number} endIndex - The ending position. Default is container size\n     * @returns List of removed children\n     * @throws {RangeError} If begin/end indexes are invalid\n     * @see {@link Container#addChild} For adding children\n     * @see {@link Container#removeChild} For removing specific children\n     */\n    removeChildren(beginIndex?: number, endIndex?: number): C[];\n    /**\n     * Removes a child from the specified index position.\n     * @example\n     * ```ts\n     * // Remove first child\n     * const removed = container.removeChildAt(0);\n     *\n     * // type safe access\n     * const sprite = container.removeChildAt<Sprite>(1);\n     *\n     * // With error handling\n     * try {\n     *     const child = container.removeChildAt(10);\n     * } catch (e) {\n     *     console.warn('Index out of bounds');\n     * }\n     * ```\n     * @param {number} index - The index to remove the child from\n     * @returns The child that was removed\n     * @throws {Error} If index is out of bounds\n     * @see {@link Container#removeChild} For removing specific children\n     * @see {@link Container#removeChildren} For removing multiple children\n     */\n    removeChildAt<U extends(C | IRenderLayer)>(index: number): U;\n    /**\n     * Returns the child at the specified index.\n     * @example\n     * ```ts\n     * // Get first child\n     * const first = container.getChildAt(0);\n     *\n     * // Type-safe access\n     * const sprite = container.getChildAt<Sprite>(1);\n     *\n     * // With error handling\n     * try {\n     *     const child = container.getChildAt(10);\n     * } catch (e) {\n     *     console.warn('Index out of bounds');\n     * }\n     * ```\n     * @param {number} index - The index to get the child from\n     * @returns The child at the given index\n     * @throws {Error} If index is out of bounds\n     * @see {@link Container#children} For direct array access\n     * @see {@link Container#getChildByLabel} For name-based lookup\n     */\n    getChildAt<U extends(C | IRenderLayer)>(index: number): U;\n    /**\n     * Changes the position of an existing child in the container.\n     * @example\n     * ```ts\n     * // Basic index change\n     * container.setChildIndex(sprite, 0); // Move to front\n     * container.setChildIndex(sprite, container.children.length - 1); // Move to back\n     *\n     * // With error handling\n     * try {\n     *     container.setChildIndex(sprite, 5);\n     * } catch (e) {\n     *     console.warn('Invalid index or child not found');\n     * }\n     * ```\n     * @param {Container}child - The child Container instance to reposition\n     * @param {number}index - The resulting index number for the child\n     * @throws {Error} If index is out of bounds\n     * @throws {Error} If child is not in container\n     * @see {@link Container#getChildIndex} For getting current index\n     * @see {@link Container#swapChildren} For swapping positions\n     */\n    setChildIndex(child: C | IRenderLayer, index: number): void;\n    /**\n     * Returns the index position of a child Container instance.\n     * @example\n     * ```ts\n     * // Basic index lookup\n     * const index = container.getChildIndex(sprite);\n     * console.log(`Sprite is at index ${index}`);\n     *\n     * // With error handling\n     * try {\n     *     const index = container.getChildIndex(sprite);\n     * } catch (e) {\n     *     console.warn('Child not found in container');\n     * }\n     * ```\n     * @param {Container} child - The Container instance to identify\n     * @returns The index position of the child container\n     * @throws {Error} If child is not in this container\n     * @see {@link Container#setChildIndex} For changing index\n     * @see {@link Container#children} For direct array access\n     */\n    getChildIndex(child: C | IRenderLayer): number;\n    /**\n     * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown.\n     * If the child is already in this container, it will be moved to the specified index.\n     * @example\n     * ```ts\n     * // Add at specific index\n     * container.addChildAt(sprite, 0); // Add to front\n     *\n     * // Move existing child\n     * const index = container.children.length - 1;\n     * container.addChildAt(existingChild, index); // Move to back\n     *\n     * // With error handling\n     * try {\n     *     container.addChildAt(sprite, 1000);\n     * } catch (e) {\n     *     console.warn('Index out of bounds');\n     * }\n     * ```\n     * @param {Container} child - The child to add\n     * @param {number} index - The index where the child will be placed\n     * @returns The child that was added\n     * @throws {Error} If index is out of bounds\n     * @see {@link Container#addChild} For adding to the end\n     * @see {@link Container#setChildIndex} For moving existing children\n     */\n    addChildAt<U extends(C | IRenderLayer)>(child: U, index: number): U;\n    /**\n     * Swaps the position of 2 Containers within this container.\n     * @example\n     * ```ts\n     * // Basic swap\n     * container.swapChildren(sprite1, sprite2);\n     *\n     * // With error handling\n     * try {\n     *     container.swapChildren(sprite1, sprite2);\n     * } catch (e) {\n     *     console.warn('One or both children not found in container');\n     * }\n     * ```\n     * @remarks\n     * - Updates render groups\n     * - No effect if same child\n     * - Triggers container changes\n     * - Common in z-ordering\n     * @param {Container} child - First container to swap\n     * @param {Container} child2 - Second container to swap\n     * @throws {Error} If either child is not in container\n     * @see {@link Container#setChildIndex} For direct index placement\n     * @see {@link Container#getChildIndex} For getting current positions\n     */\n    swapChildren<U extends(C | IRenderLayer)>(child: U, child2: U): void;\n    /**\n     * Remove the Container from its parent Container. If the Container has no parent, do nothing.\n     * @example\n     * ```ts\n     * // Basic removal\n     * sprite.removeFromParent();\n     *\n     * // With validation\n     * if (sprite.parent) {\n     *     sprite.removeFromParent();\n     * }\n     * ```\n     * @see {@link Container#addChild} For adding to a new parent\n     * @see {@link Container#removeChild} For parent removing children\n     */\n    removeFromParent(): void;\n    /**\n     * Reparent a child or multiple children to this container while preserving their world transform.\n     * This ensures that the visual position and rotation of the children remain the same even when changing parents.\n     * @example\n     * ```ts\n     * // Basic reparenting\n     * const sprite = new Sprite(texture);\n     * oldContainer.addChild(sprite);\n     * // Move to new parent, keeping visual position\n     * newContainer.reparentChild(sprite);\n     *\n     * // Reparent multiple children\n     * const batch = [sprite1, sprite2, sprite3];\n     * newContainer.reparentChild(...batch);\n     * ```\n     * @param {Container} child - The child or children to reparent\n     * @returns The first child that was reparented\n     * @see {@link Container#reparentChildAt} For index-specific reparenting\n     * @see {@link Container#addChild} For simple parenting\n     */\n    reparentChild<U extends C[]>(...child: U): U[0];\n    /**\n     * Reparent the child to this container at the specified index while preserving its world transform.\n     * This ensures that the visual position and rotation of the child remain the same even when changing parents.\n     * @example\n     * ```ts\n     * // Basic index-specific reparenting\n     * const sprite = new Sprite(texture);\n     * oldContainer.addChild(sprite);\n     * // Move to new parent at index 0 (front)\n     * newContainer.reparentChildAt(sprite, 0);\n     * ```\n     * @param {Container} child - The child to reparent\n     * @param {number} index - The index to reparent the child to\n     * @returns The reparented child\n     * @throws {Error} If index is out of bounds\n     * @see {@link Container#reparentChild} For appending reparented children\n     * @see {@link Container#addChildAt} For simple indexed parenting\n     */\n    reparentChildAt<U extends C>(child: U, index: number): U;\n    /**\n     * Replace a child in the container with a new child. Copying the local transform from the old child to the new one.\n     * @param {Container} oldChild - The child to replace.\n     * @param {Container} newChild - The new child to add.\n     */\n    replaceChild<U extends(C), T extends(C)>(oldChild: U, newChild: T): void;\n}\n\n/** @internal */\nexport const childrenHelperMixin: ChildrenHelperMixin<ContainerChild> = {\n\n    allowChildren: true,\n\n    removeChildren(beginIndex = 0, endIndex?: number): ContainerChild[]\n    {\n        const end = endIndex ?? this.children.length;\n        const range = end - beginIndex;\n        const removed: ContainerChild[] = [];\n\n        if (range > 0 && range <= end)\n        {\n            for (let i = end - 1; i >= beginIndex; i--)\n            {\n                const child = this.children[i];\n\n                if (!child) continue;\n                removed.push(child);\n                child.parent = null;\n            }\n\n            removeItems(this.children, beginIndex, end);\n\n            const renderGroup = this.renderGroup || this.parentRenderGroup;\n\n            if (renderGroup)\n            {\n                renderGroup.removeChildren(removed);\n            }\n\n            for (let i = 0; i < removed.length; ++i)\n            {\n                const child = removed[i];\n\n                child.parentRenderLayer?.detach(child);\n\n                this.emit('childRemoved', child, this, i);\n                removed[i].emit('removed', this);\n            }\n\n            if (removed.length > 0)\n            {\n                this._didViewChangeTick++;\n            }\n\n            return removed;\n        }\n        else if (range === 0 && this.children.length === 0)\n        {\n            return removed;\n        }\n\n        throw new RangeError('removeChildren: numeric values are outside the acceptable range.');\n    },\n\n    removeChildAt<U extends(ContainerChild | IRenderLayer)>(index: number): U\n    {\n        const child = this.getChildAt<U>(index);\n\n        return this.removeChild(child);\n    },\n\n    getChildAt<U extends(ContainerChild | IRenderLayer)>(index: number): U\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`getChildAt: Index (${index}) does not exist.`);\n        }\n\n        return this.children[index] as U;\n    },\n\n    setChildIndex(child: ContainerChild | IRenderLayer, index: number): void\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`The index ${index} supplied is out of bounds ${this.children.length}`);\n        }\n\n        this.getChildIndex(child); // check if child exists\n        this.addChildAt(child, index);\n    },\n\n    getChildIndex(child: ContainerChild | IRenderLayer): number\n    {\n        const index = this.children.indexOf(child as ContainerChild);\n\n        if (index === -1)\n        {\n            throw new Error('The supplied Container must be a child of the caller');\n        }\n\n        return index;\n    },\n\n    addChildAt<U extends(ContainerChild | IRenderLayer)>(child: U, index: number): U\n    {\n        // #if _DEBUG\n        if (!this.allowChildren)\n        {\n            deprecation(v8_0_0, 'addChildAt: Only Containers will be allowed to add children in v8.0.0');\n        }\n        // #endif\n\n        const { children } = this;\n\n        if (index < 0 || index > children.length)\n        {\n            throw new Error(`${child}addChildAt: The index ${index} supplied is out of bounds ${children.length}`);\n        }\n\n        // TODO - check if child is already in the list?\n        // we should be able to optimise this!\n\n        if (child.parent)\n        {\n            const currentIndex = child.parent.children.indexOf(child as ContainerChild);\n\n            // If this child is in the container and in the same position, do nothing\n            if (child.parent === this && currentIndex === index)\n            {\n                return child;\n            }\n\n            if (currentIndex !== -1)\n            {\n                child.parent.children.splice(currentIndex, 1);\n            }\n        }\n\n        if (index === children.length)\n        {\n            children.push(child as ContainerChild);\n        }\n        else\n        {\n            children.splice(index, 0, child as ContainerChild);\n        }\n\n        child.parent = this;\n        child.didChange = true;\n        child._updateFlags = 0b1111;\n\n        const renderGroup = this.renderGroup || this.parentRenderGroup;\n\n        if (renderGroup)\n        {\n            renderGroup.addChild(child as ContainerChild);\n        }\n\n        if (this.sortableChildren) this.sortDirty = true;\n\n        this.emit('childAdded', child as ContainerChild, this, index);\n        child.emit('added', this);\n\n        return child;\n    },\n\n    swapChildren<U extends(ContainerChild | IRenderLayer)>(child: U, child2: U): void\n    {\n        if (child === child2)\n        {\n            return;\n        }\n\n        const index1 = this.getChildIndex(child);\n        const index2 = this.getChildIndex(child2);\n\n        this.children[index1] = child2 as ContainerChild;\n        this.children[index2] = child as ContainerChild;\n\n        const renderGroup = this.renderGroup || this.parentRenderGroup;\n\n        if (renderGroup)\n        {\n            renderGroup.structureDidChange = true;\n        }\n\n        this._didContainerChangeTick++;\n    },\n\n    removeFromParent()\n    {\n        this.parent?.removeChild(this);\n    },\n\n    reparentChild<U extends ContainerChild[]>(...child: U): U[0]\n    {\n        if (child.length === 1)\n        {\n            return this.reparentChildAt(child[0], this.children.length);\n        }\n\n        child.forEach((c) => this.reparentChildAt(c, this.children.length));\n\n        return child[0];\n    },\n\n    reparentChildAt<U extends ContainerChild>(child: U, index: number): U\n    {\n        if (child.parent === this)\n        {\n            this.setChildIndex(child, index);\n\n            return child;\n        }\n\n        const childMat = child.worldTransform.clone();\n\n        child.removeFromParent();\n        this.addChildAt(child, index);\n\n        const newMatrix = this.worldTransform.clone();\n\n        newMatrix.invert();\n        childMat.prepend(newMatrix);\n\n        child.setFromMatrix(childMat);\n\n        return child;\n    },\n\n    replaceChild<U extends(ContainerChild), T extends(ContainerChild)>(oldChild: U, newChild: T)\n    {\n        oldChild.updateLocalTransform();\n        this.addChildAt(newChild, this.getChildIndex(oldChild));\n\n        newChild.setFromMatrix(oldChild.localTransform);\n        newChild.updateLocalTransform();\n        this.removeChild(oldChild);\n    },\n} as Container;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1012, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/container-mixins/collectRenderablesMixin.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/container-mixins/collectRenderablesMixin.ts"],"sourcesContent":["import { type InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport { type InstructionPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport { type Renderer, type RenderPipes } from '../../../rendering/renderers/types';\nimport { type IRenderLayer } from '../../layers/RenderLayer';\n\nimport type { Container } from '../Container';\n\n/**\n * The CollectRenderablesMixin interface defines methods for collecting renderable objects\n * from a container and its children. These methods add the renderables to an instruction set,\n * which is used by the renderer to process and display the scene.\n * @category scene\n * @internal\n */\nexport interface CollectRenderablesMixin\n{\n    /**\n     * Collects all renderables from the container and its children, adding them to the instruction set.\n     * This method decides whether to use a simple or advanced collection method based on the container's properties.\n     * @param {InstructionSet} instructionSet - The set of instructions to which the renderables will be added.\n     * @param {Renderer} renderer - The renderer responsible for rendering the scene.\n     * @param {IRenderLayer} currentLayer - The current render layer being processed.\n     * @internal\n     */\n    collectRenderables(instructionSet: InstructionSet, renderer: Renderer, currentLayer: IRenderLayer): void;\n\n    /**\n     * Collects renderables using a simple method, suitable for containers marked as simple.\n     * This method iterates over the container's children and adds their renderables to the instruction set.\n     * @param {InstructionSet} instructionSet - The set of instructions to which the renderables will be added.\n     * @param {Renderer} renderer - The renderer responsible for rendering the scene.\n     * @param {IRenderLayer} currentLayer - The current render layer being processed.\n     * @internal\n     */\n    collectRenderablesSimple(instructionSet: InstructionSet, renderer: Renderer, currentLayer: IRenderLayer): void;\n\n    /**\n     * Collects renderables using an advanced method, suitable for containers with complex processing needs.\n     * This method handles additional effects and transformations that may be applied to the renderables.\n     * @param {InstructionSet} instructionSet - The set of instructions to which the renderables will be added.\n     * @param {Renderer} renderer - The renderer responsible for rendering the scene.\n     * @param {IRenderLayer} currentLayer - The current render layer being processed.\n     * @internal\n     */\n    collectRenderablesWithEffects(\n        instructionSet: InstructionSet,\n        renderer: Renderer,\n        currentLayer: IRenderLayer,\n    ): void;\n}\n\n/**\n * The collectRenderablesMixin provides implementations for the methods defined in the CollectRenderablesMixin interface.\n * It includes logic to determine the appropriate method for collecting renderables based on the container's properties.\n * @internal\n */\nexport const collectRenderablesMixin: Partial<Container> = {\n    collectRenderables(instructionSet: InstructionSet, renderer: Renderer, currentLayer: IRenderLayer): void\n    {\n        // Skip processing if the container is not in the current render layer or is not fully visible.\n        if ((this.parentRenderLayer && this.parentRenderLayer !== currentLayer)\n            || this.globalDisplayStatus < 0b111 || !this.includeInBuild) return;\n\n        // Sort children if the container has sortable children.\n        if (this.sortableChildren)\n        {\n            this.sortChildren();\n        }\n\n        // Choose the appropriate method for collecting renderables based on the container's properties.\n        if (this.isSimple)\n        {\n            this.collectRenderablesSimple(instructionSet, renderer, currentLayer);\n        }\n        else if (this.renderGroup)\n        {\n            renderer.renderPipes.renderGroup.addRenderGroup(this.renderGroup, instructionSet);\n        }\n        else\n        {\n            this.collectRenderablesWithEffects(instructionSet, renderer, currentLayer);\n        }\n    },\n    collectRenderablesSimple(\n        instructionSet: InstructionSet,\n        renderer: Renderer,\n        currentLayer: IRenderLayer,\n    ): void\n    {\n        const children = this.children;\n        const length = children.length;\n\n        // Iterate over each child and collect their renderables.\n        for (let i = 0; i < length; i++)\n        {\n            children[i].collectRenderables(instructionSet, renderer, currentLayer);\n        }\n    },\n    collectRenderablesWithEffects(\n        instructionSet: InstructionSet,\n        renderer: Renderer,\n        currentLayer: IRenderLayer,\n    ): void\n    {\n        const { renderPipes } = renderer;\n\n        // Apply each effect to the renderables before collecting them.\n        for (let i = 0; i < this.effects.length; i++)\n        {\n            const effect = this.effects[i];\n            const pipe = renderPipes[effect.pipe as keyof RenderPipes] as InstructionPipe<any>;\n\n            pipe.push(effect, this, instructionSet);\n        }\n\n        // Collect renderables using the simple method after applying effects.\n        this.collectRenderablesSimple(instructionSet, renderer, currentLayer);\n\n        // Remove effects from the renderables after collection, processing in reverse order.\n        for (let i = this.effects.length - 1; i >= 0; i--)\n        {\n            const effect = this.effects[i];\n            const pipe = renderPipes[effect.pipe as keyof RenderPipes] as InstructionPipe<any>;\n\n            pipe.pop(effect, this, instructionSet);\n        }\n    }\n} as Container;\n"],"names":[],"mappings":";;;;;AAwDO,MAAM,uBAA8C,GAAA;IACvD,kBAAA,EAAmB,cAAgC,EAAA,QAAA,EAAoB,YACvE,EAAA;QAES,IAAA,IAAA,CAAK,iBAAA,IAAqB,IAAK,CAAA,iBAAA,KAAsB,gBACnD,IAAK,CAAA,mBAAA,GAAsB,CAAS,IAAA,CAAC,IAAK,CAAA,cAAA,EAAgB,OAAA;QAGjE,IAAI,IAAA,CAAK,gBACT,EAAA;YACI,IAAA,CAAK,YAAa,EAAA,CAAA;QAAA,CACtB;QAGA,IAAI,IAAA,CAAK,QACT,EAAA;YACS,IAAA,CAAA,wBAAA,CAAyB,cAAgB,EAAA,QAAA,EAAU,YAAY,CAAA,CAAA;QAAA,CACxE,MAAA,IACS,IAAA,CAAK,WACd,EAAA;YACI,QAAA,CAAS,WAAY,CAAA,WAAA,CAAY,cAAe,CAAA,IAAA,CAAK,WAAA,EAAa,cAAc,CAAA,CAAA;QAAA,CAGpF,MAAA;YACS,IAAA,CAAA,6BAAA,CAA8B,cAAgB,EAAA,QAAA,EAAU,YAAY,CAAA,CAAA;QAAA,CAC7E;IAAA,CACJ;IACA,wBAAA,EACI,cACA,EAAA,QAAA,EACA,YAEJ,EAAA;QACI,MAAM,WAAW,IAAK,CAAA,QAAA,CAAA;QACtB,MAAM,SAAS,QAAS,CAAA,MAAA,CAAA;QAGxB,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,MAAA,EAAQ,CAC5B,EAAA,CAAA;YACI,QAAA,CAAS,CAAC,CAAA,CAAE,kBAAmB,CAAA,cAAA,EAAgB,UAAU,YAAY,CAAA,CAAA;QAAA,CACzE;IAAA,CACJ;IACA,6BAAA,EACI,cACA,EAAA,QAAA,EACA,YAEJ,EAAA;QACU,MAAA,EAAE,WAAA,EAAgB,GAAA,QAAA,CAAA;QAGxB,IAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,OAAA,CAAQ,MAAA,EAAQ,CACzC,EAAA,CAAA;YACU,MAAA,MAAA,GAAS,IAAK,CAAA,OAAA,CAAQ,CAAC,CAAA,CAAA;YACvB,MAAA,IAAA,GAAO,WAAY,CAAA,MAAA,CAAO,IAAyB,CAAA,CAAA;YAEpD,IAAA,CAAA,IAAA,CAAK,MAAQ,EAAA,IAAA,EAAM,cAAc,CAAA,CAAA;QAAA,CAC1C;QAGK,IAAA,CAAA,wBAAA,CAAyB,cAAgB,EAAA,QAAA,EAAU,YAAY,CAAA,CAAA;QAGpE,IAAA,IAAS,IAAI,IAAK,CAAA,OAAA,CAAQ,MAAA,GAAS,CAAG,EAAA,CAAA,IAAK,GAAG,CAC9C,EAAA,CAAA;YACU,MAAA,MAAA,GAAS,IAAK,CAAA,OAAA,CAAQ,CAAC,CAAA,CAAA;YACvB,MAAA,IAAA,GAAO,WAAY,CAAA,MAAA,CAAO,IAAyB,CAAA,CAAA;YAEpD,IAAA,CAAA,GAAA,CAAI,MAAQ,EAAA,IAAA,EAAM,cAAc,CAAA,CAAA;QAAA,CACzC;IAAA,CACJ;AACJ","debugId":null}},
    {"offset": {"line": 1059, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/container-mixins/effectsMixin.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/container-mixins/effectsMixin.ts"],"sourcesContent":["import { FilterEffect } from '../../../filters/FilterEffect';\nimport { MaskEffectManager } from '../../../rendering/mask/MaskEffectManager';\n\nimport type { Filter } from '../../../filters/Filter';\nimport type { Rectangle } from '../../../maths/shapes/Rectangle';\nimport type { MaskEffect } from '../../../rendering/mask/MaskEffectManager';\nimport type { Container } from '../Container';\nimport type { Effect } from '../Effect';\n\n/** @ignore */\nexport interface EffectsMixinConstructor\n{\n    /**\n     * The mask to apply, which can be a Container or null.\n     *\n     * If null, it clears the existing mask.\n     * @example\n     * ```ts\n     * // Set a mask\n     * sprite.setMask({\n     *     mask: graphics,\n     *     inverse: false,\n     * });\n     */\n    mask?: Mask;\n    setMask?: (options: Partial<MaskOptionsAndMask>) => void;\n    /**\n     * Sets the filters for the displayObject.\n     * Filters are visual effects that can be applied to any display object and its children.\n     *\n     * > [!IMPORTANT] This is a WebGL/WebGPU only feature and will be ignored by the canvas renderer.\n     * @example\n     * ```ts\n     * new Container({\n     *     filters: [new BlurFilter(2), new ColorMatrixFilter()],\n     * });\n     * ```\n     * @see {@link Filter} For filter base class\n     */\n    filters?: Filter | readonly Filter[];\n}\n\n/**\n * The Mask type represents different ways to mask a display object.\n * - A number represents a mask ID.\n * - A Container represents a mask object, such as a Graphics or Sprite.\n * - null indicates that no mask is applied.\n * @example\n * ```ts\n * // Using a Container as a mask\n * const maskContainer: Mask = new Graphics();\n * // Using a mask ID\n * const maskId: Mask = 123;\n * // No mask applied\n * const noMask: Mask = null;\n * ```\n * @category scene\n * @standard\n */\nexport type Mask = number | Container | null;\n\n/**\n * Options for configuring mask behavior on a display object.\n * @example\n * ```ts\n * // Basic mask inversion\n * sprite.setMask({\n *     mask: graphics,\n *     inverse: true\n * });\n * ```\n * @see {@link Container#setMask} For applying masks with options\n * @see {@link Container#mask} For basic masking\n * @category scene\n * @standard\n */\nexport interface MaskOptions\n{\n    /**\n     * Whether the mask should be inverted.\n     * When true, the masked area becomes transparent and the unmasked area becomes visible.\n     * @default false\n     * @example\n     * ```ts\n     * // Invert the mask\n     * sprite.setMask({\n     *     mask: graphics,\n     *     inverse: true\n     * });\n     * ```\n     */\n    inverse: boolean;\n}\n\n/**\n * MaskOptionsAndMask combines MaskOptions with a Mask for configuring masking behavior.\n * Used when setting up complex masking effects with additional options.\n * @example\n * ```ts\n * sprite.setMask({\n *     mask: graphics,\n *     inverse: true,\n * });\n *\n * // Clear existing mask\n * sprite.setMask({\n *     mask: null,\n *     inverse: false,\n * });\n * ```\n * @category scene\n * @standard\n * @see {@link Container#setMask} For applying masks\n * @see {@link MaskOptions} For base options\n */\nexport interface MaskOptionsAndMask extends MaskOptions\n{\n    /**\n     * The mask to apply, which can be a Container or null.\n     *\n     * If null, it clears the existing mask.\n     * @example\n     * ```ts\n     * // Set a mask\n     * sprite.setMask({\n     *     mask: graphics,\n     *     inverse: false,\n     * });\n     */\n    mask: Mask;\n}\n\n/**\n * The EffectsMixin interface provides methods and properties for managing effects\n * such as masks and filters on a display object.\n * It allows for adding, removing, and configuring effects, as well as setting a mask for the display object.\n * @category scene\n * @advanced\n */\nexport interface EffectsMixin extends Required<EffectsMixinConstructor>\n{\n    /** @private */\n    _maskEffect?: MaskEffect;\n    /** @private */\n    _maskOptions?: MaskOptions;\n    /** @private */\n    _filterEffect?: FilterEffect,\n    /** @private */\n    _markStructureAsChanged(): void;\n\n    /**\n     * The area the filter is applied to. This is used as an optimization to define a specific region\n     * for filter effects instead of calculating the display object bounds each frame.\n     *\n     * > [!NOTE]\n     * > Setting this to a custom Rectangle allows you to define a specific area for filter effects,\n     * > which can improve performance by avoiding expensive bounds calculations.\n     * @example\n     * ```ts\n     * // Set specific filter area\n     * container.filterArea = new Rectangle(0, 0, 100, 100);\n     *\n     * // Optimize filter region\n     * const screen = app.screen;\n     * container.filterArea = new Rectangle(\n     *     screen.x,\n     *     screen.y,\n     *     screen.width,\n     *     screen.height\n     * );\n     * ```\n     * @see {@link Container#filters} For applying filters\n     * @see {@link Rectangle} For area definition\n     */\n    filterArea?: Rectangle,\n    /**\n     * todo Needs docs\n     * @advanced\n     */\n    effects?: Effect[];\n    /**\n     * todo Needs docs.\n     * @param {Effect} effect - The effect to add.\n     * @ignore\n     */\n    addEffect(effect: Effect): void;\n    /**\n     * todo Needs docs.\n     * @param {Effect} effect - The effect to remove.\n     * @ignore\n     */\n    removeEffect(effect: Effect): void;\n    /**\n     * Used to set mask and control mask options on a display object.\n     * Allows for more detailed control over masking behavior compared to the mask property.\n     * @example\n     * ```ts\n     * import { Graphics, Sprite } from 'pixi.js';\n     *\n     * // Create a circular mask\n     * const graphics = new Graphics()\n     *     .beginFill(0xFF3300)\n     *     .drawCircle(100, 100, 50)\n     *     .endFill();\n     *\n     * // Apply mask with options\n     * sprite.setMask({\n     *     mask: graphics,\n     *     inverse: true, // Create a hole effect\n     * });\n     *\n     * // Clear existing mask\n     * sprite.setMask({ mask: null });\n     * ```\n     * @param {Partial<MaskOptionsAndMask>} options - Configuration options for the mask\n     * @see {@link Container#mask} For simple masking\n     * @see {@link MaskOptionsAndMask} For full options API\n     */\n    setMask(options: Partial<MaskOptionsAndMask>): void;\n    /**\n     * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n     * object to the shape of the mask applied to it.\n     *\n     * > [!IMPORTANT] In PixiJS a regular mask must be a {@link Graphics} or a {@link Sprite} object.\n     * > This allows for much faster masking in canvas as it utilities shape clipping.\n     * > Furthermore, a mask of an object must be in the subtree of its parent.\n     * > Otherwise, `getLocalBounds` may calculate incorrect bounds, which makes the container's width and height wrong.\n     *\n     * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n     * @example\n     * ```ts\n     * // Apply mask to sprite\n     * const sprite = new Sprite(texture);\n     * sprite.mask = graphics;\n     *\n     * // Remove mask\n     * sprite.mask = null;\n     * ```\n     * @see {@link Graphics} For creating mask shapes\n     * @see {@link Sprite} For texture-based masks\n     * @see {@link Container#setMask} For advanced mask options\n     */\n    mask: Mask;\n    /**\n     * Sets the filters for the displayObject.\n     * Filters are visual effects that can be applied to any display object and its children.\n     *\n     * > [!IMPORTANT] This is a WebGL/WebGPU only feature and will be ignored by the canvas renderer.\n     * @example\n     * ```ts\n     * // Add a single filter\n     * sprite.filters = new BlurFilter(2);\n     *\n     * // Apply multiple filters\n     * container.filters = [\n     *     new BlurFilter(2),\n     *     new ColorMatrixFilter(),\n     * ];\n     *\n     * // Remove filters\n     * sprite.filters = null;\n     * ```\n     * @see {@link Filter} For filter base class\n     */\n    set filters(value: Filter | Filter[] | null | undefined);\n    get filters(): readonly Filter[];\n}\n\n/** @internal */\nexport const effectsMixin: Partial<Container> = {\n    _maskEffect: null,\n    _maskOptions: {\n        inverse: false,\n    },\n    _filterEffect: null,\n\n    effects: [],\n\n    _markStructureAsChanged()\n    {\n        const renderGroup = this.renderGroup || this.parentRenderGroup;\n\n        if (renderGroup)\n        {\n            renderGroup.structureDidChange = true;\n        }\n    },\n\n    addEffect(effect: Effect)\n    {\n        const index = this.effects.indexOf(effect);\n\n        if (index !== -1) return; // already exists!\n\n        this.effects.push(effect);\n\n        this.effects.sort((a, b) => a.priority - b.priority);\n\n        this._markStructureAsChanged();\n\n        // if (this.renderGroup)\n        // {\n        //     this.renderGroup.structureDidChange = true;\n        // }\n\n        this._updateIsSimple();\n    },\n\n    removeEffect(effect: Effect)\n    {\n        const index = this.effects.indexOf(effect);\n\n        if (index === -1) return; // already exists!\n\n        this.effects.splice(index, 1);\n\n        this._markStructureAsChanged();\n\n        this._updateIsSimple();\n    },\n\n    set mask(value: Mask)\n    {\n        const effect = this._maskEffect;\n\n        if (effect?.mask === value) return;\n\n        if (effect)\n        {\n            this.removeEffect(effect);\n\n            MaskEffectManager.returnMaskEffect(effect);\n\n            this._maskEffect = null;\n        }\n\n        if (value === null || value === undefined) return;\n\n        this._maskEffect = MaskEffectManager.getMaskEffect(value);\n\n        this.addEffect(this._maskEffect);\n    },\n    get mask(): unknown\n    {\n        return this._maskEffect?.mask;\n    },\n\n    setMask(options: Partial<MaskOptionsAndMask>)\n    {\n        this._maskOptions = {\n            ...this._maskOptions,\n            ...options,\n        };\n\n        if (options.mask)\n        {\n            this.mask = options.mask;\n        }\n\n        this._markStructureAsChanged();\n    },\n\n    set filters(value: Filter | Filter[] | null | undefined)\n    {\n        if (!Array.isArray(value) && value) value = [value];\n\n        const effect = this._filterEffect ||= new FilterEffect();\n\n        // Ignore the Filter type\n        value = value as Filter[] | null | undefined;\n\n        const hasFilters = value?.length > 0;\n        const hadFilters = effect.filters?.length > 0;\n\n        const didChange = hasFilters !== hadFilters;\n\n        // Clone the filters array so we don't freeze the user-input\n        value = Array.isArray(value) ? value.slice(0) : value;\n\n        // Ensure filters are immutable via filters getter\n        effect.filters = Object.freeze(value);\n\n        if (didChange)\n        {\n            if (hasFilters)\n            {\n                this.addEffect(effect);\n            }\n            else\n            {\n                this.removeEffect(effect);\n\n                // sets the empty array...\n                effect.filters = value ?? null;\n            }\n        }\n    },\n    get filters(): readonly Filter[]\n    {\n        return this._filterEffect?.filters;\n    },\n\n    set filterArea(value: Rectangle)\n    {\n        this._filterEffect ||= new FilterEffect();\n\n        this._filterEffect.filterArea = value;\n    },\n    get filterArea(): Rectangle\n    {\n        return this._filterEffect?.filterArea;\n    },\n\n} as Container;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1158, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/container-mixins/findMixin.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/container-mixins/findMixin.ts"],"sourcesContent":["import { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\n\nimport type { Container } from '../Container';\n\n/** @ignore */\nexport interface FindMixinConstructor\n{\n    /**\n     * The instance label of the object.\n     * @default null\n     */\n    label?: string;\n}\n\n/**\n * The FindMixin interface provides methods for finding children within a container by their label.\n * It allows for searching for a single child or multiple children with a specific label,\n * either directly or recursively through the container's hierarchy.\n * @category scene\n * @advanced\n */\nexport interface FindMixin extends Required<FindMixinConstructor>\n{\n    /**\n     * The instance name of the object.\n     * @deprecated since 8.0.0\n     * @see Container#label\n     * @default null\n     */\n    name: string;\n    /**\n     * @deprecated since 8.0.0\n     * @param {string} label - Instance name.\n     * @param {boolean}[deep=false] - Whether to search recursively\n     * @returns {Container} The child with the specified name.\n     * @see Container#getChildByLabel\n     */\n    getChildByName(label: RegExp | string, deep?: boolean): Container | null;\n    /**\n     * Returns the first child in the container with the specified label.\n     * Recursive searches are done in a pre-order traversal.\n     * @example\n     * ```ts\n     * // Basic label search\n     * const child = container.getChildByLabel('player');\n     *\n     * // Search with regular expression\n     * const enemy = container.getChildByLabel(/enemy-\\d+/);\n     *\n     * // Deep search through children\n     * const deepChild = container.getChildByLabel('powerup', true);\n     * ```\n     * @param {RegExp|string} label - Instance label to search for\n     * @param {boolean} deep - Whether to search recursively through children\n     * @returns The first child with the specified label, or null if none found\n     * @see {@link Container#getChildrenByLabel} For finding all matches\n     * @see {@link Container#label} For setting labels\n     */\n    getChildByLabel(label: RegExp | string, deep?: boolean): Container | null;\n    /**\n     * Returns all children in the container with the specified label.\n     * Recursive searches are done in a pre-order traversal.\n     * @example\n     * ```ts\n     * // Basic label search\n     * const enemies = container.getChildrenByLabel('enemy');\n     * // Search with regular expression\n     * const powerups = container.getChildrenByLabel(/powerup-\\d+/);\n     * // Deep search with collection\n     * const buttons = [];\n     * container.getChildrenByLabel('button', true, buttons);\n     * ```\n     * @param {string|RegExp} label  - Instance label to search for\n     * @param {boolean}[deep=false] - Whether to search recursively through children\n     * @param {Container[]} [out=[]]  - Optional array to store matching children in\n     * @returns An array of children with the specified label\n     * @see {@link Container#getChildByLabel} For finding first match\n     * @see {@link Container#label} For setting labels\n     */\n    getChildrenByLabel(label: RegExp | string, deep?: boolean, out?: Container[]): Container[];\n}\n\n/** @internal */\nexport const findMixin: Partial<Container> = {\n    label: null,\n\n    get name(): string\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Container.name property has been removed, use Container.label instead');\n        // #endif\n\n        return this.label;\n    },\n    set name(value: string)\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'Container.name property has been removed, use Container.label instead');\n        // #endif\n\n        this.label = value;\n    },\n\n    getChildByName(name: string, deep = false): Container | null\n    {\n        return this.getChildByLabel(name, deep);\n    },\n\n    getChildByLabel(label: string | RegExp, deep = false): Container | null\n    {\n        const children = this.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            const child = children[i];\n\n            if (child.label === label || (label instanceof RegExp && label.test(child.label))) return child;\n        }\n\n        if (deep)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                const child = children[i];\n                const found = child.getChildByLabel(label, true);\n\n                if (found)\n                {\n                    return found;\n                }\n            }\n        }\n\n        return null;\n    },\n\n    getChildrenByLabel(label: string | RegExp, deep = false, out = []): Container[]\n    {\n        const children = this.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            const child = children[i];\n\n            if (child.label === label || (label instanceof RegExp && label.test(child.label)))\n            {\n                out.push(child);\n            }\n        }\n\n        if (deep)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                children[i].getChildrenByLabel(label, true, out);\n            }\n        }\n\n        return out;\n    },\n} as Container;\n"],"names":[],"mappings":";;;;;;;AAmFO,MAAM,SAAgC,GAAA;IACzC,KAAO,EAAA,IAAA;IAEP,IAAI,IACJ,IAAA;YAEI,4OAAA,EAAY,uOAAA,EAAQ,uEAAuE,CAAA,CAAA;QAG3F,OAAO,IAAK,CAAA,KAAA,CAAA;IAAA,CAChB;IACA,IAAI,MAAK,KACT,CAAA;YAEI,4OAAA,EAAY,uOAAA,EAAQ,uEAAuE,CAAA,CAAA;QAG3F,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;IAAA,CACjB;IAEA,cAAA,EAAe,IAAc,EAAA,IAAA,GAAO,KACpC,EAAA;QACW,OAAA,IAAA,CAAK,eAAgB,CAAA,IAAA,EAAM,IAAI,CAAA,CAAA;IAAA,CAC1C;IAEA,eAAA,EAAgB,KAAwB,EAAA,IAAA,GAAO,KAC/C,EAAA;QACI,MAAM,WAAW,IAAK,CAAA,QAAA,CAAA;QAEtB,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,QAAA,CAAS,MAAA,EAAQ,CACrC,EAAA,CAAA;YACU,MAAA,KAAA,GAAQ,QAAA,CAAS,CAAC,CAAA,CAAA;YAEpB,IAAA,KAAA,CAAM,KAAA,KAAU,KAAU,IAAA,KAAA,YAAiB,UAAU,KAAM,CAAA,IAAA,CAAK,MAAM,KAAK,CAAA,EAAW,OAAA,KAAA,CAAA;QAAA,CAC9F;QAEA,IAAI,IACJ,EAAA;YACI,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,QAAA,CAAS,MAAA,EAAQ,CACrC,EAAA,CAAA;gBACU,MAAA,KAAA,GAAQ,QAAA,CAAS,CAAC,CAAA,CAAA;gBACxB,MAAM,KAAQ,GAAA,KAAA,CAAM,eAAgB,CAAA,KAAA,EAAO,IAAI,CAAA,CAAA;gBAE/C,IAAI,KACJ,EAAA;oBACW,OAAA,KAAA,CAAA;gBAAA,CACX;YAAA,CACJ;QAAA,CACJ;QAEO,OAAA,IAAA,CAAA;IAAA,CACX;IAEA,oBAAmB,KAAwB,EAAA,IAAA,GAAO,KAAO,EAAA,GAAA,GAAM,EAC/D,EAAA;QACI,MAAM,WAAW,IAAK,CAAA,QAAA,CAAA;QAEtB,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,QAAA,CAAS,MAAA,EAAQ,CACrC,EAAA,CAAA;YACU,MAAA,KAAA,GAAQ,QAAA,CAAS,CAAC,CAAA,CAAA;YAEpB,IAAA,KAAA,CAAM,KAAA,KAAU,KAAU,IAAA,KAAA,YAAiB,UAAU,KAAM,CAAA,IAAA,CAAK,KAAM,CAAA,KAAK,CAC/E,EAAA;gBACI,GAAA,CAAI,IAAA,CAAK,KAAK,CAAA,CAAA;YAAA,CAClB;QAAA,CACJ;QAEA,IAAI,IACJ,EAAA;YACI,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,QAAA,CAAS,MAAA,EAAQ,CACrC,EAAA,CAAA;gBACI,QAAA,CAAS,CAAC,CAAA,CAAE,kBAAmB,CAAA,KAAA,EAAO,MAAM,GAAG,CAAA,CAAA;YAAA,CACnD;QAAA,CACJ;QAEO,OAAA,GAAA,CAAA;IAAA,CACX;AACJ","debugId":null}},
    {"offset": {"line": 1217, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/bounds/utils/matrixAndBoundsPool.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/bounds/utils/matrixAndBoundsPool.ts"],"sourcesContent":["import { Matrix } from '../../../../maths/matrix/Matrix';\nimport { BigPool } from '../../../../utils/pool/PoolGroup';\nimport { Bounds } from '../Bounds';\n\nimport type { PoolItem } from '../../../../utils/pool/Pool';\n\ntype MatrixPoolItem = Matrix & PoolItem;\ntype BoundsPoolItem = Bounds & PoolItem;\n/** @internal */\nexport const matrixPool = BigPool.getPool<MatrixPoolItem>(Matrix);\n/** @internal */\nexport const boundsPool = BigPool.getPool<BoundsPoolItem>(Bounds);\n"],"names":[],"mappings":";;;;;;;;;;;;;AASa,MAAA,UAAA,GAAa,mOAAQ,CAAA,OAAA,CAAwB,iOAAM,EAAA;AAEnD,MAAA,UAAA,GAAa,mOAAQ,CAAA,OAAA,CAAwB,8OAAM","debugId":null}},
    {"offset": {"line": 1238, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/container-mixins/getFastGlobalBoundsMixin.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/container-mixins/getFastGlobalBoundsMixin.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { type Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport { type IRenderLayer } from '../../layers/RenderLayer';\nimport { Bounds } from '../bounds/Bounds';\nimport { boundsPool } from '../bounds/utils/matrixAndBoundsPool';\n\nimport type { Container } from '../Container';\n\nconst tempMatrix = new Matrix();\n\n/**\n * Interface for the GetFastGlobalBoundsMixin, which provides methods to compute\n * an approximate global bounding box for a container and its children.\n * @category scene\n * @advanced\n */\nexport interface GetFastGlobalBoundsMixin\n{\n    /**\n     * Computes an approximate global bounding box for the container and its children.\n     * This method is optimized for speed by using axis-aligned bounding boxes (AABBs),\n     * and uses the last render results from when it updated the transforms. This function does not update them.\n     * which may result in slightly larger bounds but never smaller than the actual bounds.\n     *\n     * for accurate (but less performant) results use `container.getGlobalBounds`\n     * @param {boolean} [factorRenderLayers] - A flag indicating whether to consider render layers in the calculation.\n     * @param {Bounds} [bounds] - The output bounds object to store the result. If not provided, a new one is created.\n     * @returns {Bounds} The computed bounds.\n     * @advanced\n     */\n    getFastGlobalBounds(factorRenderLayers?: boolean, bounds?: Bounds): Bounds;\n\n    /**\n     * Recursively calculates the global bounds for the container and its children.\n     * This method is used internally by getFastGlobalBounds to traverse the scene graph.\n     * @param {boolean} factorRenderLayers - A flag indicating whether to consider render layers in the calculation.\n     * @param {Bounds} bounds - The bounds object to update with the calculated values.\n     * @param {IRenderLayer} currentLayer - The current render layer being processed.\n     * @internal\n     */\n    _getGlobalBoundsRecursive(\n        factorRenderLayers: boolean,\n        bounds: Bounds,\n        currentLayer: IRenderLayer,\n    ): void;\n}\n\n/**\n * Mixin providing the implementation of the GetFastGlobalBoundsMixin interface.\n * It includes methods to compute and recursively calculate global bounds for containers.\n * @internal\n */\nexport const getFastGlobalBoundsMixin: Partial<Container> = {\n    getFastGlobalBounds(factorRenderLayers?: boolean, bounds?: Bounds): Bounds\n    {\n        bounds ||= new Bounds();\n\n        // Initialize the bounds for fresh calculations.\n        bounds.clear();\n\n        // Calculate bounds recursively, starting from the current container.\n        this._getGlobalBoundsRecursive(!!factorRenderLayers, bounds, this.parentRenderLayer);\n\n        // Validate the calculated bounds, resetting if invalid.\n        if (!bounds.isValid)\n        {\n            bounds.set(0, 0, 0, 0);\n        }\n\n        // Apply the world transformation to the bounds.\n        const renderGroup = this.renderGroup || this.parentRenderGroup;\n\n        bounds.applyMatrix(renderGroup.worldTransform);\n\n        return bounds;\n    },\n\n    _getGlobalBoundsRecursive(\n        factorRenderLayers: boolean,\n        bounds: Bounds,\n        currentLayer: IRenderLayer,\n    )\n    {\n        let localBounds = bounds;\n\n        // Skip if the container is not in the current render layer when factoring render layers.\n        if (factorRenderLayers && this.parentRenderLayer && this.parentRenderLayer !== currentLayer) return;\n\n        // Skip if the container is not fully visible or not measurable.\n        if (this.localDisplayStatus !== 0b111 || (!this.measurable))\n        {\n            return;\n        }\n\n        // Determine if effects need to be managed, requiring separate bounds handling.\n        const manageEffects = !!this.effects.length;\n\n        // Use a temporary bounds object if the container is a render group or has effects.\n        if (this.renderGroup || manageEffects)\n        {\n            localBounds = boundsPool.get().clear();\n        }\n\n        // Add the container's own bounds area to the bounds if it exists.\n        if (this.boundsArea)\n        {\n            bounds.addRect(this.boundsArea, this.worldTransform);\n        }\n        else\n        {\n            // If the container is renderable, add its bounds to the local bounds.\n            if (this.renderPipeId)\n            {\n                const viewBounds = (this as Renderable).bounds;\n\n                localBounds.addFrame(\n                    viewBounds.minX,\n                    viewBounds.minY,\n                    viewBounds.maxX,\n                    viewBounds.maxY,\n                    this.groupTransform\n                );\n            }\n\n            // Recursively process each child to include their bounds.\n            const children = this.children;\n\n            for (let i = 0; i < children.length; i++)\n            {\n                children[i]._getGlobalBoundsRecursive(factorRenderLayers, localBounds, currentLayer);\n            }\n        }\n\n        // If effects are managed, apply them to the bounds.\n        if (manageEffects)\n        {\n            let advanced = false;\n            const renderGroup = this.renderGroup || this.parentRenderGroup;\n\n            // Apply each effect that modifies bounds.\n            for (let i = 0; i < this.effects.length; i++)\n            {\n                if (this.effects[i].addBounds)\n                {\n                    if (!advanced)\n                    {\n                        advanced = true;\n                        localBounds.applyMatrix(renderGroup.worldTransform);\n                    }\n                    this.effects[i].addBounds(localBounds, true);\n                }\n            }\n\n            // Adjust bounds back to the local coordinate space if advanced bounds were calculated.\n            if (advanced)\n            {\n                localBounds.applyMatrix(renderGroup.worldTransform.copyTo(tempMatrix).invert());\n            }\n\n            // Add the local bounds to the final bounds and return the temporary bounds object.\n            bounds.addBounds(localBounds);\n            boundsPool.return(localBounds);\n        }\n        else if (this.renderGroup)\n        {\n            // If the container is a render group, add its local bounds to the final bounds.\n            bounds.addBounds(localBounds, this.relativeGroupTransform);\n            boundsPool.return(localBounds);\n        }\n    }\n\n} as Container;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1313, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/bounds/getGlobalBounds.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/bounds/getGlobalBounds.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { boundsPool, matrixPool } from './utils/matrixAndBoundsPool';\n\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Container } from '../Container';\nimport type { Bounds } from './Bounds';\n\n/**\n * Gets the global bounds of a container, including all its children\n * @param target - The target container to get the bounds from\n * @param skipUpdateTransform - If true, the transform will not be updated before calculating bounds.\n * @param bounds - The output bounds object.\n * @returns The bounds.\n * @internal\n */\nexport function getGlobalBounds(target: Container, skipUpdateTransform: boolean, bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    let parentTransform;\n    let pooledMatrix;\n\n    if (target.parent)\n    {\n        if (!skipUpdateTransform)\n        {\n            pooledMatrix = matrixPool.get().identity();\n            parentTransform = updateTransformBackwards(target, pooledMatrix);\n        }\n        else\n        {\n            parentTransform = target.parent.worldTransform;\n        }\n    }\n    else\n    {\n        parentTransform = Matrix.IDENTITY;\n    }\n\n    // then collect them...\n\n    _getGlobalBounds(target, bounds, parentTransform, skipUpdateTransform);\n\n    if (pooledMatrix)\n    {\n        matrixPool.return(pooledMatrix);\n    }\n\n    if (!bounds.isValid)\n    {\n        bounds.set(0, 0, 0, 0);\n    }\n\n    return bounds;\n}\n\nfunction _getGlobalBounds(\n    target: Container,\n    bounds: Bounds,\n    parentTransform: Matrix,\n    skipUpdateTransform: boolean,\n): void\n{\n    if (!target.visible || !target.measurable) return;\n\n    let worldTransform: Matrix;\n\n    if (!skipUpdateTransform)\n    {\n        target.updateLocalTransform();\n\n        worldTransform = matrixPool.get();\n\n        worldTransform.appendFrom(target.localTransform, parentTransform);\n    }\n    else\n    {\n        worldTransform = target.worldTransform;\n    }\n\n    const parentBounds = bounds;\n    const preserveBounds = !!target.effects.length;\n\n    if (preserveBounds)\n    {\n        bounds = boundsPool.get().clear();\n    }\n\n    if (target.boundsArea)\n    {\n        bounds.addRect(target.boundsArea, worldTransform);\n    }\n    else\n    {\n        const renderableBounds = (target as Renderable).bounds;\n\n        if (renderableBounds && !renderableBounds.isEmpty())\n        {\n            // save a copy\n            bounds.matrix = worldTransform;\n            bounds.addBounds(renderableBounds);\n        }\n\n        for (let i = 0; i < target.children.length; i++)\n        {\n            _getGlobalBounds(target.children[i], bounds, worldTransform, skipUpdateTransform);\n        }\n    }\n\n    if (preserveBounds)\n    {\n        for (let i = 0; i < target.effects.length; i++)\n        {\n            target.effects[i].addBounds?.(bounds);\n        }\n\n        parentBounds.addBounds(bounds, Matrix.IDENTITY);\n\n        boundsPool.return(bounds);\n    }\n\n    if (!skipUpdateTransform)\n    {\n        matrixPool.return(worldTransform);\n    }\n}\n\n/**\n * @param target\n * @param parentTransform\n * @internal\n */\nexport function updateTransformBackwards(target: Container, parentTransform: Matrix)\n{\n    const parent = target.parent;\n\n    if (parent)\n    {\n        updateTransformBackwards(parent, parentTransform);\n\n        parent.updateLocalTransform();\n\n        parentTransform.append(parent.localTransform);\n    }\n\n    return parentTransform;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1400, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/utils/multiplyHexColors.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/utils/multiplyHexColors.ts"],"sourcesContent":["/**\n * @param color1\n * @param color2\n * @internal\n */\nexport function multiplyHexColors(color1: number, color2: number): number\n{\n    if (color1 === 0xFFFFFF || !color2) return color2;\n    if (color2 === 0xFFFFFF || !color1) return color1;\n\n    const r1 = (color1 >> 16) & 0xFF;\n    const g1 = (color1 >> 8) & 0xFF;\n    const b1 = color1 & 0xFF;\n\n    const r2 = (color2 >> 16) & 0xFF;\n    const g2 = (color2 >> 8) & 0xFF;\n    const b2 = color2 & 0xFF;\n\n    const r = ((r1 * r2) / 255) | 0;\n    const g = ((g1 * g2) / 255) | 0;\n    const b = ((b1 * b2) / 255) | 0;\n\n    return (r << 16) + (g << 8) + b;\n}\n"],"names":[],"mappings":";;;;;AAKgB,SAAA,iBAAA,CAAkB,MAAA,EAAgB,MAClD,EAAA;IACQ,IAAA,MAAA,KAAW,YAAY,CAAC,MAAA,EAAe,OAAA,MAAA,CAAA;IACvC,IAAA,MAAA,KAAW,YAAY,CAAC,MAAA,EAAe,OAAA,MAAA,CAAA;IAErC,MAAA,EAAA,GAAM,UAAU,EAAM,GAAA,GAAA,CAAA;IACtB,MAAA,EAAA,GAAM,UAAU,CAAK,GAAA,GAAA,CAAA;IAC3B,MAAM,KAAK,MAAS,GAAA,GAAA,CAAA;IAEd,MAAA,EAAA,GAAM,UAAU,EAAM,GAAA,GAAA,CAAA;IACtB,MAAA,EAAA,GAAM,UAAU,CAAK,GAAA,GAAA,CAAA;IAC3B,MAAM,KAAK,MAAS,GAAA,GAAA,CAAA;IAEd,MAAA,CAAA,GAAM,EAAK,GAAA,EAAA,GAAM,GAAO,GAAA,CAAA,CAAA;IACxB,MAAA,CAAA,GAAM,EAAK,GAAA,EAAA,GAAM,GAAO,GAAA,CAAA,CAAA;IACxB,MAAA,CAAA,GAAM,EAAK,GAAA,EAAA,GAAM,GAAO,GAAA,CAAA,CAAA;IAEtB,OAAA,CAAA,CAAA,IAAK,EAAO,IAAA,CAAA,CAAA,IAAK,CAAK,CAAA,GAAA,CAAA,CAAA;AAClC","debugId":null}},
    {"offset": {"line": 1425, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/utils/multiplyColors.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/utils/multiplyColors.ts"],"sourcesContent":["import { multiplyHexColors } from './multiplyHexColors';\n\nconst WHITE_BGR = 0xFFFFFF;\n\n/**\n * @param localBGRColor\n * @param parentBGRColor\n * @internal\n */\nexport function multiplyColors(localBGRColor: number, parentBGRColor: number)\n{\n    if (localBGRColor === WHITE_BGR)\n    {\n        return parentBGRColor;\n    }\n\n    if (parentBGRColor === WHITE_BGR)\n    {\n        return localBGRColor;\n    }\n\n    return multiplyHexColors(localBGRColor, parentBGRColor);\n}\n"],"names":[],"mappings":";;;;;;;AAEA,MAAM,SAAY,GAAA,QAAA,CAAA;AAOF,SAAA,cAAA,CAAe,aAAA,EAAuB,cACtD,EAAA;IACI,IAAI,kBAAkB,SACtB,EAAA;QACW,OAAA,cAAA,CAAA;IAAA,CACX;IAEA,IAAI,mBAAmB,SACvB,EAAA;QACW,OAAA,aAAA,CAAA;IAAA,CACX;IAEO,WAAA,mQAAA,EAAkB,eAAe,cAAc,CAAA,CAAA;AAC1D","debugId":null}},
    {"offset": {"line": 1448, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/container-mixins/getGlobalMixin.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/container-mixins/getGlobalMixin.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { updateTransformBackwards } from '../bounds/getGlobalBounds';\nimport { matrixPool } from '../bounds/utils/matrixAndBoundsPool';\nimport { multiplyColors } from '../utils/multiplyColors';\n\nimport type { Container } from '../Container';\n\n/**\n * Converts a color from BGR format to RGB format.\n * @param color - The color in BGR format (0xBBGGRR).\n * @returns The color in RGB format (0xRRGGBB).\n * @category utils\n * @internal\n */\nexport function bgr2rgb(color: number): number\n{\n    return ((color & 0xFF) << 16) + (color & 0xFF00) + ((color >> 16) & 0xFF);\n}\n\n/**\n * Interface for a mixin that provides methods to retrieve global properties of a container.\n * This mixin allows you to get the global alpha, transform matrix, and tint color of a container,\n * taking into account its parent containers and render groups.\n * It includes methods to optimize performance by using cached values when available.\n * @category scene\n * @advanced\n */\nexport interface GetGlobalMixin\n{\n    /**\n     * Returns the global (compound) alpha of the container within the scene.\n     * @param {boolean} skipUpdate - Performance optimization flag:\n     *   - If false (default): Recalculates the entire alpha chain through parents for accuracy\n     *   - If true: Uses cached worldAlpha from the last render pass for better performance\n     * @returns The resulting alpha value (between 0 and 1)\n     * @example\n     * ```ts\n     * // Accurate but slower - recalculates entire alpha chain\n     * const preciseAlpha = container.getGlobalAlpha();\n     *\n     * // Faster but may be outdated - uses cached alpha\n     * const cachedAlpha = container.getGlobalAlpha(true);\n     * ```\n     */\n    getGlobalAlpha(skipUpdate?: boolean): number;\n    /**\n     * Returns the global transform matrix of the container within the scene.\n     * @param {Matrix} matrix - Optional matrix to store the result. If not provided, a new Matrix will be created.\n     * @param {boolean} skipUpdate - Performance optimization flag:\n     *   - If false (default): Recalculates the entire transform chain for accuracy\n     *   - If true: Uses cached worldTransform from the last render pass for better performance\n     * @returns The resulting transformation matrix (either the input matrix or a new one)\n     * @example\n     * ```ts\n     * // Accurate but slower - recalculates entire transform chain\n     * const preciseTransform = container.getGlobalTransform();\n     *\n     * // Faster but may be outdated - uses cached transform\n     * const cachedTransform = container.getGlobalTransform(undefined, true);\n     *\n     * // Reuse existing matrix\n     * const existingMatrix = new Matrix();\n     * container.getGlobalTransform(existingMatrix);\n     * ```\n     */\n    getGlobalTransform(matrix?: Matrix, skipUpdate?: boolean): Matrix;\n    /**\n     * Returns the global (compound) tint color of the container within the scene.\n     * @param {boolean} skipUpdate - Performance optimization flag:\n     *   - If false (default): Recalculates the entire tint chain through parents for accuracy\n     *   - If true: Uses cached worldColor from the last render pass for better performance\n     * @returns The resulting tint color as a 24-bit RGB number (0xRRGGBB)\n     * @example\n     * ```ts\n     * // Accurate but slower - recalculates entire tint chain\n     * const preciseTint = container.getGlobalTint();\n     *\n     * // Faster but may be outdated - uses cached tint\n     * const cachedTint = container.getGlobalTint(true);\n     * ```\n     */\n    getGlobalTint(skipUpdate?: boolean): number;\n}\n\n/** @internal */\nexport const getGlobalMixin: Partial<Container> = {\n    getGlobalAlpha(skipUpdate?: boolean): number\n    {\n        if (skipUpdate)\n        {\n            if (this.renderGroup)\n            {\n                return this.renderGroup.worldAlpha;\n            }\n\n            if (this.parentRenderGroup)\n            {\n                return this.parentRenderGroup.worldAlpha * this.alpha;\n            }\n\n            return this.alpha;\n        }\n\n        let alpha = this.alpha;\n        let current = this.parent;\n\n        while (current)\n        {\n            alpha *= current.alpha;\n            current = current.parent;\n        }\n\n        return alpha;\n    },\n    getGlobalTransform(matrix = new Matrix(), skipUpdate?: boolean): Matrix\n    {\n        if (skipUpdate)\n        {\n            return matrix.copyFrom(this.worldTransform);\n        }\n\n        this.updateLocalTransform();\n\n        const parentTransform = updateTransformBackwards(this, matrixPool.get().identity());\n\n        matrix.appendFrom(this.localTransform, parentTransform);\n        matrixPool.return(parentTransform);\n\n        return matrix;\n    },\n    getGlobalTint(skipUpdate?: boolean): number\n    {\n        if (skipUpdate)\n        {\n            if (this.renderGroup)\n            {\n                return bgr2rgb(this.renderGroup.worldColor);\n            }\n\n            if (this.parentRenderGroup)\n            {\n                return bgr2rgb(\n                    multiplyColors(this.localColor, this.parentRenderGroup.worldColor)\n                );\n            }\n\n            return this.tint;\n        }\n\n        let color = this.localColor;\n        let parent = this.parent;\n\n        while (parent)\n        {\n            color = multiplyColors(color, parent.localColor);\n            parent = parent.parent;\n        }\n\n        return bgr2rgb(color);\n    }\n\n} as Container;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAcO,SAAS,QAAQ,KACxB,EAAA;IACI,OAAA,CAAA,CAAS,QAAQ,GAAS,KAAA,EAAA,IAAA,CAAO,KAAQ,GAAA,KAAA,CAAA,GAAA,CAAY,SAAS,EAAM,GAAA,GAAA,CAAA,CAAA;AACxE,CAAA;AAoEO,MAAM,cAAqC,GAAA;IAC9C,gBAAe,UACf,EAAA;QACI,IAAI,UACJ,EAAA;YACI,IAAI,IAAA,CAAK,WACT,EAAA;gBACI,OAAO,IAAA,CAAK,WAAY,CAAA,UAAA,CAAA;YAAA,CAC5B;YAEA,IAAI,IAAA,CAAK,iBACT,EAAA;gBACW,OAAA,IAAA,CAAK,iBAAkB,CAAA,UAAA,GAAa,IAAK,CAAA,KAAA,CAAA;YAAA,CACpD;YAEA,OAAO,IAAK,CAAA,KAAA,CAAA;QAAA,CAChB;QAEA,IAAI,QAAQ,IAAK,CAAA,KAAA,CAAA;QACjB,IAAI,UAAU,IAAK,CAAA,MAAA,CAAA;QAEnB,MAAO,OACP,CAAA;YACI,KAAA,IAAS,OAAQ,CAAA,KAAA,CAAA;YACjB,OAAA,GAAU,OAAQ,CAAA,MAAA,CAAA;QAAA,CACtB;QAEO,OAAA,KAAA,CAAA;IAAA,CACX;IACA,kBAAmB,EAAA,MAAA,GAAS,IAAI,iOAAA,EAAA,EAAU,UAC1C,EAAA;QACI,IAAI,UACJ,EAAA;YACW,OAAA,MAAA,CAAO,QAAS,CAAA,IAAA,CAAK,cAAc,CAAA,CAAA;QAAA,CAC9C;QAEA,IAAA,CAAK,oBAAqB,EAAA,CAAA;QAE1B,MAAM,sBAAkB,yQAAyB,EAAA,IAAA,EAAM,wQAAA,CAAW,GAAI,EAAA,CAAE,QAAA,EAAU,CAAA,CAAA;QAE3E,MAAA,CAAA,UAAA,CAAW,IAAK,CAAA,cAAA,EAAgB,eAAe,CAAA,CAAA;QACtD,wQAAA,CAAW,MAAA,CAAO,eAAe,CAAA,CAAA;QAE1B,OAAA,MAAA,CAAA;IAAA,CACX;IACA,eAAc,UACd,EAAA;QACI,IAAI,UACJ,EAAA;YACI,IAAI,IAAA,CAAK,WACT,EAAA;gBACW,OAAA,OAAA,CAAQ,IAAK,CAAA,WAAA,CAAY,UAAU,CAAA,CAAA;YAAA,CAC9C;YAEA,IAAI,IAAA,CAAK,iBACT,EAAA;gBACW,OAAA,OAAA,KACH,6PAAe,EAAA,IAAA,CAAK,UAAY,EAAA,IAAA,CAAK,iBAAA,CAAkB,UAAU,CAAA;YACrE,CACJ;YAEA,OAAO,IAAK,CAAA,IAAA,CAAA;QAAA,CAChB;QAEA,IAAI,QAAQ,IAAK,CAAA,UAAA,CAAA;QACjB,IAAI,SAAS,IAAK,CAAA,MAAA,CAAA;QAElB,MAAO,MACP,CAAA;YACY,KAAA,OAAA,6PAAA,EAAe,KAAO,EAAA,MAAA,CAAO,UAAU,CAAA,CAAA;YAC/C,MAAA,GAAS,MAAO,CAAA,MAAA,CAAA;QAAA,CACpB;QAEA,OAAO,QAAQ,KAAK,CAAA,CAAA;IAAA,CACxB;AAEJ","debugId":null}},
    {"offset": {"line": 1520, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/bounds/getLocalBounds.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/bounds/getLocalBounds.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { boundsPool, matrixPool } from './utils/matrixAndBoundsPool';\n\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Container } from '../Container';\nimport type { Bounds } from './Bounds';\n\n/**\n * @param target\n * @param bounds\n * @param relativeMatrix\n * @internal\n */\nexport function getLocalBounds(target: Container, bounds: Bounds, relativeMatrix?: Matrix): Bounds\n{\n    bounds.clear();\n\n    relativeMatrix ||= Matrix.IDENTITY;\n\n    _getLocalBounds(target, bounds, relativeMatrix, target, true);\n\n    if (!bounds.isValid)\n    {\n        bounds.set(0, 0, 0, 0);\n    }\n\n    return bounds;\n}\n\nfunction _getLocalBounds(\n    target: Container,\n    bounds: Bounds,\n    parentTransform: Matrix,\n    rootContainer: Container,\n    isRoot: boolean\n): void\n{\n    let relativeTransform: Matrix;\n\n    if (!isRoot)\n    {\n        if (!target.visible || !target.measurable) return;\n\n        target.updateLocalTransform();\n\n        const localTransform = target.localTransform;\n\n        relativeTransform = matrixPool.get();\n        relativeTransform.appendFrom(localTransform, parentTransform);\n    }\n    else\n    {\n        relativeTransform = matrixPool.get();\n        relativeTransform = parentTransform.copyTo(relativeTransform);\n    }\n\n    const parentBounds = bounds;\n    const preserveBounds = !!target.effects.length;\n\n    if (preserveBounds)\n    {\n        bounds = boundsPool.get().clear();\n    }\n\n    if (target.boundsArea)\n    {\n        bounds.addRect(target.boundsArea, relativeTransform);\n    }\n    else\n    {\n        if (target.renderPipeId)\n        {\n            bounds.matrix = relativeTransform;\n            bounds.addBounds((target as Renderable).bounds);\n        }\n\n        const children = target.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            _getLocalBounds(children[i], bounds, relativeTransform, rootContainer, false);\n        }\n    }\n\n    if (preserveBounds)\n    {\n        for (let i = 0; i < target.effects.length; i++)\n        {\n            target.effects[i].addLocalBounds?.(bounds, rootContainer);\n        }\n\n        // TODO - make a add transformed bounds?\n        parentBounds.addBounds(bounds, Matrix.IDENTITY);\n\n        boundsPool.return(bounds);\n    }\n\n    matrixPool.return(relativeTransform);\n}\n\n"],"names":[],"mappings":";;;;;;;;;AAagB,SAAA,cAAA,CAAe,MAAmB,EAAA,MAAA,EAAgB,cAClE,EAAA;IACI,MAAA,CAAO,KAAM,EAAA,CAAA;IAEb,cAAA,IAAA,CAAA,cAAA,GAAmB,iOAAO,CAAA,QAAA,CAAA,CAAA;IAE1B,eAAA,CAAgB,MAAQ,EAAA,MAAA,EAAQ,cAAgB,EAAA,MAAA,EAAQ,IAAI,CAAA,CAAA;IAExD,IAAA,CAAC,OAAO,OACZ,EAAA;QACI,MAAA,CAAO,GAAI,CAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAC,CAAA,CAAA;IAAA,CACzB;IAEO,OAAA,MAAA,CAAA;AACX,CAAA;AAEA,SAAS,eACL,CAAA,MAAA,EACA,MACA,EAAA,eAAA,EACA,aAAA,EACA,MAEJ,EAAA;IACQ,IAAA,iBAAA,CAAA;IAEJ,IAAI,CAAC,MACL,EAAA;QACI,IAAI,CAAC,MAAA,CAAO,OAAW,IAAA,CAAC,MAAO,CAAA,UAAA,EAAY,OAAA;QAE3C,MAAA,CAAO,oBAAqB,EAAA,CAAA;QAE5B,MAAM,iBAAiB,MAAO,CAAA,cAAA,CAAA;QAE9B,iBAAA,GAAoB,wQAAA,CAAW,GAAI,EAAA,CAAA;QACjB,iBAAA,CAAA,UAAA,CAAW,gBAAgB,eAAe,CAAA,CAAA;IAAA,CAGhE,MAAA;QACI,iBAAA,GAAoB,wQAAA,CAAW,GAAI,EAAA,CAAA;QACf,iBAAA,GAAA,eAAA,CAAgB,MAAA,CAAO,iBAAiB,CAAA,CAAA;IAAA,CAChE;IAEA,MAAM,YAAe,GAAA,MAAA,CAAA;IACrB,MAAM,cAAiB,GAAA,CAAC,CAAC,MAAA,CAAO,OAAQ,CAAA,MAAA,CAAA;IAExC,IAAI,cACJ,EAAA;QACa,MAAA,GAAA,wQAAA,CAAW,GAAI,EAAA,CAAE,KAAM,EAAA,CAAA;IAAA,CACpC;IAEA,IAAI,OAAO,UACX,EAAA;QACW,MAAA,CAAA,OAAA,CAAQ,MAAO,CAAA,UAAA,EAAY,iBAAiB,CAAA,CAAA;IAAA,CAGvD,MAAA;QACI,IAAI,OAAO,YACX,EAAA;YACI,MAAA,CAAO,MAAS,GAAA,iBAAA,CAAA;YACT,MAAA,CAAA,SAAA,CAAW,OAAsB,MAAM,CAAA,CAAA;QAAA,CAClD;QAEA,MAAM,WAAW,MAAO,CAAA,QAAA,CAAA;QAExB,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,QAAA,CAAS,MAAA,EAAQ,CACrC,EAAA,CAAA;YACI,eAAA,CAAgB,QAAA,CAAS,CAAC,CAAA,EAAG,MAAQ,EAAA,iBAAA,EAAmB,eAAe,KAAK,CAAA,CAAA;QAAA,CAChF;IAAA,CACJ;IAEA,IAAI,cACJ,EAAA;QACI,IAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,MAAO,CAAA,OAAA,CAAQ,MAAA,EAAQ,CAC3C,EAAA,CAAA;YACI,MAAA,CAAO,OAAQ,CAAA,CAAC,CAAE,CAAA,cAAA,GAAiB,QAAQ,aAAa,CAAA,CAAA;QAAA,CAC5D;QAGa,YAAA,CAAA,SAAA,CAAU,MAAQ,EAAA,iOAAA,CAAO,QAAQ,CAAA,CAAA;QAE9C,wQAAA,CAAW,MAAA,CAAO,MAAM,CAAA,CAAA;IAAA,CAC5B;IAEA,wQAAA,CAAW,MAAA,CAAO,iBAAiB,CAAA,CAAA;AACvC","debugId":null}},
    {"offset": {"line": 1582, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/utils/checkChildrenDidChange.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/utils/checkChildrenDidChange.ts"],"sourcesContent":["import type { Container } from '../Container';\n\n/**\n * This function will crawl through the container essentially check if the children have changed.\n *\n * This function checkChildrenDidChange recursively checks if any child in a Container\n * or its children has changed. It does this by comparing a generated changeId for each\n * child against a stored value in previousData.\n * The changeId is a combination of the child's uid and _didChangeId, bitwise manipulated for uniqueness.\n * If a change is detected, it updates previousData and sets didChange to true.\n * The function returns a boolean indicating if any change was detected in the entire hierarchy of children.\n * @param container - the container to check for changes\n * @param previousData - the previous data from the last check made\n * @param previousData.data - the data array\n * @param previousData.index - the index of the data array\n * @param previousData.didChange - did the data change\n * @internal\n */\nexport function checkChildrenDidChange(\n    container: Container,\n    previousData: {\n        data: number[];\n        index: number;\n        didChange: boolean;\n    })\n{\n    const children = container.children;\n\n    for (let i = 0; i < children.length; i++)\n    {\n        const child = children[i];\n\n        const uid = child.uid;\n        const didChange = ((child._didViewChangeTick & 0xffff) << 16) | (child._didContainerChangeTick & 0xffff);\n\n        const index = previousData.index;\n\n        if (previousData.data[index] !== uid || previousData.data[index + 1] !== didChange)\n        {\n            previousData.data[previousData.index] = uid;\n            previousData.data[previousData.index + 1] = didChange;\n\n            previousData.didChange = true;\n        }\n\n        previousData.index = index + 2;\n\n        if (child.children.length)\n        {\n            checkChildrenDidChange(child, previousData);\n        }\n    }\n\n    return previousData.didChange;\n}\n"],"names":[],"mappings":";;;;;AAkBgB,SAAA,sBAAA,CACZ,SAAA,EACA,YAKJ,EAAA;IACI,MAAM,WAAW,SAAU,CAAA,QAAA,CAAA;IAE3B,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,QAAA,CAAS,MAAA,EAAQ,CACrC,EAAA,CAAA;QACU,MAAA,KAAA,GAAQ,QAAA,CAAS,CAAC,CAAA,CAAA;QAExB,MAAM,MAAM,KAAM,CAAA,GAAA,CAAA;QAClB,MAAM,YAAA,CAAc,KAAM,CAAA,kBAAA,GAAqB,KAAW,KAAA,EAAA,GAAO,MAAM,uBAA0B,GAAA,KAAA,CAAA;QAEjG,MAAM,QAAQ,YAAa,CAAA,KAAA,CAAA;QAEvB,IAAA,YAAA,CAAa,IAAK,CAAA,KAAK,CAAM,KAAA,GAAA,IAAO,aAAa,IAAK,CAAA,KAAA,GAAQ,CAAC,CAAA,KAAM,SACzE,EAAA;YACiB,YAAA,CAAA,IAAA,CAAK,YAAa,CAAA,KAAK,CAAI,GAAA,GAAA,CAAA;YACxC,YAAA,CAAa,IAAK,CAAA,YAAA,CAAa,KAAQ,GAAA,CAAC,CAAI,GAAA,SAAA,CAAA;YAE5C,YAAA,CAAa,SAAY,GAAA,IAAA,CAAA;QAAA,CAC7B;QAEA,YAAA,CAAa,KAAA,GAAQ,KAAQ,GAAA,CAAA,CAAA;QAEzB,IAAA,KAAA,CAAM,QAAA,CAAS,MACnB,EAAA;YACI,sBAAA,CAAuB,OAAO,YAAY,CAAA,CAAA;QAAA,CAC9C;IAAA,CACJ;IAEA,OAAO,YAAa,CAAA,SAAA,CAAA;AACxB","debugId":null}},
    {"offset": {"line": 1612, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/container-mixins/measureMixin.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/container-mixins/measureMixin.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { Bounds } from '../bounds/Bounds';\nimport { getGlobalBounds } from '../bounds/getGlobalBounds';\nimport { getLocalBounds } from '../bounds/getLocalBounds';\nimport { checkChildrenDidChange } from '../utils/checkChildrenDidChange';\n\nimport type { Size } from '../../../maths/misc/Size';\nimport type { Container } from '../Container';\n\n/**\n * A utility type that makes all properties of T optional except for the specified keys K.\n * @category utils\n * @internal\n */\nexport type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\n/** @ignore */\nexport interface MeasureMixinConstructor\n{\n    /**\n     * The width of the display object, in pixels.\n     * @example\n     * ```ts\n     * new Container({ width: 100});\n     * ```\n     * @default 0\n     */\n    width?: number;\n    /**\n     * The height of the display object, in pixels.\n     * @example\n     * ```ts\n     * new Container({ height: 100});\n     * ```\n     * @default 0\n     */\n    height?: number;\n}\n/**\n * The MeasureMixin interface provides methods for measuring and manipulating the size and bounds of a display object.\n * It includes methods to get and set the size of the object, retrieve its local bounds,\n * and calculate its global bounds.\n * @category scene\n * @advanced\n */\nexport interface MeasureMixin extends Required<MeasureMixinConstructor>\n{\n    getSize(out?: Size): Size;\n    setSize(width: number, height?: number): void;\n    setSize(value: Optional<Size, 'height'>): void;\n    /**\n     * Retrieves the local bounds of the container as a Bounds object.\n     * Uses cached values when possible for better performance.\n     * @example\n     * ```ts\n     * // Basic bounds check\n     * const bounds = container.getLocalBounds();\n     * console.log(`Width: ${bounds.width}, Height: ${bounds.height}`);\n     * // subsequent calls will reuse the cached bounds\n     * const cachedBounds = container.getLocalBounds();\n     * console.log(bounds === cachedBounds); // true\n     * ```\n     * @returns The bounding area\n     * @see {@link Container#getBounds} For world space bounds\n     * @see {@link Bounds} For bounds properties\n     */\n    getLocalBounds(): Bounds;\n    /**\n     * Calculates and returns the (world) bounds of the display object as a Rectangle.\n     * Takes into account transforms and child bounds.\n     * @example\n     * ```ts\n     * // Basic bounds calculation\n     * const bounds = sprite.getBounds();\n     * console.log(`World bounds: ${bounds.x}, ${bounds.y}, ${bounds.width}, ${bounds.height}`);\n     *\n     * // Reuse bounds object for performance\n     * const recycleBounds = new Bounds();\n     * sprite.getBounds(false, recycleBounds);\n     *\n     * // Skip update for performance\n     * const fastBounds = sprite.getBounds(true);\n     * ```\n     * @remarks\n     * - Includes transform calculations\n     * - Updates scene graph by default\n     * - Can reuse bounds objects\n     * - Common in hit testing\n     * @param {boolean} skipUpdate - Setting to `true` will stop the transforms of the scene graph from\n     *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n     *  nice performance boost.\n     * @param {Bounds} bounds - Optional bounds to store the result of the bounds calculation\n     * @returns The minimum axis-aligned rectangle in world space that fits around this object\n     * @see {@link Container#getLocalBounds} For untransformed bounds\n     * @see {@link Bounds} For bounds properties\n     */\n    getBounds(skipUpdate?: boolean, bounds?: Bounds): Bounds;\n    /** @private */\n    _localBoundsCacheData: LocalBoundsCacheData;\n    /** @private */\n    _localBoundsCacheId: number;\n    /** @private */\n    _setWidth(width: number, localWidth: number): void;\n    /** @private */\n    _setHeight(height: number, localHeight: number): void;\n}\n\ninterface LocalBoundsCacheData\n{\n    data: number[];\n    index: number;\n    didChange: boolean;\n    localBounds: Bounds;\n}\n\nconst tempMatrix = new Matrix();\n\n/** @internal */\nexport const measureMixin: Partial<Container> = {\n\n    _localBoundsCacheId: -1,\n    _localBoundsCacheData: null,\n\n    _setWidth(value: number, localWidth: number)\n    {\n        const sign = Math.sign(this.scale.x) || 1;\n\n        if (localWidth !== 0)\n        {\n            this.scale.x = (value / localWidth) * sign;\n        }\n        else\n        {\n            this.scale.x = sign;\n        }\n    },\n\n    _setHeight(value: number, localHeight: number)\n    {\n        const sign = Math.sign(this.scale.y) || 1;\n\n        if (localHeight !== 0)\n        {\n            this.scale.y = (value / localHeight) * sign;\n        }\n        else\n        {\n            this.scale.y = sign;\n        }\n    },\n\n    getLocalBounds(): Bounds\n    {\n        if (!this._localBoundsCacheData)\n        {\n            this._localBoundsCacheData = {\n                data: [],\n                index: 1,\n                didChange: false,\n                localBounds: new Bounds()\n            };\n        }\n\n        const localBoundsCacheData = this._localBoundsCacheData;\n\n        localBoundsCacheData.index = 1;\n        localBoundsCacheData.didChange = false;\n\n        if (localBoundsCacheData.data[0] !== this._didViewChangeTick)\n        {\n            localBoundsCacheData.didChange = true;\n            localBoundsCacheData.data[0] = this._didViewChangeTick;\n        }\n\n        checkChildrenDidChange(this, localBoundsCacheData);\n\n        if (localBoundsCacheData.didChange)\n        {\n            getLocalBounds(this, localBoundsCacheData.localBounds, tempMatrix);\n        }\n\n        return localBoundsCacheData.localBounds;\n    },\n\n    getBounds(skipUpdate?: boolean, bounds?: Bounds): Bounds\n    {\n        return getGlobalBounds(this, skipUpdate, bounds || new Bounds());\n    },\n} as Container;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAmHA,MAAM,UAAA,GAAa,IAAI,iOAAO,EAAA,CAAA;AAGvB,MAAM,YAAmC,GAAA;IAE5C,mBAAqB,EAAA,CAAA,CAAA;IACrB,qBAAuB,EAAA,IAAA;IAEvB,SAAA,EAAU,KAAA,EAAe,UACzB,EAAA;QACI,MAAM,OAAO,IAAK,CAAA,IAAA,CAAK,IAAK,CAAA,KAAA,CAAM,CAAC,CAAK,IAAA,CAAA,CAAA;QAExC,IAAI,eAAe,CACnB,EAAA;YACS,IAAA,CAAA,KAAA,CAAM,CAAK,GAAA,KAAA,GAAQ,UAAc,GAAA,IAAA,CAAA;QAAA,CAG1C,MAAA;YACI,IAAA,CAAK,KAAA,CAAM,CAAI,GAAA,IAAA,CAAA;QAAA,CACnB;IAAA,CACJ;IAEA,UAAA,EAAW,KAAA,EAAe,WAC1B,EAAA;QACI,MAAM,OAAO,IAAK,CAAA,IAAA,CAAK,IAAK,CAAA,KAAA,CAAM,CAAC,CAAK,IAAA,CAAA,CAAA;QAExC,IAAI,gBAAgB,CACpB,EAAA;YACS,IAAA,CAAA,KAAA,CAAM,CAAK,GAAA,KAAA,GAAQ,WAAe,GAAA,IAAA,CAAA;QAAA,CAG3C,MAAA;YACI,IAAA,CAAK,KAAA,CAAM,CAAI,GAAA,IAAA,CAAA;QAAA,CACnB;IAAA,CACJ;IAEA,cACA,GAAA;QACQ,IAAA,CAAC,IAAA,CAAK,qBACV,EAAA;YACI,IAAA,CAAK,qBAAwB,GAAA;gBACzB,MAAM,EAAC;gBACP,KAAO,EAAA,CAAA;gBACP,SAAW,EAAA,KAAA;gBACX,WAAA,EAAa,IAAI,8OAAO,EAAA;YAAA,CAC5B,CAAA;QAAA,CACJ;QAEA,MAAM,uBAAuB,IAAK,CAAA,qBAAA,CAAA;QAElC,oBAAA,CAAqB,KAAQ,GAAA,CAAA,CAAA;QAC7B,oBAAA,CAAqB,SAAY,GAAA,KAAA,CAAA;QAEjC,IAAI,oBAAqB,CAAA,IAAA,CAAK,CAAC,CAAA,KAAM,IAAA,CAAK,kBAC1C,EAAA;YACI,oBAAA,CAAqB,SAAY,GAAA,IAAA,CAAA;YACZ,oBAAA,CAAA,IAAA,CAAK,CAAC,CAAA,GAAI,IAAK,CAAA,kBAAA,CAAA;QAAA,CACxC;YAEA,6QAAA,EAAuB,IAAA,EAAM,oBAAoB,CAAA,CAAA;QAEjD,IAAI,qBAAqB,SACzB,EAAA;gBACmB,8PAAA,EAAA,IAAA,EAAM,oBAAqB,CAAA,WAAA,EAAa,UAAU,CAAA,CAAA;QAAA,CACrE;QAEA,OAAO,oBAAqB,CAAA,WAAA,CAAA;IAAA,CAChC;IAEA,SAAA,EAAU,UAAA,EAAsB,MAChC,EAAA;QACI,WAAO,gQAAA,EAAgB,IAAM,EAAA,UAAA,EAAY,MAAU,IAAA,IAAI,8OAAA,EAAQ,CAAA,CAAA;IAAA,CACnE;AACJ","debugId":null}},
    {"offset": {"line": 1679, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/container-mixins/onRenderMixin.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/container-mixins/onRenderMixin.ts"],"sourcesContent":["import type { Renderer } from '../../../rendering/renderers/types';\nimport type { Container } from '../Container';\n\n/** @internal */\nexport interface OnRenderMixinConstructor\n{\n    /**\n     * This callback is used when the container is rendered. It runs every frame during the render process,\n     * making it ideal for per-frame updates and animations.\n     *\n     * > [!NOTE] In v7 many users used `updateTransform` for this, however the way v8 renders objects is different\n     * > and \"updateTransform\" is no longer called every frame\n     * @example\n     * ```ts\n     * // Basic rotation animation\n     * const container = new Container();\n     * container.onRender = () => {\n     *     container.rotation += 0.01;\n     * };\n     *\n     * // Cleanup when done\n     * container.onRender = null; // Removes callback\n     * ```\n     * @param renderer - The renderer instance\n     * @see {@link Renderer} For renderer capabilities\n     */\n    onRender?: ((renderer: Renderer) => void) | null;\n}\n\n/**\n * The OnRenderMixin interface provides a way to define a callback that is executed\n * every time the container is rendered. This is useful for adding custom rendering logic\n * or animations that need to be updated each frame.\n * @category scene\n * @advanced\n */\nexport interface OnRenderMixin extends Required<OnRenderMixinConstructor>\n{\n    /** @private */\n    _onRender: ((renderer: Renderer) => void) | null;\n}\n\n/** @internal */\nexport const onRenderMixin: Partial<Container> = {\n    _onRender: null,\n\n    set onRender(func: (renderer: Renderer) => void)\n    {\n        const renderGroup = this.renderGroup || this.parentRenderGroup;\n\n        if (!func)\n        {\n            if (this._onRender)\n            {\n                renderGroup?.removeOnRender(this);\n            }\n\n            this._onRender = null;\n\n            return;\n        }\n\n        if (!this._onRender)\n        {\n            renderGroup?.addOnRender(this);\n        }\n\n        this._onRender = func;\n    },\n\n    get onRender(): (renderer: Renderer) => void\n    {\n        return this._onRender;\n    }\n} as Container;\n"],"names":[],"mappings":";;;;;AA2CO,MAAM,aAAoC,GAAA;IAC7C,SAAW,EAAA,IAAA;IAEX,IAAI,UAAS,IACb,CAAA;QACU,MAAA,WAAA,GAAc,IAAK,CAAA,WAAA,IAAe,IAAK,CAAA,iBAAA,CAAA;QAE7C,IAAI,CAAC,IACL,EAAA;YACI,IAAI,IAAA,CAAK,SACT,EAAA;gBACI,WAAA,EAAa,eAAe,IAAI,CAAA,CAAA;YAAA,CACpC;YAEA,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;YAEjB,OAAA;QAAA,CACJ;QAEI,IAAA,CAAC,IAAA,CAAK,SACV,EAAA;YACI,WAAA,EAAa,YAAY,IAAI,CAAA,CAAA;QAAA,CACjC;QAEA,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;IAAA,CACrB;IAEA,IAAI,QACJ,IAAA;QACI,OAAO,IAAK,CAAA,SAAA,CAAA;IAAA,CAChB;AACJ","debugId":null}},
    {"offset": {"line": 1710, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/container-mixins/sortMixin.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/container-mixins/sortMixin.ts"],"sourcesContent":["import type { Container } from '../Container';\n\n/** @ignore */\nexport interface SortMixinConstructor\n{\n    /**\n     * The zIndex of the container.\n     *\n     * Controls the rendering order of children within their parent container.\n     *\n     * A higher value will mean it will be moved towards the front of the rendering order.\n     * @example\n     * ```ts\n     * // Add in any order\n     * container.addChild(character, background, foreground);\n     *\n     * // Adjust rendering order\n     * background.zIndex = 0;\n     * character.zIndex = 1;\n     * foreground.zIndex = 2;\n     * ```\n     * @see {@link Container#sortableChildren} For enabling sorting\n     * @see {@link Container#sortChildren} For manual sorting\n     * @default 0\n     */\n    zIndex?: number;\n    /**\n     * Should children be sorted by zIndex at the next render call.\n     *\n     * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n     * @default false\n     * @internal\n     */\n    sortDirty?: boolean;\n    /**\n     * If set to true, the container will sort its children by `zIndex` value\n     * when the next render is called, or manually if `sortChildren()` is called.\n     *\n     * This actually changes the order of elements in the array of children,\n     * so it will affect the rendering order.\n     *\n     * > [!NOTE] Also be aware of that this may not work nicely with the `addChildAt()` function,\n     * > as the `zIndex` sorting may cause the child to automatically sorted to another position.\n     * @example\n     * ```ts\n     * container.sortableChildren = true;\n     * ```\n     * @default false\n     */\n    sortableChildren?: boolean;\n}\n\n/**\n * The SortMixin interface provides methods and properties for sorting children of a container\n * based on their `zIndex` values. It allows for automatic sorting of children when their `zIndex`\n * changes or when new children are added. The mixin includes properties to manage sorting state\n * and methods to sort children explicitly.\n * @category scene\n * @advanced\n */\nexport interface SortMixin extends Required<SortMixinConstructor>\n{\n    /** @internal */\n    _zIndex: number;\n    /**\n     * Sorts children by zIndex value. Only sorts if container is marked as dirty.\n     * @example\n     * ```ts\n     * // Basic sorting\n     * particles.zIndex = 2;     // Will mark as dirty\n     * container.sortChildren();\n     * ```\n     * @see {@link Container#sortableChildren} For enabling automatic sorting\n     * @see {@link Container#zIndex} For setting child order\n     */\n    sortChildren: () => void;\n    /** @internal */\n    depthOfChildModified: () => void;\n}\n\n/** @internal */\nexport const sortMixin: Partial<Container> = {\n    _zIndex: 0,\n    sortDirty: false,\n    sortableChildren: false,\n\n    get zIndex()\n    {\n        return this._zIndex;\n    },\n\n    set zIndex(value: number)\n    {\n        if (this._zIndex === value) return;\n\n        this._zIndex = value;\n\n        this.depthOfChildModified();\n    },\n\n    depthOfChildModified()\n    {\n        if (this.parent)\n        {\n            this.parent.sortableChildren = true;\n            this.parent.sortDirty = true;\n        }\n\n        if (this.parentRenderGroup)\n        {\n            this.parentRenderGroup.structureDidChange = true;\n        }\n    },\n\n    sortChildren()\n    {\n        if (!this.sortDirty) return;\n\n        this.sortDirty = false;\n\n        this.children.sort(sortChildren);\n    },\n} as Container;\n\nfunction sortChildren(a: Container, b: Container): number\n{\n    return a._zIndex - b._zIndex;\n}\n"],"names":[],"mappings":";;;;;AAiFO,MAAM,SAAgC,GAAA;IACzC,OAAS,EAAA,CAAA;IACT,SAAW,EAAA,KAAA;IACX,gBAAkB,EAAA,KAAA;IAElB,IAAI,MACJ,IAAA;QACI,OAAO,IAAK,CAAA,OAAA,CAAA;IAAA,CAChB;IAEA,IAAI,QAAO,KACX,CAAA;QACI,IAAI,IAAA,CAAK,OAAY,KAAA,KAAA,EAAO,OAAA;QAE5B,IAAA,CAAK,OAAU,GAAA,KAAA,CAAA;QAEf,IAAA,CAAK,oBAAqB,EAAA,CAAA;IAAA,CAC9B;IAEA,oBACA,GAAA;QACI,IAAI,IAAA,CAAK,MACT,EAAA;YACI,IAAA,CAAK,MAAA,CAAO,gBAAmB,GAAA,IAAA,CAAA;YAC/B,IAAA,CAAK,MAAA,CAAO,SAAY,GAAA,IAAA,CAAA;QAAA,CAC5B;QAEA,IAAI,IAAA,CAAK,iBACT,EAAA;YACI,IAAA,CAAK,iBAAA,CAAkB,kBAAqB,GAAA,IAAA,CAAA;QAAA,CAChD;IAAA,CACJ;IAEA,YACA,GAAA;QACI,IAAI,CAAC,IAAK,CAAA,SAAA,EAAW,OAAA;QAErB,IAAA,CAAK,SAAY,GAAA,KAAA,CAAA;QAEZ,IAAA,CAAA,QAAA,CAAS,IAAA,CAAK,YAAY,CAAA,CAAA;IAAA,CACnC;AACJ,EAAA;AAEA,SAAS,YAAA,CAAa,CAAA,EAAc,CACpC,EAAA;IACW,OAAA,CAAA,CAAE,OAAA,GAAU,CAAE,CAAA,OAAA,CAAA;AACzB","debugId":null}},
    {"offset": {"line": 1751, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/container-mixins/toLocalGlobalMixin.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/container-mixins/toLocalGlobalMixin.ts"],"sourcesContent":["import { Point } from '../../../maths/point/Point';\nimport { matrixPool } from '../bounds/utils/matrixAndBoundsPool';\n\nimport type { PointData } from '../../../maths/point/PointData';\nimport type { Container } from '../Container';\n\n/**\n * Interface for a mixin that provides methods to convert between local and global coordinates.\n * This mixin allows you to get the global position of a container,\n * convert a point from local to global coordinates,\n * and convert a point from global to local coordinates.\n *\n * It includes methods to optimize performance by using cached matrices when available.\n * @category scene\n * @advanced\n */\nexport interface ToLocalGlobalMixin\n{\n    /**\n     * Returns the global position of the container, taking into account the container hierarchy.\n     * @example\n     * ```ts\n     * // Basic position check\n     * const globalPos = sprite.getGlobalPosition();\n     * console.log(`Global: (${globalPos.x}, ${globalPos.y})`);\n     *\n     * // Reuse point object\n     * const point = new Point();\n     * sprite.getGlobalPosition(point);\n     *\n     * // Skip transform update for performance\n     * const fastPos = container.getGlobalPosition(undefined, true);\n     * ```\n     * @param {Point} point - The optional point to write the global value to\n     * @param {boolean} skipUpdate - Should we skip the update transform\n     * @returns The updated point\n     * @see {@link Container#toGlobal} For converting specific points\n     * @see {@link Container#toLocal} For converting to local space\n     */\n    getGlobalPosition(point?: Point, skipUpdate?: boolean): Point;\n    /**\n     * Calculates the global position of a point relative to this container.\n     * Takes into account the container hierarchy and transforms.\n     * @example\n     * ```ts\n     * // Basic point conversion\n     * const localPoint = { x: 10, y: 20 };\n     * const globalPoint = container.toGlobal(localPoint);\n     *\n     * // With point reuse\n     * const reusePoint = new Point();\n     * container.toGlobal(localPoint, reusePoint);\n     *\n     * // Performance optimization\n     * const fastPoint = container.toGlobal(\n     *     { x: 50, y: 50 },\n     *     undefined,\n     *     true // Skip transform update\n     * );\n     * ```\n     * @param {PointData} position - The local point to convert\n     * @param {P} point - Optional point to store the result\n     * @param {boolean} skipUpdate - Whether to skip transform updates\n     * @returns The global position\n     * @see {@link Container#toLocal} For reverse conversion\n     * @see {@link Container#getGlobalPosition} For container position\n     */\n    toGlobal<P extends PointData = Point>(position: PointData, point?: P, skipUpdate?: boolean): P;\n    /**\n     * Calculates the local position of the container relative to another point.\n     * Converts coordinates from any coordinate space to this container's local coordinate space.\n     * @example\n     * ```ts\n     * // Basic coordinate conversion\n     * const worldPoint = { x: 100, y: 100 };\n     * const localPos = container.toLocal(worldPoint);\n     *\n     * // Convert from another container\n     * const fromSprite = new Sprite(texture);\n     * fromSprite.position.set(50, 50);\n     * const pointInSprite = { x: 10, y: 10 };\n     * const localPoint = container.toLocal(pointInSprite, fromSprite);\n     *\n     * // With point reuse for performance\n     * const reusePoint = new Point();\n     * container.toLocal(worldPoint, undefined, reusePoint);\n     *\n     * // Skip transform update for static objects\n     * const fastLocal = container.toLocal(\n     *     worldPoint,\n     *     undefined,\n     *     undefined,\n     *     true\n     * );\n     * ```\n     * @param {PointData} position - The world origin to calculate from\n     * @param {Container} from - The Container to calculate the global position from\n     * @param {P} point - A Point object in which to store the value\n     * @param {boolean} skipUpdate - Should we skip the update transform\n     * @returns A point object representing the position in local space\n     * @see {@link Container#toGlobal} For reverse conversion\n     * @see {@link Container#getGlobalPosition} For container position\n     */\n    toLocal<P extends PointData = Point>(position: PointData, from?: Container, point?: P, skipUpdate?: boolean): P;\n}\n\n/** @internal */\nexport const toLocalGlobalMixin: Partial<Container> = {\n    getGlobalPosition(point: Point = new Point(), skipUpdate = false): Point\n    {\n        if (this.parent)\n        {\n            this.parent.toGlobal(this._position, point, skipUpdate);\n        }\n        else\n        {\n            point.x = this._position.x;\n            point.y = this._position.y;\n        }\n\n        return point;\n    },\n\n    toGlobal<P extends PointData = Point>(position: PointData, point?: P, skipUpdate = false): P\n    {\n        const globalMatrix = this.getGlobalTransform(matrixPool.get(), skipUpdate);\n\n        // simply apply the matrix..\n        point = globalMatrix.apply(position, point);\n\n        matrixPool.return(globalMatrix);\n\n        return point;\n    },\n\n    toLocal<P extends PointData = Point>(position: PointData, from?: Container, point?: P, skipUpdate?: boolean): P\n    {\n        if (from)\n        {\n            position = from.toGlobal(position, point, skipUpdate);\n        }\n\n        const globalMatrix = this.getGlobalTransform(matrixPool.get(), skipUpdate);\n\n        // simply apply the matrix..\n        point = globalMatrix.applyInverse(position, point);\n\n        matrixPool.return(globalMatrix);\n\n        return point;\n    }\n} as Container;\n"],"names":[],"mappings":";;;;;;;;;AA2GO,MAAM,kBAAyC,GAAA;IAClD,mBAAkB,KAAe,GAAA,IAAI,8NAAM,EAAA,EAAG,aAAa,KAC3D,EAAA;QACI,IAAI,IAAA,CAAK,MACT,EAAA;YACI,IAAA,CAAK,MAAO,CAAA,QAAA,CAAS,IAAK,CAAA,SAAA,EAAW,OAAO,UAAU,CAAA,CAAA;QAAA,CAG1D,MAAA;YACU,KAAA,CAAA,CAAA,GAAI,IAAA,CAAK,SAAU,CAAA,CAAA,CAAA;YACnB,KAAA,CAAA,CAAA,GAAI,IAAA,CAAK,SAAU,CAAA,CAAA,CAAA;QAAA,CAC7B;QAEO,OAAA,KAAA,CAAA;IAAA,CACX;IAEA,QAAsC,EAAA,QAAA,EAAqB,KAAW,EAAA,UAAA,GAAa,KACnF,EAAA;QACI,MAAM,eAAe,IAAK,CAAA,kBAAA,CAAmB,wQAAW,CAAA,GAAA,IAAO,UAAU,CAAA,CAAA;QAGjE,KAAA,GAAA,YAAA,CAAa,KAAM,CAAA,QAAA,EAAU,KAAK,CAAA,CAAA;QAE1C,wQAAA,CAAW,MAAA,CAAO,YAAY,CAAA,CAAA;QAEvB,OAAA,KAAA,CAAA;IAAA,CACX;IAEA,OAAqC,EAAA,QAAA,EAAqB,IAAkB,EAAA,KAAA,EAAW,UACvF,EAAA;QACI,IAAI,IACJ,EAAA;YACI,QAAA,GAAW,IAAK,CAAA,QAAA,CAAS,QAAU,EAAA,KAAA,EAAO,UAAU,CAAA,CAAA;QAAA,CACxD;QAEA,MAAM,eAAe,IAAK,CAAA,kBAAA,CAAmB,wQAAW,CAAA,GAAA,IAAO,UAAU,CAAA,CAAA;QAGjE,KAAA,GAAA,YAAA,CAAa,YAAa,CAAA,QAAA,EAAU,KAAK,CAAA,CAAA;QAEjD,wQAAA,CAAW,MAAA,CAAO,YAAY,CAAA,CAAA;QAEvB,OAAA,KAAA,CAAA;IAAA,CACX;AACJ","debugId":null}},
    {"offset": {"line": 1792, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/RenderGroup.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/RenderGroup.ts"],"sourcesContent":["import { Matrix } from '../../maths/matrix/Matrix';\nimport { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport { type SCALE_MODE } from '../../rendering/renderers/shared/texture/const';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer } from '../../rendering/renderers/types';\n\nimport type { Instruction } from '../../rendering/renderers/shared/instructions/Instruction';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { BatchableSprite } from '../sprite/BatchableSprite';\nimport type { ViewContainer } from '../view/ViewContainer';\nimport type { Bounds } from './bounds/Bounds';\nimport type { Container } from './Container';\n\n/**\n * Options for caching a container as a texture.\n * @category rendering\n * @advanced\n */\nexport interface CacheAsTextureOptions\n{\n    /**\n     * If true, the texture will be antialiased. This smooths out the edges of the texture.\n     * @default false\n     */\n    antialias?: boolean;\n    /**\n     * The resolution of the texture. A higher resolution means a sharper texture but uses more memory.\n     * By default the resolution is 1 which is the same as the rendererers resolution.\n     */\n    resolution?: number;\n    /**\n     * Scale Mode to use for the cached texture\n     * @type {SCALE_MODE}\n     * @default 'linear'\n     * @example\n     * ```ts\n     * const container = new Container();\n     * container.cacheAsTexture({ scaleMode: 'nearest' });\n     * ```\n     * @see {@link SCALE_MODE}\n     */\n    scaleMode?: SCALE_MODE;\n}\n\n/**\n * A RenderGroup is a class that is responsible for I generating a set of instructions that are used to render the\n * root container and its children. It also watches for any changes in that container or its children,\n * these changes are analysed and either the instruction set is rebuild or the instructions data is updated.\n * @category rendering\n * @advanced\n */\nexport class RenderGroup implements Instruction\n{\n    public renderPipeId = 'renderGroup';\n    public root: Container = null;\n\n    public canBundle = false;\n\n    public renderGroupParent: RenderGroup = null;\n    public renderGroupChildren: RenderGroup[] = [];\n\n    public worldTransform: Matrix = new Matrix();\n    public worldColorAlpha = 0xffffffff;\n    public worldColor = 0xffffff;\n    public worldAlpha = 1;\n\n    // these updates are transform changes..\n    public readonly childrenToUpdate: Record<number, { list: Container[]; index: number; }> = Object.create(null);\n    public updateTick = 0;\n    public gcTick = 0;\n\n    // these update are renderable changes..\n    public readonly childrenRenderablesToUpdate: { list: Container[]; index: number; } = { list: [], index: 0 };\n\n    // other\n    public structureDidChange = true;\n\n    public instructionSet: InstructionSet = new InstructionSet();\n\n    private readonly _onRenderContainers: Container[] = [];\n\n    /**\n     * Indicates if the cached texture needs to be updated.\n     * @default true\n     */\n    public textureNeedsUpdate = true;\n\n    /**\n     * Indicates if the container should be cached as a texture.\n     * @default false\n     */\n    public isCachedAsTexture = false;\n\n    /**\n     * The texture used for caching the container. this is only set if isCachedAsTexture is true.\n     * It can only be accessed after a render pass.\n     * @type {Texture | undefined}\n     */\n    public texture?: Texture;\n\n    /**\n     * The bounds of the cached texture.\n     * @type {Bounds | undefined}\n     * @ignore\n     */\n    public _textureBounds?: Bounds;\n\n    /**\n     * The options for caching the container as a texture.\n     * @type {CacheAsTextureOptions}\n     */\n    public textureOptions: CacheAsTextureOptions;\n\n    /**\n     *  holds a reference to the batchable render sprite\n     *  @ignore\n     */\n    public _batchableRenderGroup: BatchableSprite;\n\n    /**\n     * Holds a reference to the closest parent RenderGroup that has isCachedAsTexture enabled.\n     * This is used to properly transform coordinates when rendering into cached textures.\n     * @type {RenderGroup | null}\n     * @ignore\n     */\n    public _parentCacheAsTextureRenderGroup: RenderGroup;\n\n    private _inverseWorldTransform: Matrix;\n    private _textureOffsetInverseTransform: Matrix;\n    private _inverseParentTextureTransform: Matrix;\n\n    private _matrixDirty = 0b111;\n\n    public init(root: Container)\n    {\n        this.root = root;\n\n        if (root._onRender) this.addOnRender(root);\n\n        root.didChange = true;\n\n        const children = root.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            const child = children[i];\n\n            // make sure the children are all updated on the first pass..\n            child._updateFlags = 0b1111;\n\n            this.addChild(child);\n        }\n    }\n\n    public enableCacheAsTexture(options: CacheAsTextureOptions = {}): void\n    {\n        this.textureOptions = options;\n        this.isCachedAsTexture = true;\n        this.textureNeedsUpdate = true;\n    }\n\n    public disableCacheAsTexture(): void\n    {\n        this.isCachedAsTexture = false;\n        if (this.texture)\n        {\n            TexturePool.returnTexture(this.texture, true);\n            this.texture = null;\n        }\n    }\n\n    public updateCacheTexture(): void\n    {\n        this.textureNeedsUpdate = true;\n\n        const cachedParent = this._parentCacheAsTextureRenderGroup;\n\n        // It's worth going bottom-up and notify all parents cached as texture\n        // that cached child was updated.\n        if (cachedParent && !cachedParent.textureNeedsUpdate)\n        {\n            cachedParent.updateCacheTexture();\n        }\n    }\n\n    public reset()\n    {\n        this.renderGroupChildren.length = 0;\n\n        for (const i in this.childrenToUpdate)\n        {\n            const childrenAtDepth = this.childrenToUpdate[i];\n\n            childrenAtDepth.list.fill(null);\n            childrenAtDepth.index = 0;\n        }\n\n        this.childrenRenderablesToUpdate.index = 0;\n        this.childrenRenderablesToUpdate.list.fill(null);\n\n        this.root = null;\n        this.updateTick = 0;\n        this.structureDidChange = true;\n\n        this._onRenderContainers.length = 0;\n        this.renderGroupParent = null;\n\n        this.disableCacheAsTexture();\n    }\n\n    get localTransform()\n    {\n        return this.root.localTransform;\n    }\n\n    public addRenderGroupChild(renderGroupChild: RenderGroup)\n    {\n        if (renderGroupChild.renderGroupParent)\n        {\n            renderGroupChild.renderGroupParent._removeRenderGroupChild(renderGroupChild);\n        }\n\n        renderGroupChild.renderGroupParent = this;\n\n        this.renderGroupChildren.push(renderGroupChild);\n    }\n\n    private _removeRenderGroupChild(renderGroupChild: RenderGroup)\n    {\n        const index = this.renderGroupChildren.indexOf(renderGroupChild);\n\n        if (index > -1)\n        {\n            this.renderGroupChildren.splice(index, 1);\n        }\n\n        renderGroupChild.renderGroupParent = null;\n    }\n\n    public addChild(child: Container)\n    {\n        this.structureDidChange = true;\n\n        child.parentRenderGroup = this;\n\n        child.updateTick = -1;\n\n        if (child.parent === this.root)\n        {\n            child.relativeRenderGroupDepth = 1;\n        }\n        else\n        {\n            child.relativeRenderGroupDepth = child.parent.relativeRenderGroupDepth + 1;\n        }\n\n        child.didChange = true;\n        this.onChildUpdate(child);\n\n        if (child.renderGroup)\n        {\n            this.addRenderGroupChild(child.renderGroup);\n\n            return;\n        }\n\n        if (child._onRender) this.addOnRender(child);\n\n        const children = child.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            this.addChild(children[i]);\n        }\n    }\n\n    public removeChild(child: Container)\n    {\n        // remove all the children...\n        this.structureDidChange = true;\n\n        if (child._onRender)\n        {\n            // Remove the child to the onRender list under the following conditions:\n            // 1. If the child is not a render group.\n            // 2. If the child is a render group root of this render group - which it can't be removed from in this case.\n            if (!child.renderGroup)\n            {\n                this.removeOnRender(child);\n            }\n        }\n\n        child.parentRenderGroup = null;\n\n        if (child.renderGroup)\n        {\n            this._removeRenderGroupChild(child.renderGroup);\n\n            return;\n        }\n\n        const children = child.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            this.removeChild(children[i]);\n        }\n    }\n\n    public removeChildren(children: Container[])\n    {\n        for (let i = 0; i < children.length; i++)\n        {\n            this.removeChild(children[i]);\n        }\n    }\n\n    public onChildUpdate(child: Container)\n    {\n        let childrenToUpdate = this.childrenToUpdate[child.relativeRenderGroupDepth];\n\n        if (!childrenToUpdate)\n        {\n            childrenToUpdate = this.childrenToUpdate[child.relativeRenderGroupDepth] = {\n                index: 0,\n                list: [],\n            };\n        }\n\n        childrenToUpdate.list[childrenToUpdate.index++] = child;\n    }\n\n    public updateRenderable(renderable: ViewContainer)\n    {\n        if (renderable.globalDisplayStatus < 0b111) return;\n        this.instructionSet.renderPipes[renderable.renderPipeId].updateRenderable(renderable);\n        renderable.didViewUpdate = false;\n    }\n\n    public onChildViewUpdate(child: Container)\n    {\n        this.childrenRenderablesToUpdate.list[this.childrenRenderablesToUpdate.index++] = child;\n    }\n\n    get isRenderable(): boolean\n    {\n        return (this.root.localDisplayStatus === 0b111 && this.worldAlpha > 0);\n    }\n\n    /**\n     * adding a container to the onRender list will make sure the user function\n     * passed in to the user defined 'onRender` callBack\n     * @param container - the container to add to the onRender list\n     */\n    public addOnRender(container: Container)\n    {\n        this._onRenderContainers.push(container);\n    }\n\n    public removeOnRender(container: Container)\n    {\n        this._onRenderContainers.splice(this._onRenderContainers.indexOf(container), 1);\n    }\n\n    public runOnRender(renderer: Renderer)\n    {\n        for (let i = 0; i < this._onRenderContainers.length; i++)\n        {\n            this._onRenderContainers[i]._onRender(renderer);\n        }\n    }\n\n    public destroy()\n    {\n        this.disableCacheAsTexture();\n\n        this.renderGroupParent = null;\n        this.root = null;\n        (this.childrenRenderablesToUpdate as any) = null;\n        (this.childrenToUpdate as any) = null;\n        (this.renderGroupChildren as any) = null;\n        (this._onRenderContainers as any) = null;\n        this.instructionSet = null;\n    }\n\n    public getChildren(out: Container[] = []): Container[]\n    {\n        const children = this.root.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            this._getChildren(children[i], out);\n        }\n\n        return out;\n    }\n\n    private _getChildren(container: Container, out: Container[] = []): Container[]\n    {\n        out.push(container);\n\n        if (container.renderGroup) return out;\n\n        const children = container.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            this._getChildren(children[i], out);\n        }\n\n        return out;\n    }\n\n    public invalidateMatrices()\n    {\n        this._matrixDirty = 0b111;\n    }\n\n    /**\n     * Returns the inverse of the world transform matrix.\n     * @returns {Matrix} The inverse of the world transform matrix.\n     */\n    public get inverseWorldTransform()\n    {\n        if ((this._matrixDirty & 0b001) === 0) return this._inverseWorldTransform;\n\n        this._matrixDirty &= ~0b001;\n\n        // TODO - add dirty flag\n        this._inverseWorldTransform ||= new Matrix();\n\n        return this._inverseWorldTransform\n            .copyFrom(this.worldTransform)\n            .invert();\n    }\n\n    /**\n     * Returns the inverse of the texture offset transform matrix.\n     * @returns {Matrix} The inverse of the texture offset transform matrix.\n     */\n    public get textureOffsetInverseTransform()\n    {\n        if ((this._matrixDirty & 0b010) === 0) return this._textureOffsetInverseTransform;\n\n        this._matrixDirty &= ~0b010;\n\n        this._textureOffsetInverseTransform ||= new Matrix();\n\n        // TODO shared.. bad!\n        return this._textureOffsetInverseTransform\n            .copyFrom(this.inverseWorldTransform)\n            .translate(\n                -this._textureBounds.x,\n                -this._textureBounds.y\n            );\n    }\n\n    /**\n     * Returns the inverse of the parent texture transform matrix.\n     * This is used to properly transform coordinates when rendering into cached textures.\n     * @returns {Matrix} The inverse of the parent texture transform matrix.\n     */\n    public get inverseParentTextureTransform()\n    {\n        if ((this._matrixDirty & 0b100) === 0) return this._inverseParentTextureTransform;\n\n        this._matrixDirty &= ~0b100;\n\n        const parentCacheAsTexture = this._parentCacheAsTextureRenderGroup;\n\n        if (parentCacheAsTexture)\n        {\n            this._inverseParentTextureTransform ||= new Matrix();\n\n            // Get relative transform by removing parent's world transform\n            return this._inverseParentTextureTransform\n                .copyFrom(this.worldTransform)\n                .prepend(parentCacheAsTexture.inverseWorldTransform)\n                // Offset by texture bounds\n                .translate(\n                    -parentCacheAsTexture._textureBounds.x,\n                    -parentCacheAsTexture._textureBounds.y\n                );\n        }\n\n        return this.worldTransform;\n    }\n\n    /**\n     * Returns a matrix that transforms coordinates to the correct coordinate space of the texture being rendered to.\n     * This is the texture offset inverse transform of the closest parent RenderGroup that is cached as a texture.\n     * @returns {Matrix | null} The transform matrix for the cached texture coordinate space,\n     * or null if no parent is cached as texture.\n     */\n    public get cacheToLocalTransform()\n    {\n        if (this.isCachedAsTexture)\n        {\n            return this.textureOffsetInverseTransform;\n        }\n\n        if (!this._parentCacheAsTextureRenderGroup) return null;\n\n        return this._parentCacheAsTextureRenderGroup.textureOffsetInverseTransform;\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2059, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/utils/assignWithIgnore.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/utils/assignWithIgnore.ts"],"sourcesContent":["/**\n * Assigns properties from one object to another, using an optional array of property names to ignore.\n * @param target - The target object to assign properties to.\n * @param options - The object to assign properties from.\n * @param ignore - An object of property names to ignore ({ propToIgnore: true }).\n * @category utils\n * @internal\n */\nexport function assignWithIgnore<T extends Record<string, any>>(\n    target: T,\n    options: T,\n    ignore: Record<string, boolean> = {}\n)\n{\n    for (const key in options)\n    {\n        if (!ignore[key] && options[key] !== undefined)\n        {\n            target[key] = options[key];\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;AAQO,SAAS,gBACZ,CAAA,MAAA,EACA,OACA,EAAA,MAAA,GAAkC,CAAA,CAEtC,EAAA;IACI,IAAA,MAAW,OAAO,OAClB,CAAA;QACI,IAAI,CAAC,MAAO,CAAA,GAAG,CAAA,IAAK,OAAQ,CAAA,GAAG,CAAA,KAAM,KACrC,CAAA,EAAA;YACW,MAAA,CAAA,GAAG,CAAI,GAAA,OAAA,CAAQ,GAAG,CAAA,CAAA;QAAA,CAC7B;IAAA,CACJ;AACJ","debugId":null}},
    {"offset": {"line": 2077, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/container/Container.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/container/Container.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { Color, type ColorSource } from '../../color/Color';\nimport { cullingMixin } from '../../culling/cullingMixin';\nimport { extensions } from '../../extensions/Extensions';\nimport { Matrix } from '../../maths/matrix/Matrix';\nimport { DEG_TO_RAD, RAD_TO_DEG } from '../../maths/misc/const';\nimport { ObservablePoint } from '../../maths/point/ObservablePoint';\nimport { uid } from '../../utils/data/uid';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { warn } from '../../utils/logging/warn';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { type IRenderLayer } from '../layers/RenderLayer';\nimport { cacheAsTextureMixin } from './container-mixins/cacheAsTextureMixin';\nimport { childrenHelperMixin } from './container-mixins/childrenHelperMixin';\nimport { collectRenderablesMixin } from './container-mixins/collectRenderablesMixin';\nimport { effectsMixin } from './container-mixins/effectsMixin';\nimport { findMixin } from './container-mixins/findMixin';\nimport { getFastGlobalBoundsMixin } from './container-mixins/getFastGlobalBoundsMixin';\nimport { bgr2rgb, getGlobalMixin } from './container-mixins/getGlobalMixin';\nimport { measureMixin } from './container-mixins/measureMixin';\nimport { onRenderMixin } from './container-mixins/onRenderMixin';\nimport { sortMixin } from './container-mixins/sortMixin';\nimport { toLocalGlobalMixin } from './container-mixins/toLocalGlobalMixin';\nimport { RenderGroup } from './RenderGroup';\nimport { assignWithIgnore } from './utils/assignWithIgnore';\n\nimport type { Size } from '../../maths/misc/Size';\nimport type { PointData } from '../../maths/point/PointData';\nimport type { Rectangle } from '../../maths/shapes/Rectangle';\nimport type { BLEND_MODES } from '../../rendering/renderers/shared/state/const';\nimport type { Dict } from '../../utils/types';\nimport type { Optional } from './container-mixins/measureMixin';\nimport type { DestroyOptions } from './destroyTypes';\n\n/**\n * The type of child that can be added to a {@link Container}.\n * This is a generic type that extends the {@link Container} class.\n * @category scene\n * @standard\n */\nexport type ContainerChild = Container;\n\n// as pivot and skew are the least used properties of a container, we can use this optimisation\n// to avoid allocating lots of unnecessary objects for them.\nconst defaultSkew = new ObservablePoint(null);\nconst defaultPivot = new ObservablePoint(null);\nconst defaultScale = new ObservablePoint(null, 1, 1);\nconst defaultOrigin = new ObservablePoint(null);\n\n/**\n * Events that can be emitted by a Container. These events provide lifecycle hooks and notifications\n * for container state changes.\n * @example\n * ```ts\n * import { Container, Sprite } from 'pixi.js';\n *\n * // Setup container with event listeners\n * const container = new Container();\n *\n * // Listen for child additions\n * container.on('childAdded', (child, container, index) => {\n *     console.log(`Child added at index ${index}:`, child);\n * });\n *\n * // Listen for child removals\n * container.on('childRemoved', (child, container, index) => {\n *     console.log(`Child removed from index ${index}:`, child);\n * });\n *\n * // Listen for when container is added to parent\n * container.on('added', (parent) => {\n *     console.log('Added to parent:', parent);\n * });\n *\n * // Listen for when container is removed from parent\n * container.on('removed', (parent) => {\n *     console.log('Removed from parent:', parent);\n * });\n *\n * // Listen for container destruction\n * container.on('destroyed', (container) => {\n *     console.log('Container destroyed:', container);\n * });\n * ```\n * @category scene\n * @standard\n */\nexport interface ContainerEvents<C extends ContainerChild> extends PixiMixins.ContainerEvents\n{\n    /**\n     * Emitted when this container is added to a new container.\n     * Useful for setting up parent-specific behaviors.\n     * @param container - The parent container this was added to\n     * @example\n     * ```ts\n     * const child = new Container();\n     * child.on('added', (parent) => {\n     *     console.log('Child added to parent:', parent.label);\n     * });\n     * parentContainer.addChild(child);\n     * ```\n     */\n    added: [container: Container];\n\n    /**\n     * Emitted when a child is added to this container.\n     * Useful for tracking container composition changes.\n     * @param child - The child that was added\n     * @param container - The container the child was added to (this container)\n     * @param index - The index at which the child was added\n     * @example\n     * ```ts\n     * const parent = new Container();\n     * parent.on('childAdded', (child, container, index) => {\n     *     console.log(`New child at index ${index}:`, child);\n     * });\n     * ```\n     */\n    childAdded: [child: C, container: Container, index: number];\n\n    /**\n     * Emitted when this container is removed from its parent.\n     * Useful for cleanup and state management.\n     * @param container - The parent container this was removed from\n     * @example\n     * ```ts\n     * const child = new Container();\n     * child.on('removed', (oldParent) => {\n     *     console.log('Child removed from parent:', oldParent.label);\n     * });\n     * ```\n     */\n    removed: [container: Container];\n\n    /**\n     * Emitted when a child is removed from this container.\n     * Useful for cleanup and maintaining container state.\n     * @param child - The child that was removed\n     * @param container - The container the child was removed from (this container)\n     * @param index - The index from which the child was removed\n     * @example\n     * ```ts\n     * const parent = new Container();\n     * parent.on('childRemoved', (child, container, index) => {\n     *     console.log(`Child removed from index ${index}:`, child);\n     * });\n     * ```\n     */\n    childRemoved: [child: C, container: Container, index: number];\n\n    /**\n     * Emitted when the container is destroyed.\n     * Useful for final cleanup and resource management.\n     * @param container - The container that was destroyed\n     * @example\n     * ```ts\n     * const container = new Container();\n     * container.on('destroyed', (container) => {\n     *     console.log('Container destroyed:', container.label);\n     * });\n     * ```\n     */\n    destroyed: [container: Container];\n}\n\ntype AnyEvent = {\n    // The following is a hack to allow any custom event while maintaining type safety.\n    // For some reason, the tsc compiler gets angry about error TS1023\n    // \"An index signature parameter type must be either 'string' or 'number'.\"\n    // This is really odd since ({}&string) should interpret as string, but then again\n    // there is some black magic behind why this works in the first place.\n    // Closest thing to an explanation:\n    // https://stackoverflow.com/questions/70144348/why-does-a-union-of-type-literals-and-string-cause-ide-code-completion-wh\n    //\n    // Side note, we disable @typescript-eslint/ban-types since {}&string is the only syntax that works.\n    // Nor of the Record/unknown/never alternatives work.\n    [K: ({} & string) | ({} & symbol)]: any;\n};\n\n/** @internal */\nexport const UPDATE_COLOR = 0b0001;\n/** @internal */\nexport const UPDATE_BLEND = 0b0010;\n/** @internal */\nexport const UPDATE_VISIBLE = 0b0100;\n/** @internal */\nexport const UPDATE_TRANSFORM = 0b1000;\n\n/**\n * Options for updating the transform of a container.\n * @category scene\n * @standard\n */\nexport interface UpdateTransformOptions\n{\n    x: number;\n    y: number;\n    scaleX: number;\n    scaleY: number;\n    rotation: number;\n    skewX: number;\n    skewY: number;\n    pivotX: number;\n    pivotY: number;\n    originX: number;\n    originY: number;\n}\n\n/**\n * Constructor options used for `Container` instances.\n * ```js\n * const container = new Container({\n *    position: new Point(100, 200),\n *    scale: new Point(2, 2),\n *    rotation: Math.PI / 2,\n * });\n * ```\n * @category scene\n * @standard\n * @see Container\n */\nexport interface ContainerOptions<C extends ContainerChild = ContainerChild> extends PixiMixins.ContainerOptions\n{\n    /** @see Container#isRenderGroup */\n    isRenderGroup?: boolean;\n\n    /**\n     * The blend mode to be applied to the sprite. Controls how pixels are blended when rendering.\n     *\n     * Setting to 'normal' will reset to default blending.\n     * > [!NOTE] More blend modes are available after importing the `pixi.js/advanced-blend-modes` sub-export.\n     * @example\n     * ```ts\n     * // Basic blend modes\n     * new Container({ blendMode: 'normal' }); // Default blending\n     * new Container({ blendMode: 'add' });    // Additive blending\n     * new Container({ blendMode: 'multiply' }); // Multiply colors\n     * new Container({ blendMode: 'screen' }); // Screen blend\n     * ```\n     * @default 'normal'\n     * @see {@link Container#alpha} For transparency\n     * @see {@link Container#tint} For color adjustments\n     */\n    blendMode?: BLEND_MODES;\n    /**\n     * The tint applied to the sprite.\n     *\n     * This can be any valid {@link ColorSource}.\n     * @example\n     * ```ts\n     * new Container({ tint: 0xff0000 }); // Red tint\n     * new Container({ tint: 'blue' }); // Blue tint\n     * new Container({ tint: '#00ff00' }); // Green tint\n     * new Container({ tint: 'rgb(0,0,255)' }); // Blue tint\n     * ```\n     * @default 0xFFFFFF\n     * @see {@link Container#alpha} For transparency\n     * @see {@link Container#visible} For visibility control\n     */\n    tint?: ColorSource;\n\n    /**\n     * The opacity of the object relative to its parent's opacity.\n     * Value ranges from 0 (fully transparent) to 1 (fully opaque).\n     * @example\n     * ```ts\n     * new Container({ alpha: 0.5 }); // 50% opacity\n     * new Container({ alpha: 1 }); // Fully opaque\n     * ```\n     * @default 1\n     * @see {@link Container#visible} For toggling visibility\n     * @see {@link Container#renderable} For render control\n     */\n    alpha?: number;\n    /**\n     * The angle of the object in degrees.\n     *\n     * > [!NOTE] 'rotation' and 'angle' have the same effect on a display object;\n     * > rotation is in radians, angle is in degrees.\n     * @example\n     * ```ts\n     * new Container({ angle: 45 }); // Rotate 45 degrees\n     * new Container({ angle: 90 }); // Rotate 90 degrees\n     * ```\n     */\n    angle?: number;\n    /**\n     * The array of children of this container. Each child must be a Container or extend from it.\n     *\n     * The array is read-only, but its contents can be modified using Container methods.\n     * @example\n     * ```ts\n     * new Container({\n     *    children: [\n     *        new Container(), // First child\n     *        new Container(), // Second child\n     *    ],\n     * });\n     * ```\n     * @readonly\n     * @see {@link Container#addChild} For adding children\n     * @see {@link Container#removeChild} For removing children\n     */\n    children?: C[];\n    /**\n     * The display object container that contains this display object.\n     * This represents the parent-child relationship in the display tree.\n     * @readonly\n     * @see {@link Container#addChild} For adding to a parent\n     * @see {@link Container#removeChild} For removing from parent\n     */\n    parent?: Container;\n    /**\n     * Controls whether this object can be rendered. If false the object will not be drawn,\n     * but the transform will still be updated. This is different from visible, which skips\n     * transform updates.\n     * @example\n     * ```ts\n     * new Container({ renderable: false }); // Will not be drawn, but transforms will update\n     * ```\n     * @default true\n     * @see {@link Container#visible} For skipping transform updates\n     * @see {@link Container#alpha} For transparency\n     */\n    renderable?: boolean;\n    /**\n     * The rotation of the object in radians.\n     *\n     * > [!NOTE] 'rotation' and 'angle' have the same effect on a display object;\n     * > rotation is in radians, angle is in degrees.\n     * @example\n     * ```ts\n     * new Container({ rotation: Math.PI / 4 }); // Rotate 45 degrees\n     * new Container({ rotation: Math.PI / 2 }); // Rotate 90 degrees\n     * ```\n     */\n    rotation?: number;\n    /**\n     * The scale factors of this object along the local coordinate axes.\n     *\n     * The default scale is (1, 1).\n     * @example\n     * ```ts\n     * new Container({ scale: new Point(2, 2) }); // Scale by 2x\n     * new Container({ scale: 0.5 }); // Scale by 0.5x\n     * new Container({ scale: { x: 1.5, y: 1.5 } }); // Scale by 1.5x\n     * ```\n     */\n    scale?: PointData | number;\n    /**\n     * The center of rotation, scaling, and skewing for this display object in its local space.\n     * The `position` is the projection of `pivot` in the parent's local space.\n     *\n     * By default, the pivot is the origin (0, 0).\n     * @example\n     * ```ts\n     * new Container({ pivot: new Point(100, 200) }); // Set pivot to (100, 200)\n     * new Container({ pivot: 50 }); // Set pivot to (50, 50)\n     * new Container({ pivot: { x: 150, y: 150 } }); // Set pivot to (150, 150)\n     * ```\n     */\n    pivot?: PointData | number;\n    /**\n     * The origin point around which the container rotates and scales.\n     * Unlike pivot, changing origin will not move the container's position.\n     * @example\n     * ```ts\n     * new Container({ origin: new Point(100, 100) }); // Rotate around point (100,100)\n     * new Container({ origin: 50 }); // Rotate around point (50, 50)\n     * new Container({ origin: { x: 150, y: 150 } }); // Rotate around point (150, 150)\n     * ```\n     */\n    origin?: PointData | number;\n    /**\n     * The coordinate of the object relative to the local coordinates of the parent.\n     * @example\n     * ```ts\n     * new Container({ position: new Point(100, 200) }); // Set position to (100, 200)\n     * new Container({ position: { x: 150, y: 150 } }); // Set position to (150, 150)\n     * ```\n     */\n    position?: PointData;\n    /**\n     * The skew factor for the object in radians. Skewing is a transformation that distorts\n     * the object by rotating it differently at each point, creating a non-uniform shape.\n     * @example\n     * ```ts\n     * new Container({ skew: new Point(0.1, 0.2) }); // Skew by 0.1 radians on x and 0.2 radians on y\n     * new Container({ skew: { x: 0.1, y: 0.2 } }); // Skew by 0.1 radians on x and 0.2 radians on y\n     * ```\n     * @default { x: 0, y: 0 }\n     */\n    skew?: PointData;\n    /**\n     * The visibility of the object. If false the object will not be drawn,\n     * and the transform will not be updated.\n     * @example\n     * ```ts\n     * new Container({ visible: false }); // Will not be drawn and transforms will not update\n     * new Container({ visible: true }); // Will be drawn and transforms will update\n     * ```\n     * @default true\n     * @see {@link Container#renderable} For render-only control\n     * @see {@link Container#alpha} For transparency\n     */\n    visible?: boolean;\n    /**\n     * The position of the container on the x axis relative to the local coordinates of the parent.\n     *\n     * An alias to position.x\n     * @example\n     * ```ts\n     * new Container({ x: 100 }); // Set x position to 100\n     * ```\n     */\n    x?: number;\n    /**\n     * The position of the container on the y axis relative to the local coordinates of the parent.\n     *\n     * An alias to position.y\n     * @example\n     * ```ts\n     * new Container({ y: 200 }); // Set y position to 200\n     * ```\n     */\n    y?: number;\n    /**\n     * An optional bounds area for this container. Setting this rectangle will stop the renderer\n     * from recursively measuring the bounds of each children and instead use this single boundArea.\n     *\n     * > [!IMPORTANT] This is great for optimisation! If for example you have a\n     * > 1000 spinning particles and you know they all sit within a specific bounds,\n     * > then setting it will mean the renderer will not need to measure the\n     * > 1000 children to find the bounds. Instead it will just use the bounds you set.\n     * @example\n     * ```ts\n     * const container = new Container({\n     *    boundsArea: new Rectangle(0, 0, 500, 500) // Set a fixed bounds area\n     * });\n     * ```\n     */\n    boundsArea?: Rectangle;\n}\n\n// eslint-disable-next-line requireExport/require-export-jsdoc, requireMemberAPI/require-member-api-doc\nexport interface Container<C extends ContainerChild>\n    extends PixiMixins.Container<C>, EventEmitter<ContainerEvents<C> & AnyEvent> {}\n\n/**\n * Container is a general-purpose display object that holds children. It also adds built-in support for advanced\n * rendering features like masking and filtering.\n *\n * It is the base class of all display objects that act as a container for other objects, including Graphics\n * and Sprite.\n *\n * <details id=\"transforms\">\n *\n * <summary>Transforms</summary>\n *\n * The [transform]{@link Container#localTransform} of a display object describes the projection from its\n * local coordinate space to its parent's local coordinate space. The following properties are derived\n * from the transform:\n *\n * <table>\n *   <thead>\n *     <tr>\n *       <th>Property</th>\n *       <th>Description</th>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>[pivot]{@link Container#pivot}</td>\n *       <td>\n *         Invariant under rotation, scaling, and skewing. The projection of into the parent's space of the pivot\n *         is equal to position, regardless of the other three transformations. In other words, It is the center of\n *         rotation, scaling, and skewing.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[position]{@link Container#position}</td>\n *       <td>\n *         Translation. This is the position of the [pivot]{@link Container#pivot} in the parent's local\n *         space. The default value of the pivot is the origin (0,0). If the top-left corner of your display object\n *         is (0,0) in its local space, then the position will be its top-left corner in the parent's local space.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[scale]{@link Container#scale}</td>\n *       <td>\n *         Scaling. This will stretch (or compress) the display object's projection. The scale factors are along the\n *         local coordinate axes. In other words, the display object is scaled before rotated or skewed. The center\n *         of scaling is the [pivot]{@link Container#pivot}.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[rotation]{@link Container#rotation}</td>\n *       <td>\n *          Rotation. This will rotate the display object's projection by this angle (in radians).\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[skew]{@link Container#skew}</td>\n *       <td>\n *         <p>Skewing. This can be used to deform a rectangular display object into a parallelogram.</p>\n *         <p>\n *         In PixiJS, skew has a slightly different behaviour than the conventional meaning. It can be\n *         thought of the net rotation applied to the coordinate axes (separately). For example, if \"skew.x\" is\n *         ⍺ and \"skew.y\" is β, then the line x = 0 will be rotated by ⍺ (y = -x*cot⍺) and the line y = 0 will be\n *         rotated by β (y = x*tanβ). A line y = x*tanϴ (i.e. a line at angle ϴ to the x-axis in local-space) will\n *         be rotated by an angle between ⍺ and β.\n *         </p>\n *         <p>\n *         It can be observed that if skew is applied equally to both axes, then it will be equivalent to applying\n *         a rotation. Indeed, if \"skew.x\" = -ϴ and \"skew.y\" = ϴ, it will produce an equivalent of \"rotation\" = ϴ.\n *         </p>\n *         <p>\n *         Another quite interesting observation is that \"skew.x\", \"skew.y\", rotation are commutative operations. Indeed,\n *         because rotation is essentially a careful combination of the two.\n *         </p>\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[angle]{@link Container#angle}</td>\n *       <td>Rotation. This is an alias for [rotation]{@link Container#rotation}, but in degrees.</td>\n *     </tr>\n *     <tr>\n *       <td>[x]{@link Container#x}</td>\n *       <td>Translation. This is an alias for position.x!</td>\n *     </tr>\n *     <tr>\n *       <td>[y]{@link Container#y}</td>\n *       <td>Translation. This is an alias for position.y!</td>\n *     </tr>\n *     <tr>\n *       <td>[width]{@link Container#width}</td>\n *       <td>\n *         Implemented in [Container]{@link Container}. Scaling. The width property calculates scale.x by dividing\n *         the \"requested\" width by the local bounding box width. It is indirectly an abstraction over scale.x, and there\n *         is no concept of user-defined width.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[height]{@link Container#height}</td>\n *       <td>\n *         Implemented in [Container]{@link Container}. Scaling. The height property calculates scale.y by dividing\n *         the \"requested\" height by the local bounding box height. It is indirectly an abstraction over scale.y, and there\n *         is no concept of user-defined height.\n *       </td>\n *     </tr>\n *   </tbody>\n * </table>\n * </details>\n *\n * <details id=\"alpha\">\n * <summary>Alpha</summary>\n *\n * This alpha sets a display object's **relative opacity** w.r.t its parent. For example, if the alpha of a display\n * object is 0.5 and its parent's alpha is 0.5, then it will be rendered with 25% opacity (assuming alpha is not\n * applied on any ancestor further up the chain).\n * </details>\n *\n * <details id=\"visible\">\n * <summary>Renderable vs Visible</summary>\n *\n * The `renderable` and `visible` properties can be used to prevent a display object from being rendered to the\n * screen. However, there is a subtle difference between the two. When using `renderable`, the transforms  of the display\n * object (and its children subtree) will continue to be calculated. When using `visible`, the transforms will not\n * be calculated.\n * ```ts\n * import { BlurFilter, Container, Graphics, Sprite } from 'pixi.js';\n *\n * const container = new Container();\n * const sprite = Sprite.from('https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/IaUrttj.png');\n *\n * sprite.width = 512;\n * sprite.height = 512;\n *\n * // Adds a sprite as a child to this container. As a result, the sprite will be rendered whenever the container\n * // is rendered.\n * container.addChild(sprite);\n *\n * // Blurs whatever is rendered by the container\n * container.filters = [new BlurFilter()];\n *\n * // Only the contents within a circle at the center should be rendered onto the screen.\n * container.mask = new Graphics()\n *     .beginFill(0xffffff)\n *     .drawCircle(sprite.width / 2, sprite.height / 2, Math.min(sprite.width, sprite.height) / 2)\n *     .endFill();\n * ```\n *\n * </details>\n *\n * <details id=\"renderGroup\">\n * <summary>RenderGroup</summary>\n *\n * In PixiJS v8, containers can be set to operate in 'render group mode',\n * transforming them into entities akin to a stage in traditional rendering paradigms.\n * A render group is a root renderable entity, similar to a container,\n * but it's rendered in a separate pass with its own unique set of rendering instructions.\n * This approach enhances rendering efficiency and organization, particularly in complex scenes.\n *\n * You can enable render group mode on any container using container.enableRenderGroup()\n * or by initializing a new container with the render group property set to true (new Container({isRenderGroup: true})).\n *  The method you choose depends on your specific use case and setup requirements.\n *\n * An important aspect of PixiJS’s rendering process is the automatic treatment of rendered scenes as render groups.\n * This conversion streamlines the rendering process, but understanding when and how this happens is crucial\n * to fully leverage its benefits.\n *\n * One of the key advantages of using render groups is the performance efficiency in moving them. Since transformations\n *  are applied at the GPU level, moving a render group, even one with complex and numerous children,\n * doesn't require recalculating the rendering instructions or performing transformations on each child.\n * This makes operations like panning a large game world incredibly efficient.\n *\n * However, it's crucial to note that render groups do not batch together.\n * This means that turning every container into a render group could actually slow things down,\n * as each render group is processed separately. It's best to use render groups judiciously, at a broader level,\n * rather than on a per-child basis.\n * This approach ensures you get the performance benefits without overburdening the rendering process.\n *\n * RenderGroups maintain their own set of rendering instructions,\n * ensuring that changes or updates within a render group don't affect the rendering\n * instructions of its parent or other render groups.\n *  This isolation ensures more stable and predictable rendering behavior.\n *\n * Additionally, renderGroups can be nested, allowing for powerful options in organizing different aspects of your scene.\n * This feature is particularly beneficial for separating complex game graphics from UI elements,\n * enabling intricate and efficient scene management in complex applications.\n *\n * This means that Containers have 3 levels of matrix to be mindful of:\n *\n * 1. localTransform, this is the transform of the container based on its own properties\n * 2. groupTransform, this it the transform of the container relative to the renderGroup it belongs too\n * 3. worldTransform, this is the transform of the container relative to the Scene being rendered\n * </details>\n * @category scene\n * @standard\n */\nexport class Container<C extends ContainerChild = ContainerChild> extends EventEmitter<ContainerEvents<C> & AnyEvent>\n{\n    /**\n     * Mixes all enumerable properties and methods from a source object to Container.\n     * @param source - The source of properties and methods to mix in.\n     * @deprecated since 8.8.0\n     */\n    public static mixin(source: Dict<any>): void\n    {\n        // #if _DEBUG\n        deprecation('8.8.0', 'Container.mixin is deprecated, please use extensions.mixin instead.');\n        // #endif\n        extensions.mixin(Container, source);\n    }\n\n    /**\n     * unique id for this container\n     * @internal\n     */\n    public readonly uid: number = uid('renderable');\n\n    /** @private */\n    public _updateFlags = 0b1111;\n\n    // the render group this container owns\n    /** @private */\n    public renderGroup: RenderGroup = null;\n    // the render group this container belongs to\n    /** @private */\n    public parentRenderGroup: RenderGroup = null;\n    // the index of the container in the render group\n    /** @private */\n    public parentRenderGroupIndex: number = 0;\n\n    // set to true if the container has changed. It is reset once the changes have been applied\n    // by the transform system\n    // its here to stop ensure that when things change, only one update gets registers with the transform system\n    /** @private */\n    public didChange = false;\n    // same as above, but for the renderable\n    /** @private */\n    public didViewUpdate = false;\n\n    // how deep is the container relative to its render group..\n    // unless the element is the root render group - it will be relative to its parent\n    /** @private */\n    public relativeRenderGroupDepth = 0;\n\n    /**\n     * The array of children of this container. Each child must be a Container or extend from it.\n     *\n     * The array is read-only, but its contents can be modified using Container methods.\n     * @example\n     * ```ts\n     * // Access children\n     * const firstChild = container.children[0];\n     * const lastChild = container.children[container.children.length - 1];\n     * ```\n     * @readonly\n     * @see {@link Container#addChild} For adding children\n     * @see {@link Container#removeChild} For removing children\n     */\n    public children: C[] = [];\n    /**\n     * The display object container that contains this display object.\n     * This represents the parent-child relationship in the display tree.\n     * @example\n     * ```ts\n     * // Basic parent access\n     * const parent = sprite.parent;\n     *\n     * // Walk up the tree\n     * let current = sprite;\n     * while (current.parent) {\n     *     console.log('Level up:', current.parent.constructor.name);\n     *     current = current.parent;\n     * }\n     * ```\n     * @readonly\n     * @see {@link Container#addChild} For adding to a parent\n     * @see {@link Container#removeChild} For removing from parent\n     */\n    public parent: Container | null = null;\n\n    // used internally for changing up the render order.. mainly for masks and filters\n    // TODO setting this should cause a rebuild??\n    /** @private */\n    public includeInBuild = true;\n    /** @private */\n    public measurable = true;\n    /** @private */\n    public isSimple = true;\n\n    /**\n     * The RenderLayer this container belongs to, if any.\n     * If it belongs to a RenderLayer, it will be rendered from the RenderLayer's position in the scene.\n     * @readonly\n     * @advanced\n     */\n    public parentRenderLayer: IRenderLayer;\n\n    // / /////////////Transform related props//////////////\n\n    // used by the transform system to check if a container needs to be updated that frame\n    // if the tick matches the current transform system tick, it is not updated again\n    /** @internal */\n    public updateTick = -1;\n\n    /**\n     * Current transform of the object based on local factors: position, scale, other stuff.\n     * This matrix represents the local transformation without any parent influence.\n     * @example\n     * ```ts\n     * // Basic transform access\n     * const localMatrix = sprite.localTransform;\n     * console.log(localMatrix.toString());\n     * ```\n     * @readonly\n     * @see {@link Container#worldTransform} For global transform\n     * @see {@link Container#groupTransform} For render group transform\n     */\n    public localTransform: Matrix = new Matrix();\n    /**\n     * The relative group transform is a transform relative to the render group it belongs too. It will include all parent\n     * transforms and up to the render group (think of it as kind of like a stage - but the stage can be nested).\n     * If this container is is self a render group matrix will be relative to its parent render group\n     * @readonly\n     * @advanced\n     */\n    public relativeGroupTransform: Matrix = new Matrix();\n    /**\n     * The group transform is a transform relative to the render group it belongs too.\n     * If this container is render group then this will be an identity matrix. other wise it\n     * will be the same as the relativeGroupTransform.\n     * Use this value when actually rendering things to the screen\n     * @readonly\n     * @advanced\n     */\n    public groupTransform: Matrix = this.relativeGroupTransform;\n\n    // the global transform taking into account the render group and all parents\n    private _worldTransform: Matrix;\n\n    /**\n     * Whether this object has been destroyed. If true, the object should no longer be used.\n     * After an object is destroyed, all of its functionality is disabled and references are removed.\n     * @example\n     * ```ts\n     * // Cleanup with destroy\n     * sprite.destroy();\n     * console.log(sprite.destroyed); // true\n     * ```\n     * @default false\n     * @see {@link Container#destroy} For destroying objects\n     */\n    public destroyed = false;\n\n    // transform data..\n    /**\n     * The coordinate of the object relative to the local coordinates of the parent.\n     * @internal\n     */\n    public _position: ObservablePoint = new ObservablePoint(this, 0, 0);\n\n    /**\n     * The scale factor of the object.\n     * @internal\n     */\n    public _scale: ObservablePoint = defaultScale;\n\n    /**\n     * The pivot point of the container that it rotates around.\n     * @internal\n     */\n    public _pivot: ObservablePoint = defaultPivot;\n\n    /**\n     * The origin point around which the container rotates and scales.\n     * Unlike pivot, changing origin will not move the container's position.\n     * @private\n     */\n    public _origin: ObservablePoint = defaultOrigin;\n\n    /**\n     * The skew amount, on the x and y axis.\n     * @internal\n     */\n    public _skew: ObservablePoint = defaultSkew;\n\n    /**\n     * The X-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     * @internal\n     */\n    public _cx = 1;\n\n    /**\n     * The Y-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     * @internal\n     */\n    public _sx = 0;\n\n    /**\n     * The X-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     * @internal\n     */\n    public _cy = 0;\n\n    /**\n     * The Y-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     * @internal\n     */\n    public _sy = 1;\n\n    /**\n     * The rotation amount.\n     * @internal\n     */\n    private _rotation = 0;\n\n    // / COLOR related props //////////////\n\n    // color stored as ABGR\n    /** @internal */\n    public localColor = 0xFFFFFF;\n    /** @internal */\n    public localAlpha = 1;\n\n    /** @internal */\n    public groupAlpha = 1; // A\n    /** @internal */\n    public groupColor = 0xFFFFFF; // BGR\n    /** @internal */\n    public groupColorAlpha = 0xFFFFFFFF; // ABGR\n\n    // / BLEND related props //////////////\n\n    /** @internal */\n    public localBlendMode: BLEND_MODES = 'inherit';\n    /** @internal */\n    public groupBlendMode: BLEND_MODES = 'normal';\n\n    // / VISIBILITY related props //////////////\n\n    // visibility\n    // 0b11\n    // first bit is visible, second bit is renderable\n    /**\n     * This property holds three bits: culled, visible, renderable\n     * the third bit represents culling (0 = culled, 1 = not culled) 0b100\n     * the second bit represents visibility (0 = not visible, 1 = visible) 0b010\n     * the first bit represents renderable (0 = not renderable, 1 = renderable) 0b001\n     * @internal\n     */\n    public localDisplayStatus = 0b111; // 0b11 | 0b10 | 0b01 | 0b00\n    /** @internal */\n    public globalDisplayStatus = 0b111; // 0b11 | 0b10 | 0b01 | 0b00\n\n    /** @internal */\n    public readonly renderPipeId: string;\n\n    /**\n     * An optional bounds area for this container. Setting this rectangle will stop the renderer\n     * from recursively measuring the bounds of each children and instead use this single boundArea.\n     *\n     * > [!IMPORTANT] This is great for optimisation! If for example you have a\n     * > 1000 spinning particles and you know they all sit within a specific bounds,\n     * > then setting it will mean the renderer will not need to measure the\n     * > 1000 children to find the bounds. Instead it will just use the bounds you set.\n     * @example\n     * ```ts\n     * const container = new Container();\n     * container.boundsArea = new Rectangle(0, 0, 500, 500);\n     * ```\n     */\n    public boundsArea: Rectangle;\n\n    /**\n     * A value that increments each time the containe is modified\n     * eg children added, removed etc\n     * @ignore\n     */\n    public _didContainerChangeTick = 0;\n    /**\n     * A value that increments each time the container view is modified\n     * eg texture swap, geometry change etc\n     * @ignore\n     */\n    public _didViewChangeTick = 0;\n\n    /** @internal */\n    public layerParentId: string;// = 'default';\n    /**\n     * We now use the _didContainerChangeTick and _didViewChangeTick to track changes\n     * @deprecated since 8.2.6\n     * @ignore\n     */\n    set _didChangeId(value: number)\n    {\n        this._didViewChangeTick = (value >> 12) & 0xFFF; // Extract the upper 12 bits\n        this._didContainerChangeTick = value & 0xFFF; // Extract the lower 12 bits\n    }\n    /** @ignore */\n    get _didChangeId(): number\n    {\n        return (this._didContainerChangeTick & 0xfff) | ((this._didViewChangeTick & 0xfff) << 12);\n    }\n\n    /**\n     * property that tracks if the container transform has changed\n     * @ignore\n     */\n    private _didLocalTransformChangeId = -1;\n\n    constructor(options: ContainerOptions<C> = {})\n    {\n        super();\n\n        this.effects = [];\n        assignWithIgnore(this, options, {\n            children: true,\n            parent: true,\n            effects: true,\n        });\n\n        options.children?.forEach((child) => this.addChild(child));\n        options.parent?.addChild(this);\n    }\n\n    /**\n     * Adds one or more children to the container.\n     * The children will be rendered as part of this container's display list.\n     * @example\n     * ```ts\n     * // Add a single child\n     * container.addChild(sprite);\n     *\n     * // Add multiple children\n     * container.addChild(background, player, foreground);\n     *\n     * // Add with type checking\n     * const sprite = container.addChild<Sprite>(new Sprite(texture));\n     * sprite.tint = 'red';\n     * ```\n     * @param children - The Container(s) to add to the container\n     * @returns The first child that was added\n     * @see {@link Container#removeChild} For removing children\n     * @see {@link Container#addChildAt} For adding at specific index\n     */\n    public addChild<U extends(C | IRenderLayer)[]>(...children: U): U[0]\n    {\n        // #if _DEBUG\n        if (!this.allowChildren)\n        {\n            deprecation(v8_0_0, 'addChild: Only Containers will be allowed to add children in v8.0.0');\n        }\n        // #endif\n\n        if (children.length > 1)\n        {\n            // loop through the array and add all children\n            for (let i = 0; i < children.length; i++)\n            {\n                this.addChild(children[i]);\n            }\n\n            return children[0];\n        }\n\n        const child = children[0] as C;\n\n        const renderGroup = this.renderGroup || this.parentRenderGroup;\n\n        if (child.parent === this)\n        {\n            this.children.splice(this.children.indexOf(child), 1);\n            this.children.push(child);\n\n            if (renderGroup)\n            {\n                renderGroup.structureDidChange = true;\n            }\n\n            return child;\n        }\n\n        if (child.parent)\n        {\n            // TODO Optimisation...if the parent has the same render group, this does not need to change!\n            child.parent.removeChild(child);\n        }\n\n        this.children.push(child);\n\n        if (this.sortableChildren) this.sortDirty = true;\n\n        child.parent = this;\n\n        child.didChange = true;\n\n        // TODO - Optimise this? could check what the parent has set?\n        child._updateFlags = 0b1111;\n\n        if (renderGroup)\n        {\n            renderGroup.addChild(child);\n        }\n\n        this.emit('childAdded', child, this, this.children.length - 1);\n        child.emit('added', this);\n\n        this._didViewChangeTick++;\n\n        if (child._zIndex !== 0)\n        {\n            child.depthOfChildModified();\n        }\n\n        return child;\n    }\n\n    /**\n     * Removes one or more children from the container.\n     * When removing multiple children, events will be triggered for each child in sequence.\n     * @example\n     * ```ts\n     * // Remove a single child\n     * const removed = container.removeChild(sprite);\n     *\n     * // Remove multiple children\n     * const bg = container.removeChild(background, player, userInterface);\n     *\n     * // Remove with type checking\n     * const sprite = container.removeChild<Sprite>(childSprite);\n     * sprite.texture = newTexture;\n     * ```\n     * @param children - The Container(s) to remove\n     * @returns The first child that was removed\n     * @see {@link Container#addChild} For adding children\n     * @see {@link Container#removeChildren} For removing multiple children\n     */\n    public removeChild<U extends(C | IRenderLayer)[]>(...children: U): U[0]\n    {\n        // if there is only one argument we can bypass looping through the them\n        if (children.length > 1)\n        {\n            // loop through the arguments property and remove all children\n            for (let i = 0; i < children.length; i++)\n            {\n                this.removeChild(children[i]);\n            }\n\n            return children[0];\n        }\n\n        const child = children[0] as C;\n\n        const index = this.children.indexOf(child);\n\n        if (index > -1)\n        {\n            this._didViewChangeTick++;\n\n            this.children.splice(index, 1);\n\n            if (this.renderGroup)\n            {\n                this.renderGroup.removeChild(child);\n            }\n            else if (this.parentRenderGroup)\n            {\n                this.parentRenderGroup.removeChild(child);\n            }\n\n            if (child.parentRenderLayer)\n            {\n                child.parentRenderLayer.detach(child);\n            }\n\n            child.parent = null;\n            this.emit('childRemoved', child, this, index);\n            child.emit('removed', this);\n        }\n\n        return child;\n    }\n\n    /** @ignore */\n    public _onUpdate(point?: ObservablePoint)\n    {\n        if (point)\n        {\n            //   this.updateFlags |= UPDATE_TRANSFORM;\n\n            if (point === this._skew)\n            {\n                this._updateSkew();\n            }\n        }\n\n        this._didContainerChangeTick++;\n\n        if (this.didChange) return;\n        this.didChange = true;\n\n        if (this.parentRenderGroup)\n        {\n            this.parentRenderGroup.onChildUpdate(this);\n        }\n    }\n\n    set isRenderGroup(value: boolean)\n    {\n        if (!!this.renderGroup === value) return;\n\n        if (value)\n        {\n            this.enableRenderGroup();\n        }\n        else\n        {\n            this.disableRenderGroup();\n        }\n    }\n\n    /**\n     * Returns true if this container is a render group.\n     * This means that it will be rendered as a separate pass, with its own set of instructions\n     * @advanced\n     */\n    get isRenderGroup(): boolean\n    {\n        return !!this.renderGroup;\n    }\n\n    /**\n     * Calling this enables a render group for this container.\n     * This means it will be rendered as a separate set of instructions.\n     * The transform of the container will also be handled on the GPU rather than the CPU.\n     * @advanced\n     */\n    public enableRenderGroup(): void\n    {\n        if (this.renderGroup) return;\n\n        const parentRenderGroup = this.parentRenderGroup;\n\n        parentRenderGroup?.removeChild(this);\n\n        this.renderGroup = BigPool.get(RenderGroup, this);\n\n        // this group matrix will now be an identity matrix,\n        // as its own transform will be passed to the GPU\n        this.groupTransform = Matrix.IDENTITY;\n\n        parentRenderGroup?.addChild(this);\n\n        this._updateIsSimple();\n    }\n\n    /**\n     * This will disable the render group for this container.\n     * @advanced\n     */\n    public disableRenderGroup(): void\n    {\n        if (!this.renderGroup) return;\n\n        const parentRenderGroup = this.parentRenderGroup;\n\n        parentRenderGroup?.removeChild(this);\n\n        BigPool.return(this.renderGroup);\n\n        this.renderGroup = null;\n        this.groupTransform = this.relativeGroupTransform;\n\n        parentRenderGroup?.addChild(this);\n\n        this._updateIsSimple();\n    }\n\n    /** @ignore */\n    public _updateIsSimple()\n    {\n        this.isSimple = !(this.renderGroup) && (this.effects.length === 0);\n    }\n\n    /**\n     * Current transform of the object based on world (parent) factors.\n     *\n     * This matrix represents the absolute transformation in the scene graph.\n     * @example\n     * ```ts\n     * // Get world position\n     * const worldPos = container.worldTransform;\n     * console.log(`World position: (${worldPos.tx}, ${worldPos.ty})`);\n     * ```\n     * @readonly\n     * @see {@link Container#localTransform} For local space transform\n     */\n    get worldTransform()\n    {\n        this._worldTransform ||= new Matrix();\n\n        if (this.renderGroup)\n        {\n            this._worldTransform.copyFrom(this.renderGroup.worldTransform);\n        }\n        else if (this.parentRenderGroup)\n        {\n            this._worldTransform.appendFrom(this.relativeGroupTransform, this.parentRenderGroup.worldTransform);\n        }\n\n        return this._worldTransform;\n    }\n\n    /**\n     * The position of the container on the x axis relative to the local coordinates of the parent.\n     *\n     * An alias to position.x\n     * @example\n     * ```ts\n     * // Basic position\n     * container.x = 100;\n     * ```\n     */\n    get x(): number\n    {\n        return this._position.x;\n    }\n\n    set x(value: number)\n    {\n        this._position.x = value;\n    }\n\n    /**\n     * The position of the container on the y axis relative to the local coordinates of the parent.\n     *\n     * An alias to position.y\n     * @example\n     * ```ts\n     * // Basic position\n     * container.y = 200;\n     * ```\n     */\n    get y(): number\n    {\n        return this._position.y;\n    }\n\n    set y(value: number)\n    {\n        this._position.y = value;\n    }\n\n    /**\n     * The coordinate of the object relative to the local coordinates of the parent.\n     * @example\n     * ```ts\n     * // Basic position setting\n     * container.position.set(100, 200);\n     * container.position.set(100); // Sets both x and y to 100\n     * // Using point data\n     * container.position = { x: 50, y: 75 };\n     * ```\n     * @since 4.0.0\n     */\n    get position(): ObservablePoint\n    {\n        return this._position;\n    }\n\n    set position(value: PointData)\n    {\n        this._position.copyFrom(value);\n    }\n\n    /**\n     * The rotation of the object in radians.\n     *\n     * > [!NOTE] 'rotation' and 'angle' have the same effect on a display object;\n     * > rotation is in radians, angle is in degrees.\n     * @example\n     * ```ts\n     * // Basic rotation\n     * container.rotation = Math.PI / 4; // 45 degrees\n     *\n     * // Convert from degrees\n     * const degrees = 45;\n     * container.rotation = degrees * Math.PI / 180;\n     *\n     * // Rotate around center\n     * container.pivot.set(container.width / 2, container.height / 2);\n     * container.rotation = Math.PI; // 180 degrees\n     *\n     * // Rotate around center with origin\n     * container.origin.set(container.width / 2, container.height / 2);\n     * container.rotation = Math.PI; // 180 degrees\n     * ```\n     */\n    get rotation(): number\n    {\n        return this._rotation;\n    }\n\n    set rotation(value: number)\n    {\n        if (this._rotation !== value)\n        {\n            this._rotation = value;\n            this._onUpdate(this._skew);\n        }\n    }\n\n    /**\n     * The angle of the object in degrees.\n     *\n     * > [!NOTE] 'rotation' and 'angle' have the same effect on a display object;\n     * > rotation is in radians, angle is in degrees.\n     * @example\n     * ```ts\n     * // Basic angle rotation\n     * sprite.angle = 45; // 45 degrees\n     *\n     * // Rotate around center\n     * sprite.pivot.set(sprite.width / 2, sprite.height / 2);\n     * sprite.angle = 180; // Half rotation\n     *\n     * // Rotate around center with origin\n     * sprite.origin.set(sprite.width / 2, sprite.height / 2);\n     * sprite.angle = 180; // Half rotation\n     *\n     * // Reset rotation\n     * sprite.angle = 0;\n     * ```\n     */\n    get angle(): number\n    {\n        return this.rotation * RAD_TO_DEG;\n    }\n\n    set angle(value: number)\n    {\n        this.rotation = value * DEG_TO_RAD;\n    }\n\n    /**\n     * The center of rotation, scaling, and skewing for this display object in its local space.\n     * The `position` is the projection of `pivot` in the parent's local space.\n     *\n     * By default, the pivot is the origin (0, 0).\n     * @example\n     * ```ts\n     * // Rotate around center\n     * container.pivot.set(container.width / 2, container.height / 2);\n     * container.rotation = Math.PI; // Rotates around center\n     * ```\n     * @since 4.0.0\n     */\n    get pivot(): ObservablePoint\n    {\n        if (this._pivot === defaultPivot)\n        {\n            this._pivot = new ObservablePoint(this, 0, 0);\n        }\n\n        return this._pivot;\n    }\n\n    set pivot(value: PointData | number)\n    {\n        if (this._pivot === defaultPivot)\n        {\n            this._pivot = new ObservablePoint(this, 0, 0);\n\n            // #if _DEBUG\n            if (this._origin !== defaultOrigin)\n            {\n                // eslint-disable-next-line max-len\n                warn(`Setting both a pivot and origin on a Container is not recommended. This can lead to unexpected behavior if not handled carefully.`);\n            }\n            // #endif\n        }\n\n        typeof value === 'number' ? this._pivot.set(value) : this._pivot.copyFrom(value);\n    }\n\n    /**\n     * The skew factor for the object in radians. Skewing is a transformation that distorts\n     * the object by rotating it differently at each point, creating a non-uniform shape.\n     * @example\n     * ```ts\n     * // Basic skewing\n     * container.skew.set(0.5, 0); // Skew horizontally\n     * container.skew.set(0, 0.5); // Skew vertically\n     *\n     * // Skew with point data\n     * container.skew = { x: 0.3, y: 0.3 }; // Diagonal skew\n     *\n     * // Reset skew\n     * container.skew.set(0, 0);\n     *\n     * // Animate skew\n     * app.ticker.add(() => {\n     *     // Create wave effect\n     *     container.skew.x = Math.sin(Date.now() / 1000) * 0.3;\n     * });\n     *\n     * // Combine with rotation\n     * container.rotation = Math.PI / 4; // 45 degrees\n     * container.skew.set(0.2, 0.2); // Skew the rotated object\n     * ```\n     * @since 4.0.0\n     * @type {ObservablePoint} Point-like object with x/y properties in radians\n     * @default {x: 0, y: 0}\n     */\n    get skew(): ObservablePoint\n    {\n        if (this._skew === defaultSkew)\n        {\n            this._skew = new ObservablePoint(this, 0, 0);\n        }\n\n        return this._skew;\n    }\n\n    set skew(value: PointData)\n    {\n        if (this._skew === defaultSkew)\n        {\n            this._skew = new ObservablePoint(this, 0, 0);\n        }\n\n        this._skew.copyFrom(value);\n    }\n\n    /**\n     * The scale factors of this object along the local coordinate axes.\n     *\n     * The default scale is (1, 1).\n     * @example\n     * ```ts\n     * // Basic scaling\n     * container.scale.set(2, 2); // Scales to double size\n     * container.scale.set(2); // Scales uniformly to double size\n     * container.scale = 2; // Scales uniformly to double size\n     * // Scale to a specific width and height\n     * container.setSize(200, 100); // Sets width to 200 and height to 100\n     * ```\n     * @since 4.0.0\n     */\n    get scale(): ObservablePoint\n    {\n        if (this._scale === defaultScale)\n        {\n            this._scale = new ObservablePoint(this, 1, 1);\n        }\n\n        return this._scale;\n    }\n\n    set scale(value: PointData | number | string)\n    {\n        if (this._scale === defaultScale)\n        {\n            this._scale = new ObservablePoint(this, 0, 0);\n        }\n\n        if (typeof value === 'string')\n        {\n            value = parseFloat(value);\n        }\n\n        typeof value === 'number' ? this._scale.set(value) : this._scale.copyFrom(value);\n    }\n\n    /**\n     * @experimental\n     * The origin point around which the container rotates and scales without affecting its position.\n     * Unlike pivot, changing the origin will not move the container's position.\n     * @example\n     * ```ts\n     * // Rotate around center point\n     * container.origin.set(container.width / 2, container.height / 2);\n     * container.rotation = Math.PI; // Rotates around center\n     *\n     * // Reset origin\n     * container.origin.set(0, 0);\n     * ```\n     */\n    get origin(): ObservablePoint\n    {\n        if (this._origin === defaultOrigin)\n        {\n            this._origin = new ObservablePoint(this, 0, 0);\n        }\n\n        return this._origin;\n    }\n\n    set origin(value: PointData | number)\n    {\n        if (this._origin === defaultOrigin)\n        {\n            this._origin = new ObservablePoint(this, 0, 0);\n\n            // #if _DEBUG\n            if (this._pivot !== defaultPivot)\n            {\n                // eslint-disable-next-line max-len\n                warn(`Setting both a pivot and origin on a Container is not recommended. This can lead to unexpected behavior if not handled carefully.`);\n            }\n            // #endif\n        }\n\n        typeof value === 'number' ? this._origin.set(value) : this._origin.copyFrom(value);\n    }\n\n    /**\n     * The width of the Container, setting this will actually modify the scale to achieve the value set.\n     * > [!NOTE] Changing the width will adjust the scale.x property of the container while maintaining its aspect ratio.\n     * > [!NOTE] If you want to set both width and height at the same time, use {@link Container#setSize}\n     * as it is more optimized by not recalculating the local bounds twice.\n     * @example\n     * ```ts\n     * // Basic width setting\n     * container.width = 100;\n     * // Optimized width setting\n     * container.setSize(100, 100);\n     * ```\n     */\n    get width(): number\n    {\n        return Math.abs(this.scale.x * this.getLocalBounds().width);\n    }\n\n    set width(value: number)\n    {\n        const localWidth = this.getLocalBounds().width;\n\n        this._setWidth(value, localWidth);\n    }\n\n    /**\n     * The height of the Container,\n     * > [!NOTE] Changing the height will adjust the scale.y property of the container while maintaining its aspect ratio.\n     * > [!NOTE] If you want to set both width and height at the same time, use {@link Container#setSize}\n     * as it is more optimized by not recalculating the local bounds twice.\n     * @example\n     * ```ts\n     * // Basic height setting\n     * container.height = 200;\n     * // Optimized height setting\n     * container.setSize(100, 200);\n     * ```\n     */\n    get height(): number\n    {\n        return Math.abs(this.scale.y * this.getLocalBounds().height);\n    }\n\n    set height(value: number)\n    {\n        const localHeight = this.getLocalBounds().height;\n\n        this._setHeight(value, localHeight);\n    }\n\n    /**\n     * Retrieves the size of the container as a [Size]{@link Size} object.\n     *\n     * This is faster than get the width and height separately.\n     * @example\n     * ```ts\n     * // Basic size retrieval\n     * const size = container.getSize();\n     * console.log(`Size: ${size.width}x${size.height}`);\n     *\n     * // Reuse existing size object\n     * const reuseSize = { width: 0, height: 0 };\n     * container.getSize(reuseSize);\n     * ```\n     * @param out - Optional object to store the size in.\n     * @returns The size of the container.\n     */\n    public getSize(out?: Size): Size\n    {\n        if (!out)\n        {\n            out = {} as Size;\n        }\n\n        const bounds = this.getLocalBounds();\n\n        out.width = Math.abs(this.scale.x * bounds.width);\n        out.height = Math.abs(this.scale.y * bounds.height);\n\n        return out;\n    }\n\n    /**\n     * Sets the size of the container to the specified width and height.\n     * This is more efficient than setting width and height separately as it only recalculates bounds once.\n     * @example\n     * ```ts\n     * // Basic size setting\n     * container.setSize(100, 200);\n     *\n     * // Set uniform size\n     * container.setSize(100); // Sets both width and height to 100\n     * ```\n     * @param value - This can be either a number or a [Size]{@link Size} object.\n     * @param height - The height to set. Defaults to the value of `width` if not provided.\n     */\n    public setSize(value: number | Optional<Size, 'height'>, height?: number)\n    {\n        const size = this.getLocalBounds();\n\n        if (typeof value === 'object')\n        {\n            height = value.height ?? value.width;\n            value = value.width;\n        }\n        else\n        {\n            height ??= value;\n        }\n\n        value !== undefined && this._setWidth(value, size.width);\n        height !== undefined && this._setHeight(height, size.height);\n    }\n\n    /** Called when the skew or the rotation changes. */\n    private _updateSkew(): void\n    {\n        const rotation = this._rotation;\n        const skew = this._skew;\n\n        this._cx = Math.cos(rotation + skew._y);\n        this._sx = Math.sin(rotation + skew._y);\n        this._cy = -Math.sin(rotation - skew._x); // cos, added PI/2\n        this._sy = Math.cos(rotation - skew._x); // sin, added PI/2\n    }\n\n    /**\n     * Updates the transform properties of the container.\n     * Allows partial updates of transform properties for optimized manipulation.\n     * @example\n     * ```ts\n     * // Basic transform update\n     * container.updateTransform({\n     *     x: 100,\n     *     y: 200,\n     *     rotation: Math.PI / 4\n     * });\n     *\n     * // Scale and rotate around center\n     * sprite.updateTransform({\n     *     pivotX: sprite.width / 2,\n     *     pivotY: sprite.height / 2,\n     *     scaleX: 2,\n     *     scaleY: 2,\n     *     rotation: Math.PI\n     * });\n     *\n     * // Update position only\n     * button.updateTransform({\n     *     x: button.x + 10, // Move right\n     *     y: button.y      // Keep same y\n     * });\n     * ```\n     * @param opts - Transform options to update\n     * @param opts.x - The x position\n     * @param opts.y - The y position\n     * @param opts.scaleX - The x-axis scale factor\n     * @param opts.scaleY - The y-axis scale factor\n     * @param opts.rotation - The rotation in radians\n     * @param opts.skewX - The x-axis skew factor\n     * @param opts.skewY - The y-axis skew factor\n     * @param opts.pivotX - The x-axis pivot point\n     * @param opts.pivotY - The y-axis pivot point\n     * @returns This container, for chaining\n     * @see {@link Container#setFromMatrix} For matrix-based transforms\n     * @see {@link Container#position} For direct position access\n     */\n    public updateTransform(opts: Partial<UpdateTransformOptions>): this\n    {\n        this.position.set(\n            typeof opts.x === 'number' ? opts.x : this.position.x,\n            typeof opts.y === 'number' ? opts.y : this.position.y\n        );\n        this.scale.set(\n            typeof opts.scaleX === 'number' ? opts.scaleX || 1 : this.scale.x,\n            typeof opts.scaleY === 'number' ? opts.scaleY || 1 : this.scale.y\n        );\n        this.rotation = typeof opts.rotation === 'number' ? opts.rotation : this.rotation;\n        this.skew.set(\n            typeof opts.skewX === 'number' ? opts.skewX : this.skew.x,\n            typeof opts.skewY === 'number' ? opts.skewY : this.skew.y\n        );\n        this.pivot.set(\n            typeof opts.pivotX === 'number' ? opts.pivotX : this.pivot.x,\n            typeof opts.pivotY === 'number' ? opts.pivotY : this.pivot.y\n        );\n        this.origin.set(\n            typeof opts.originX === 'number' ? opts.originX : this.origin.x,\n            typeof opts.originY === 'number' ? opts.originY : this.origin.y\n        );\n\n        return this;\n    }\n\n    /**\n     * Updates the local transform properties by decomposing the given matrix.\n     * Extracts position, scale, rotation, and skew from a transformation matrix.\n     * @example\n     * ```ts\n     * // Basic matrix transform\n     * const matrix = new Matrix()\n     *     .translate(100, 100)\n     *     .rotate(Math.PI / 4)\n     *     .scale(2, 2);\n     *\n     * container.setFromMatrix(matrix);\n     *\n     * // Copy transform from another container\n     * const source = new Container();\n     * source.position.set(100, 100);\n     * source.rotation = Math.PI / 2;\n     *\n     * target.setFromMatrix(source.localTransform);\n     *\n     * // Reset transform\n     * container.setFromMatrix(Matrix.IDENTITY);\n     * ```\n     * @param matrix - The matrix to use for updating the transform\n     * @see {@link Container#updateTransform} For property-based updates\n     * @see {@link Matrix#decompose} For matrix decomposition details\n     */\n    public setFromMatrix(matrix: Matrix): void\n    {\n        matrix.decompose(this);\n    }\n\n    /** Updates the local transform. */\n    public updateLocalTransform(): void\n    {\n        const localTransformChangeId = this._didContainerChangeTick;\n\n        if (this._didLocalTransformChangeId === localTransformChangeId) return;\n\n        this._didLocalTransformChangeId = localTransformChangeId;\n\n        const lt = this.localTransform;\n        const scale = this._scale;\n        const pivot = this._pivot;\n        const origin = this._origin;\n        const position = this._position;\n\n        const sx = scale._x;\n        const sy = scale._y;\n\n        const px = pivot._x;\n        const py = pivot._y;\n\n        const ox = -origin._x;\n        const oy = -origin._y;\n\n        // get the matrix values of the container based on its this properties..\n        lt.a = this._cx * sx;\n        lt.b = this._sx * sx;\n        lt.c = this._cy * sy;\n        lt.d = this._sy * sy;\n\n        lt.tx = position._x - ((px * lt.a) + (py * lt.c)) // Pivot offset\n            + ((ox * lt.a) + (oy * lt.c)) // Origin offset for rotation and scaling\n            - ox; // Remove origin to maintain position\n        lt.ty = position._y - ((px * lt.b) + (py * lt.d)) // Pivot offset\n            + ((ox * lt.b) + (oy * lt.d)) // Origin offset for rotation and scaling\n            - oy; // Remove origin to maintain position\n    }\n\n    // / ///// color related stuff\n\n    set alpha(value: number)\n    {\n        if (value === this.localAlpha) return;\n\n        this.localAlpha = value;\n\n        this._updateFlags |= UPDATE_COLOR;\n\n        this._onUpdate();\n    }\n\n    /**\n     * The opacity of the object relative to its parent's opacity.\n     * Value ranges from 0 (fully transparent) to 1 (fully opaque).\n     * @example\n     * ```ts\n     * // Basic transparency\n     * sprite.alpha = 0.5; // 50% opacity\n     *\n     * // Inherited opacity\n     * container.alpha = 0.5;\n     * const child = new Sprite(texture);\n     * child.alpha = 0.5;\n     * container.addChild(child);\n     * // child's effective opacity is 0.25 (0.5 * 0.5)\n     * ```\n     * @default 1\n     * @see {@link Container#visible} For toggling visibility\n     * @see {@link Container#renderable} For render control\n     */\n    get alpha(): number\n    {\n        return this.localAlpha;\n    }\n\n    set tint(value: ColorSource)\n    {\n        const tempColor = Color.shared.setValue(value ?? 0xFFFFFF);\n        const bgr = tempColor.toBgrNumber();\n\n        if (bgr === this.localColor) return;\n\n        this.localColor = bgr;\n\n        this._updateFlags |= UPDATE_COLOR;\n\n        this._onUpdate();\n    }\n\n    /**\n     * The tint applied to the sprite.\n     *\n     * This can be any valid {@link ColorSource}.\n     * @example\n     * ```ts\n     * // Basic color tinting\n     * container.tint = 0xff0000; // Red tint\n     * container.tint = 'red';    // Same as above\n     * container.tint = '#00ff00'; // Green\n     * container.tint = 'rgb(0,0,255)'; // Blue\n     *\n     * // Remove tint\n     * container.tint = 0xffffff; // White = no tint\n     * container.tint = null;     // Also removes tint\n     * ```\n     * @default 0xFFFFFF\n     * @see {@link Container#alpha} For transparency\n     * @see {@link Container#visible} For visibility control\n     */\n    get tint(): number\n    {\n        // convert bgr to rgb..\n        return bgr2rgb(this.localColor);\n    }\n\n    // / //////////////// blend related stuff\n\n    set blendMode(value: BLEND_MODES)\n    {\n        if (this.localBlendMode === value) return;\n        if (this.parentRenderGroup)\n        {\n            this.parentRenderGroup.structureDidChange = true;\n        }\n\n        this._updateFlags |= UPDATE_BLEND;\n\n        this.localBlendMode = value;\n\n        this._onUpdate();\n    }\n\n    /**\n     * The blend mode to be applied to the sprite. Controls how pixels are blended when rendering.\n     *\n     * Setting to 'normal' will reset to default blending.\n     * > [!NOTE] More blend modes are available after importing the `pixi.js/advanced-blend-modes` sub-export.\n     * @example\n     * ```ts\n     * // Basic blend modes\n     * sprite.blendMode = 'add';        // Additive blending\n     * sprite.blendMode = 'multiply';   // Multiply colors\n     * sprite.blendMode = 'screen';     // Screen blend\n     *\n     * // Reset blend mode\n     * sprite.blendMode = 'normal';     // Normal blending\n     * ```\n     * @default 'normal'\n     * @see {@link Container#alpha} For transparency\n     * @see {@link Container#tint} For color adjustments\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this.localBlendMode;\n    }\n\n    // / ///////// VISIBILITY / RENDERABLE /////////////////\n\n    /**\n     * The visibility of the object. If false the object will not be drawn,\n     * and the transform will not be updated.\n     * @example\n     * ```ts\n     * // Basic visibility toggle\n     * sprite.visible = false; // Hide sprite\n     * sprite.visible = true;  // Show sprite\n     * ```\n     * @default true\n     * @see {@link Container#renderable} For render-only control\n     * @see {@link Container#alpha} For transparency\n     */\n    get visible()\n    {\n        return !!(this.localDisplayStatus & 0b010);\n    }\n\n    set visible(value: boolean)\n    {\n        const valueNumber = value ? 0b010 : 0;\n\n        if ((this.localDisplayStatus & 0b010) === valueNumber) return;\n\n        if (this.parentRenderGroup)\n        {\n            this.parentRenderGroup.structureDidChange = true;\n        }\n\n        this._updateFlags |= UPDATE_VISIBLE;\n\n        this.localDisplayStatus ^= 0b010;\n\n        this._onUpdate();\n    }\n\n    /** @ignore */\n    get culled()\n    {\n        return !(this.localDisplayStatus & 0b100);\n    }\n\n    /** @ignore */\n    set culled(value: boolean)\n    {\n        const valueNumber = value ? 0 : 0b100;\n\n        if ((this.localDisplayStatus & 0b100) === valueNumber) return;\n\n        if (this.parentRenderGroup)\n        {\n            this.parentRenderGroup.structureDidChange = true;\n        }\n\n        this._updateFlags |= UPDATE_VISIBLE;\n        this.localDisplayStatus ^= 0b100;\n\n        this._onUpdate();\n    }\n\n    /**\n     * Controls whether this object can be rendered. If false the object will not be drawn,\n     * but the transform will still be updated. This is different from visible, which skips\n     * transform updates.\n     * @example\n     * ```ts\n     * // Basic render control\n     * sprite.renderable = false; // Skip rendering\n     * sprite.renderable = true;  // Enable rendering\n     * ```\n     * @default true\n     * @see {@link Container#visible} For skipping transform updates\n     * @see {@link Container#alpha} For transparency\n     */\n    get renderable()\n    {\n        return !!(this.localDisplayStatus & 0b001);\n    }\n\n    set renderable(value: boolean)\n    {\n        const valueNumber = value ? 0b001 : 0;\n\n        if ((this.localDisplayStatus & 0b001) === valueNumber) return;\n\n        this._updateFlags |= UPDATE_VISIBLE;\n        this.localDisplayStatus ^= 0b001;\n\n        if (this.parentRenderGroup)\n        {\n            this.parentRenderGroup.structureDidChange = true;\n        }\n\n        this._onUpdate();\n    }\n\n    /**\n     * Whether or not the object should be rendered.\n     * @advanced\n     */\n    get isRenderable(): boolean\n    {\n        return (this.localDisplayStatus === 0b111 && this.groupAlpha > 0);\n    }\n\n    /**\n     * Removes all internal references and listeners as well as removes children from the display list.\n     * Do not use a Container after calling `destroy`.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @example\n     * ```ts\n     * container.destroy();\n     * container.destroy(true);\n     * container.destroy({ children: true });\n     * container.destroy({ children: true, texture: true, textureSource: true });\n     * ```\n     */\n    public destroy(options: DestroyOptions = false): void\n    {\n        if (this.destroyed) return;\n        this.destroyed = true;\n\n        // remove children is faster than removeChild..\n\n        let oldChildren: ContainerChild[];\n\n        // we add this check as calling removeChildren on particle container will throw an error\n        // As we know it does cannot have any children, check before calling the function.\n        if (this.children.length)\n        {\n            oldChildren = this.removeChildren(0, this.children.length);\n        }\n\n        this.removeFromParent();\n        this.parent = null;\n        this._maskEffect = null;\n        this._filterEffect = null;\n        this.effects = null;\n        this._position = null;\n        this._scale = null;\n        this._pivot = null;\n        this._origin = null;\n        this._skew = null;\n\n        this.emit('destroyed', this);\n\n        this.removeAllListeners();\n\n        const destroyChildren = typeof options === 'boolean' ? options : options?.children;\n\n        if (destroyChildren && oldChildren)\n        {\n            for (let i = 0; i < oldChildren.length; ++i)\n            {\n                oldChildren[i].destroy(options);\n            }\n        }\n\n        this.renderGroup?.destroy();\n        this.renderGroup = null;\n    }\n}\n\nextensions.mixin(\n    Container,\n    childrenHelperMixin,\n    getFastGlobalBoundsMixin,\n    toLocalGlobalMixin,\n    onRenderMixin,\n    measureMixin,\n    effectsMixin,\n    findMixin,\n    sortMixin,\n    cullingMixin,\n    cacheAsTextureMixin,\n    getGlobalMixin,\n    collectRenderablesMixin,\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3180, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/view/ViewContainer.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/view/ViewContainer.ts"],"sourcesContent":["import { type InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport { type RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport { type Renderer } from '../../rendering/renderers/types';\nimport { Bounds } from '../container/bounds/Bounds';\nimport { Container, type ContainerOptions } from '../container/Container';\nimport { type IRenderLayer } from '../layers/RenderLayer';\n\nimport type { PointData } from '../../maths/point/PointData';\nimport type { View } from '../../rendering/renderers/shared/view/View';\nimport type { DestroyOptions } from '../container/destroyTypes';\n\n/** @internal */\nexport interface GPUData\n{\n    destroy: () => void;\n}\n\n/**\n * Options for the construction of a ViewContainer.\n * @category scene\n * @advanced\n */\nexport interface ViewContainerOptions extends ContainerOptions, PixiMixins.ViewContainerOptions {}\n// eslint-disable-next-line requireExport/require-export-jsdoc, requireMemberAPI/require-member-api-doc\nexport interface ViewContainer<GPU_DATA extends GPUData = any> extends PixiMixins.ViewContainer, Container\n{\n    // eslint-disable-next-line requireMemberAPI/require-member-api-doc\n    _gpuData: Record<number, GPU_DATA>;\n}\n\n/**\n * A ViewContainer is a type of container that represents a view.\n * This view can be a Sprite, a Graphics object, or any other object that can be rendered.\n * This class is abstract and should not be used directly.\n * @category scene\n * @advanced\n */\nexport abstract class ViewContainer<GPU_DATA extends GPUData = any> extends Container implements View\n{\n    /** @internal */\n    public override readonly renderPipeId: string;\n    /** @internal */\n    public readonly canBundle = true;\n    /** @internal */\n    public override allowChildren = false;\n\n    /** @internal */\n    public _roundPixels: 0 | 1 = 0;\n    /** @internal */\n    public _lastUsed = -1;\n\n    /** @internal */\n    public _gpuData: Record<number, GPU_DATA> = Object.create(null);\n\n    protected _bounds: Bounds = new Bounds(0, 1, 0, 0);\n    protected _boundsDirty = true;\n\n    /**\n     * The local bounds of the view in its own coordinate space.\n     * Bounds are automatically updated when the view's content changes.\n     * @example\n     * ```ts\n     * // Get bounds dimensions\n     * const bounds = view.bounds;\n     * console.log(`Width: ${bounds.maxX - bounds.minX}`);\n     * console.log(`Height: ${bounds.maxY - bounds.minY}`);\n     * ```\n     * @returns The rectangular bounds of the view\n     * @see {@link Bounds} For bounds operations\n     */\n    public get bounds()\n    {\n        if (!this._boundsDirty) return this._bounds;\n\n        this.updateBounds();\n\n        this._boundsDirty = false;\n\n        return this._bounds;\n    }\n\n    /** @private */\n    protected abstract updateBounds(): void;\n\n    /**\n     * Whether or not to round the x/y position of the sprite.\n     * @example\n     * ```ts\n     * // Enable pixel rounding for crisp rendering\n     * view.roundPixels = true;\n     * ```\n     * @default false\n     */\n    get roundPixels()\n    {\n        return !!this._roundPixels;\n    }\n\n    set roundPixels(value: boolean)\n    {\n        this._roundPixels = value ? 1 : 0;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor(options: ViewContainerOptions)\n    {\n        super(options);\n    }\n\n    /**\n     * Checks if the object contains the given point in local coordinates.\n     * Uses the view's bounds for hit testing.\n     * @example\n     * ```ts\n     * // Basic point check\n     * const localPoint = { x: 50, y: 25 };\n     * const contains = view.containsPoint(localPoint);\n     * console.log('Point is inside:', contains);\n     * ```\n     * @param point - The point to check in local coordinates\n     * @returns True if the point is within the view's bounds\n     * @see {@link ViewContainer#bounds} For the bounds used in hit testing\n     * @see {@link Container#toLocal} For converting global coordinates to local\n     */\n    public containsPoint(point: PointData)\n    {\n        const bounds = this.bounds;\n        const { x, y } = point;\n\n        return (x >= bounds.minX\n            && x <= bounds.maxX\n            && y >= bounds.minY\n            && y <= bounds.maxY);\n    }\n\n    /** @private */\n    public abstract batched: boolean;\n\n    /** @private */\n    protected onViewUpdate()\n    {\n        this._didViewChangeTick++;\n\n        this._boundsDirty = true;\n\n        if (this.didViewUpdate) return;\n        this.didViewUpdate = true;\n\n        const renderGroup = this.renderGroup || this.parentRenderGroup;\n\n        if (renderGroup)\n        {\n            renderGroup.onChildViewUpdate(this);\n        }\n    }\n\n    public override destroy(options?: DestroyOptions): void\n    {\n        super.destroy(options);\n\n        this._bounds = null;\n\n        for (const key in this._gpuData)\n        {\n            (this._gpuData[key] as GPU_DATA).destroy?.();\n        }\n\n        this._gpuData = null;\n    }\n\n    /**\n     * Collects renderables for the view container.\n     * @param instructionSet - The instruction set to collect renderables for.\n     * @param renderer - The renderer to collect renderables for.\n     * @param currentLayer - The current render layer.\n     * @internal\n     */\n    public override collectRenderablesSimple(\n        instructionSet: InstructionSet,\n        renderer: Renderer,\n        currentLayer: IRenderLayer,\n    ): void\n    {\n        const { renderPipes } = renderer;\n\n        renderPipes.blendMode.pushBlendMode(this, this.groupBlendMode, instructionSet);\n\n        const rp = renderPipes as unknown as Record<string, RenderPipe>;\n\n        rp[this.renderPipeId].addRenderable(this, instructionSet);\n\n        this.didViewUpdate = false;\n\n        const children = this.children;\n        const length = children.length;\n\n        for (let i = 0; i < length; i++)\n        {\n            children[i].collectRenderables(instructionSet, renderer, currentLayer);\n        }\n        renderPipes.blendMode.popBlendMode(instructionSet);\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3296, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/sprite/Sprite.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/sprite/Sprite.ts"],"sourcesContent":["import { ObservablePoint } from '../../maths/point/ObservablePoint';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds';\nimport { deprecation } from '../../utils/logging/deprecation';\nimport { ViewContainer, type ViewContainerOptions } from '../view/ViewContainer';\nimport { type BatchableSprite } from './BatchableSprite';\n\nimport type { Size } from '../../maths/misc/Size';\nimport type { PointData } from '../../maths/point/PointData';\nimport type { TextureSourceLike } from '../../rendering/renderers/shared/texture/Texture';\nimport type { BoundsData } from '../container/bounds/Bounds';\nimport type { Optional } from '../container/container-mixins/measureMixin';\nimport type { DestroyOptions } from '../container/destroyTypes';\n\n/**\n * Options for configuring a Sprite instance. Defines the texture, anchor point, and rendering behavior.\n * @example\n * ```ts\n * // Create a basic sprite with texture\n * const sprite = new Sprite({\n *     texture: Texture.from('sprite.png')\n * });\n *\n * // Create a centered sprite with rounded position\n * const centeredSprite = new Sprite({\n *     texture: Texture.from('centered.png'),\n *     anchor: 0.5,        // Center point\n *     roundPixels: true,  // Crisp rendering\n *     x: 100,            // Position from ViewContainerOptions\n *     y: 100\n * });\n *\n * // Create a sprite with specific anchor points\n * const anchoredSprite = new Sprite({\n *     texture: Texture.from('corner.png'),\n *     anchor: {\n *         x: 1,  // Right-aligned\n *         y: 0   // Top-aligned\n *     }\n * });\n * ```\n * @extends ViewContainerOptions\n * @category scene\n * @standard\n * @noInheritDoc\n */\nexport interface SpriteOptions extends PixiMixins.SpriteOptions, ViewContainerOptions\n{\n    /**\n     * The texture to use for the sprite. If not provided, uses Texture.EMPTY\n     * @default Texture.EMPTY\n     * @example\n     * ```ts\n     * // Create a sprite with a texture\n     * const sprite = new Sprite({\n     *     texture: Texture.from('path/to/image.png')\n     * });\n     * // Update the texture later\n     * sprite.texture = Texture.from('path/to/another-image.png');\n     * ```\n     */\n    texture?: Texture;\n\n    /**\n     * The anchor point of the sprite (0-1 range).\n     * Controls the origin point for rotation, scaling, and positioning.\n     * Can be a number for uniform anchor or a PointData for separate x/y values.\n     * @default 0\n     * @example\n     * ```ts\n     * // Centered anchor\n     * anchor: 0.5\n     * // Separate x/y anchor\n     * anchor: { x: 0.5, y: 0.5 }\n     * // Right-aligned anchor\n     * anchor: { x: 1, y: 0 }\n     * ```\n     */\n    anchor?: PointData | number;\n\n    /**\n     * Whether or not to round the x/y position to whole pixels.\n     * Useful for crisp pixel art style rendering.\n     * @default false\n     * @example\n     * ```ts\n     * const sprite = new Sprite({\n     *     texture: Texture.from('sprite.png'),\n     *     roundPixels: true // Ensures crisp rendering\n     * });\n     * ```\n     */\n    roundPixels?: boolean;\n}\n// eslint-disable-next-line requireExport/require-export-jsdoc, requireMemberAPI/require-member-api-doc\nexport interface Sprite extends PixiMixins.Sprite, ViewContainer<BatchableSprite> {}\n\n/**\n * The Sprite object is one of the most important objects in PixiJS. It is a\n * drawing item that can be added to a scene and rendered to the screen.\n * Sprites can display images, handle input events, and be transformed in various ways.\n * @example\n * ```ts\n * // Create a sprite directly from an image path\n * const sprite = Sprite.from('assets/image.png');\n * sprite.position.set(100, 100);\n * app.stage.addChild(sprite);\n *\n * // Create from a spritesheet (more efficient)\n * const sheet = await Assets.load('assets/spritesheet.json');\n * const sprite = new Sprite(sheet.textures['image.png']);\n *\n * // Create with specific options\n * const configuredSprite = new Sprite({\n *     texture: Texture.from('sprite.png'),\n *     anchor: 0.5,           // Center anchor point\n *     position: { x: 100, y: 100 },\n *     scale: { x: 2, y: 2 }, // Double size\n *     rotation: Math.PI / 4   // 45 degrees\n * });\n *\n * // Animate sprite properties\n * app.ticker.add(() => {\n *     sprite.rotation += 0.1;      // Rotate\n *     sprite.scale.x = Math.sin(performance.now() / 1000) + 1; // Pulse scale\n * });\n * ```\n * @category scene\n * @standard\n * @see {@link SpriteOptions} For configuration options\n * @see {@link Texture} For texture management\n * @see {@link Assets} For asset loading\n */\nexport class Sprite extends ViewContainer<BatchableSprite>\n{\n    /**\n     * Creates a new sprite based on a source texture, image, video, or canvas element.\n     * This is a convenience method that automatically creates and manages textures.\n     * @example\n     * ```ts\n     * // Create from path or URL\n     * const sprite = Sprite.from('assets/image.png');\n     *\n     * // Create from existing texture\n     * const sprite = Sprite.from(texture);\n     *\n     * // Create from canvas\n     * const canvas = document.createElement('canvas');\n     * const sprite = Sprite.from(canvas, true); // Skip caching new texture\n     * ```\n     * @param source - The source to create the sprite from. Can be a path to an image, a texture,\n     * or any valid texture source (canvas, video, etc.)\n     * @param skipCache - Whether to skip adding to the texture cache when creating a new texture\n     * @returns A new sprite based on the source\n     * @see {@link Texture.from} For texture creation details\n     * @see {@link Assets} For asset loading and management\n     */\n    public static from(source: Texture | TextureSourceLike, skipCache = false): Sprite\n    {\n        if (source instanceof Texture)\n        {\n            return new Sprite(source);\n        }\n\n        return new Sprite(Texture.from(source, skipCache));\n    }\n\n    /** @internal */\n    public override readonly renderPipeId: string = 'sprite';\n\n    /** @internal */\n    public batched = true;\n    /** @internal */\n    public readonly _anchor: ObservablePoint;\n\n    /** @internal */\n    public _texture: Texture;\n\n    private readonly _visualBounds: BoundsData = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n\n    private _width: number;\n    private _height: number;\n\n    /**\n     * @param options - The options for creating the sprite.\n     */\n    constructor(options: SpriteOptions | Texture = Texture.EMPTY)\n    {\n        if (options instanceof Texture)\n        {\n            options = { texture: options };\n        }\n\n        // split out\n        const { texture = Texture.EMPTY, anchor, roundPixels, width, height, ...rest } = options;\n\n        super({\n            label: 'Sprite',\n            ...rest\n        });\n\n        this._anchor = new ObservablePoint(\n            {\n                _onUpdate: () =>\n                {\n                    this.onViewUpdate();\n                }\n            },\n        );\n\n        if (anchor)\n        {\n            this.anchor = anchor;\n        }\n        else if (texture.defaultAnchor)\n        {\n            this.anchor = texture.defaultAnchor;\n        }\n\n        this.texture = texture;\n\n        this.allowChildren = false;\n        this.roundPixels = roundPixels ?? false;\n\n        // needs to be set after the container has initiated\n        if (width !== undefined) this.width = width;\n        if (height !== undefined) this.height = height;\n    }\n\n    set texture(value: Texture)\n    {\n        value ||= Texture.EMPTY;\n\n        const currentTexture = this._texture;\n\n        if (currentTexture === value) return;\n\n        if (currentTexture && currentTexture.dynamic) currentTexture.off('update', this.onViewUpdate, this);\n        if (value.dynamic) value.on('update', this.onViewUpdate, this);\n\n        this._texture = value;\n\n        if (this._width)\n        {\n            this._setWidth(this._width, this._texture.orig.width);\n        }\n\n        if (this._height)\n        {\n            this._setHeight(this._height, this._texture.orig.height);\n        }\n\n        this.onViewUpdate();\n    }\n\n    /**\n     * The texture that is displayed by the sprite. When changed, automatically updates\n     * the sprite dimensions and manages texture event listeners.\n     * @example\n     * ```ts\n     * // Create sprite with texture\n     * const sprite = new Sprite({\n     *     texture: Texture.from('sprite.png')\n     * });\n     *\n     * // Update texture\n     * sprite.texture = Texture.from('newSprite.png');\n     *\n     * // Use texture from spritesheet\n     * const sheet = await Assets.load('spritesheet.json');\n     * sprite.texture = sheet.textures['frame1.png'];\n     *\n     * // Reset to empty texture\n     * sprite.texture = Texture.EMPTY;\n     * ```\n     * @see {@link Texture} For texture creation and management\n     * @see {@link Assets} For asset loading\n     */\n    get texture()\n    {\n        return this._texture;\n    }\n\n    /**\n     * The bounds of the sprite, taking into account the texture's trim area.\n     * @example\n     * ```ts\n     * const texture = new Texture({\n     *     source: new TextureSource({ width: 300, height: 300 }),\n     *     frame: new Rectangle(196, 66, 58, 56),\n     *     trim: new Rectangle(4, 4, 58, 56),\n     *     orig: new Rectangle(0, 0, 64, 64),\n     *     rotate: 2,\n     * });\n     * const sprite = new Sprite(texture);\n     * const visualBounds = sprite.visualBounds;\n     * // console.log(visualBounds); // { minX: -4, maxX: 62, minY: -4, maxY: 60 }\n     */\n    get visualBounds()\n    {\n        updateQuadBounds(this._visualBounds, this._anchor, this._texture);\n\n        return this._visualBounds;\n    }\n\n    /**\n     * @deprecated\n     * @ignore\n     */\n    get sourceBounds()\n    {\n        // #if _DEBUG\n        deprecation('8.6.1', 'Sprite.sourceBounds is deprecated, use visualBounds instead.');\n        // #endif\n\n        return this.visualBounds;\n    }\n\n    /** @private */\n    protected updateBounds()\n    {\n        const anchor = this._anchor;\n        const texture = this._texture;\n\n        const bounds = this._bounds;\n\n        const { width, height } = texture.orig;\n\n        bounds.minX = -anchor._x * width;\n        bounds.maxX = bounds.minX + width;\n\n        bounds.minY = -anchor._y * height;\n        bounds.maxY = bounds.minY + height;\n    }\n\n    /**\n     * Destroys this sprite renderable and optionally its texture.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @example\n     * sprite.destroy();\n     * sprite.destroy(true);\n     * sprite.destroy({ texture: true, textureSource: true });\n     */\n    public override destroy(options: DestroyOptions = false)\n    {\n        super.destroy(options);\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyTextureSource = typeof options === 'boolean' ? options : options?.textureSource;\n\n            this._texture.destroy(destroyTextureSource);\n        }\n\n        this._texture = null;\n        (this._visualBounds as null) = null;\n        (this._bounds as null) = null;\n        (this._anchor as null) = null;\n        this._gpuData = null;\n    }\n\n    /**\n     * The anchor sets the origin point of the sprite. The default value is taken from the {@link Texture}\n     * and passed to the constructor.\n     *\n     * - The default is `(0,0)`, this means the sprite's origin is the top left.\n     * - Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n     * - Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n     *\n     * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n     * @example\n     * ```ts\n     * // Center the anchor point\n     * sprite.anchor = 0.5; // Sets both x and y to 0.5\n     * sprite.position.set(400, 300); // Sprite will be centered at this position\n     *\n     * // Set specific x/y anchor points\n     * sprite.anchor = {\n     *     x: 1, // Right edge\n     *     y: 0  // Top edge\n     * };\n     *\n     * // Using individual coordinates\n     * sprite.anchor.set(0.5, 1); // Center-bottom\n     *\n     * // For rotation around center\n     * sprite.anchor.set(0.5);\n     * sprite.rotation = Math.PI / 4; // 45 degrees around center\n     *\n     * // For scaling from center\n     * sprite.anchor.set(0.5);\n     * sprite.scale.set(2); // Scales from center point\n     * ```\n     */\n    get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    set anchor(value: PointData | number)\n    {\n        typeof value === 'number' ? this._anchor.set(value) : this._anchor.copyFrom(value);\n    }\n\n    /**\n     * The width of the sprite, setting this will actually modify the scale to achieve the value set.\n     * @example\n     * ```ts\n     * // Set width directly\n     * sprite.width = 200;\n     * console.log(sprite.scale.x); // Scale adjusted to match width\n     *\n     * // Set width while preserving aspect ratio\n     * const ratio = sprite.height / sprite.width;\n     * sprite.width = 300;\n     * sprite.height = 300 * ratio;\n     *\n     * // For better performance when setting both width and height\n     * sprite.setSize(300, 400); // Avoids recalculating bounds twice\n     *\n     * // Reset to original texture size\n     * sprite.width = sprite.texture.orig.width;\n     * ```\n     */\n    override get width(): number\n    {\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    override set width(value: number)\n    {\n        this._setWidth(value, this._texture.orig.width);\n        this._width = value;\n    }\n\n    /**\n     * The height of the sprite, setting this will actually modify the scale to achieve the value set.\n     * @example\n     * ```ts\n     * // Set height directly\n     * sprite.height = 150;\n     * console.log(sprite.scale.y); // Scale adjusted to match height\n     *\n     * // Set height while preserving aspect ratio\n     * const ratio = sprite.width / sprite.height;\n     * sprite.height = 200;\n     * sprite.width = 200 * ratio;\n     *\n     * // For better performance when setting both width and height\n     * sprite.setSize(300, 400); // Avoids recalculating bounds twice\n     *\n     * // Reset to original texture size\n     * sprite.height = sprite.texture.orig.height;\n     * ```\n     */\n    override get height(): number\n    {\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    override set height(value: number)\n    {\n        this._setHeight(value, this._texture.orig.height);\n        this._height = value;\n    }\n\n    /**\n     * Retrieves the size of the Sprite as a [Size]{@link Size} object based on the texture dimensions and scale.\n     * This is faster than getting width and height separately as it only calculates the bounds once.\n     * @example\n     * ```ts\n     * // Basic size retrieval\n     * const sprite = new Sprite(Texture.from('sprite.png'));\n     * const size = sprite.getSize();\n     * console.log(`Size: ${size.width}x${size.height}`);\n     *\n     * // Reuse existing size object\n     * const reuseSize = { width: 0, height: 0 };\n     * sprite.getSize(reuseSize);\n     * ```\n     * @param out - Optional object to store the size in, to avoid allocating a new object\n     * @returns The size of the Sprite\n     * @see {@link Sprite#width} For getting just the width\n     * @see {@link Sprite#height} For getting just the height\n     * @see {@link Sprite#setSize} For setting both width and height\n     */\n    public override getSize(out?: Size): Size\n    {\n        out ||= {} as Size;\n        out.width = Math.abs(this.scale.x) * this._texture.orig.width;\n        out.height = Math.abs(this.scale.y) * this._texture.orig.height;\n\n        return out;\n    }\n\n    /**\n     * Sets the size of the Sprite to the specified width and height.\n     * This is faster than setting width and height separately as it only recalculates bounds once.\n     * @example\n     * ```ts\n     * // Basic size setting\n     * const sprite = new Sprite(Texture.from('sprite.png'));\n     * sprite.setSize(100, 200); // Width: 100, Height: 200\n     *\n     * // Set uniform size\n     * sprite.setSize(100); // Sets both width and height to 100\n     *\n     * // Set size with object\n     * sprite.setSize({\n     *     width: 200,\n     *     height: 300\n     * });\n     *\n     * // Reset to texture size\n     * sprite.setSize(\n     *     sprite.texture.orig.width,\n     *     sprite.texture.orig.height\n     * );\n     * ```\n     * @param value - This can be either a number or a {@link Size} object\n     * @param height - The height to set. Defaults to the value of `width` if not provided\n     * @see {@link Sprite#width} For setting width only\n     * @see {@link Sprite#height} For setting height only\n     * @see {@link Sprite#texture} For the source dimensions\n     */\n    public override setSize(value: number | Optional<Size, 'height'>, height?: number)\n    {\n        if (typeof value === 'object')\n        {\n            height = value.height ?? value.width;\n            value = value.width;\n        }\n        else\n        {\n            height ??= value;\n        }\n\n        value !== undefined && this._setWidth(value, this._texture.orig.width);\n        height !== undefined && this._setHeight(height, this._texture.orig.height);\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3633, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/text-bitmap/AbstractBitmapFont.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/text-bitmap/AbstractBitmapFont.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\n\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\n\n/**\n * @category text\n * @advanced\n */\nexport interface CharData\n{\n    /** Unique id of character */\n    id: number;\n    /** x-offset to apply when rendering character */\n    xOffset: number;\n    /** y-offset to apply when rendering character. */\n    yOffset: number;\n    /** Advancement to apply to next character. */\n    xAdvance: number;\n    /** The kerning values for this character. */\n    kerning: Record<string, number>;\n    /** The texture of the character. */\n    texture?: Texture;\n}\n\n/**\n * The raw data of a character in a bitmap font.\n * @category text\n * @advanced\n */\nexport interface RawCharData extends Omit<CharData, 'texture'>\n{\n    /** The page of the font texture that the character is on. */\n    page: number;\n    /** The x position of the character in the page. */\n    x: number;\n    /** The y position of the character in the page. */\n    y: number;\n    /** The width of the character in the page. */\n    width: number;\n    /** The height of the character in the page. */\n    height: number;\n    /** The letter of the character. */\n    letter: string;\n}\n\n/**\n * The raw data of a bitmap font.\n * @category text\n * @advanced\n */\nexport interface BitmapFontData\n{\n    /** The offset of the font face from the baseline. */\n    baseLineOffset: number;\n    /** The map of characters by character code. */\n    chars: Record<string, RawCharData>;\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    pages: {\n        /** Unique id for bitmap texture */\n        id: number;\n        /** File name */\n        file: string\n    }[];\n    /** The line-height of the font face in pixels. */\n    lineHeight: number;\n    /** The size of the font face in pixels. */\n    fontSize: number;\n    /** The name of the font face. */\n    fontFamily: string;\n    /** The range and type of the distance field for this font. */\n    distanceField?: {\n        /** Type of distance field */\n        type: 'sdf' | 'msdf' | 'none';\n        /** Range of the distance field in pixels */\n        range: number;\n    };\n}\n\ninterface BitmapFontEvents<Type>\n{\n    destroy: [Type];\n}\n\n/**\n * An abstract representation of a bitmap font.\n * @category text\n * @advanced\n */\nexport abstract class AbstractBitmapFont<FontType>\n    extends EventEmitter<BitmapFontEvents<FontType>>\n    implements Omit<BitmapFontData, 'chars' | 'pages' | 'fontSize'>\n{\n    /** The map of characters by character code. */\n    public readonly chars: Record<string, CharData> = Object.create(null);\n\n    /**\n     * The line-height of the font face in pixels.\n     * @type {number}\n     */\n    public readonly lineHeight: BitmapFontData['lineHeight'] = 0;\n\n    /**\n     * The name of the font face\n     * @type {string}\n     */\n    public readonly fontFamily: BitmapFontData['fontFamily'] = '';\n    /** The metrics of the font face. */\n    public readonly fontMetrics: FontMetrics = { fontSize: 0, ascent: 0, descent: 0 };\n    /**\n     * The offset of the font face from the baseline.\n     * @type {number}\n     */\n    public readonly baseLineOffset: BitmapFontData['baseLineOffset'] = 0;\n    /** The range and type of the distance field for this font. */\n    public readonly distanceField: BitmapFontData['distanceField'] = { type: 'none', range: 0 };\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    public readonly pages: { texture: Texture }[] = [];\n    /** should the fill for this font be applied as a tint to the text. */\n    public applyFillAsTint = true;\n\n    /** The size of the font face in pixels. */\n    public readonly baseMeasurementFontSize: number = 100;\n    protected baseRenderedFontSize = 100;\n\n    /**\n     * The name of the font face.\n     * @deprecated since 8.0.0 Use `fontFamily` instead.\n     */\n    public get font(): BitmapFontData['fontFamily']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead.');\n        // #endif\n\n        return this.fontFamily;\n    }\n\n    /**\n     * The map of base page textures (i.e., sheets of glyphs).\n     * @deprecated since 8.0.0 Use `pages` instead.\n     */\n    public get pageTextures(): AbstractBitmapFont<FontType>['pages']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.');\n        // #endif\n\n        return this.pages;\n    }\n\n    /**\n     * The size of the font face in pixels.\n     * @deprecated since 8.0.0 Use `fontMetrics.fontSize` instead.\n     */\n    public get size(): BitmapFontData['fontSize']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead.');\n        // #endif\n\n        return this.fontMetrics.fontSize;\n    }\n\n    /**\n     * The kind of distance field for this font or \"none\".\n     * @deprecated since 8.0.0 Use `distanceField.type` instead.\n     */\n    public get distanceFieldRange(): NonNullable<BitmapFontData['distanceField']>['range']\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead.');\n        // #endif\n\n        return this.distanceField.range;\n    }\n\n    /**\n     * The range of the distance field in pixels.\n     * @deprecated since 8.0.0 Use `distanceField.range` instead.\n     */\n    public get distanceFieldType(): NonNullable<BitmapFontData['distanceField']>['type']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead.');\n        // #endif\n\n        return this.distanceField.type;\n    }\n\n    public destroy(destroyTextures = false): void\n    {\n        this.emit('destroy', this as unknown as FontType);\n\n        this.removeAllListeners();\n\n        for (const i in this.chars)\n        {\n            // texture may not exist if the char is \" \", \\n, \\r, or \\t.\n            this.chars[i].texture?.destroy();\n        }\n\n        (this.chars as null) = null;\n\n        if (destroyTextures)\n        {\n            this.pages.forEach((page) => page.texture.destroy(true));\n            (this.pages as any) = null;\n        }\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;AA0FO,MAAe,2BACV,4NAEZ,CAAA;IAHO,WAAA,EAAA;QAAA,KAAA,CAAA,GAAA,SAAA,CAAA,CAAA;QAKH,6CAAA,GAAgB,IAAA,CAAA,KAAA,GAAA,aAAA,GAAyC,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA,CAAA;QAMpE;;;KAAA,GAAA,IAAA,CAAgB,UAA2C,GAAA,CAAA,CAAA;QAM3D;;;KAAA,GAAA,IAAA,CAAgB,UAA2C,GAAA,EAAA,CAAA;QAE3D,kCAAA,GAAA,IAAA,CAAgB,WAAA,GAA2B;YAAE,QAAA,EAAU;YAAG,MAAQ,EAAA,CAAA;YAAG,SAAS,CAAE;QAAA,CAAA,CAAA;QAKhF;;;KAAA,GAAA,IAAA,CAAgB,cAAmD,GAAA,CAAA,CAAA;QAEnE,4DAAA,GAAA,IAAA,CAAgB,aAAiD,GAAA;YAAE,IAAM,EAAA,MAAA;YAAQ,OAAO,CAAE;QAAA,CAAA,CAAA;QAE1F,4DAAA,GAAA,IAAA,CAAgB,KAAA,GAAgC,EAAC,CAAA;QAEjD,oEAAA,GAAA,IAAA,CAAO,eAAkB,GAAA,IAAA,CAAA;QAGzB,yCAAA,GAAA,IAAA,CAAgB,uBAAkC,GAAA,GAAA,CAAA;QAClD,IAAA,CAAU,oBAAuB,GAAA,GAAA,CAAA;IAAA,CAAA;IAAA;;;GAAA,GAMjC,IAAW,IACX,GAAA;YAEI,4OAAA,EAAY,uOAAA,EAAQ,0EAA0E,CAAA,CAAA;QAG9F,OAAO,IAAK,CAAA,UAAA,CAAA;IAAA,CAChB;IAAA;;;GAAA,GAMA,IAAW,YACX,GAAA;YAEI,4OAAA,EAAY,uOAAA,EAAQ,6EAA6E,CAAA,CAAA;QAGjG,OAAO,IAAK,CAAA,KAAA,CAAA;IAAA,CAChB;IAAA;;;GAAA,GAMA,IAAW,IACX,GAAA;YAEI,4OAAA,EAAY,uOAAA,EAAQ,oFAAoF,CAAA,CAAA;QAGxG,OAAO,IAAA,CAAK,WAAY,CAAA,QAAA,CAAA;IAAA,CAC5B;IAAA;;;GAAA,GAMA,IAAW,kBACX,GAAA;YAGI,4OAAA,EAAY,uOAAA,EAAQ,iGAAiG,CAAA,CAAA;QAGrH,OAAO,IAAA,CAAK,aAAc,CAAA,KAAA,CAAA;IAAA,CAC9B;IAAA;;;GAAA,GAMA,IAAW,iBACX,GAAA;YAEI,4OAAA,EAAY,uOAAA,EAAQ,+FAA+F,CAAA,CAAA;QAGnH,OAAO,IAAA,CAAK,aAAc,CAAA,IAAA,CAAA;IAAA,CAC9B;IAEO,OAAA,CAAQ,kBAAkB,KACjC,EAAA;QACS,IAAA,CAAA,IAAA,CAAK,WAAW,IAA2B,CAAA,CAAA;QAEhD,IAAA,CAAK,kBAAmB,EAAA,CAAA;QAEb,IAAA,MAAA,CAAA,IAAK,IAAA,CAAK,KACrB,CAAA;YAEI,IAAA,CAAK,KAAM,CAAA,CAAC,CAAE,CAAA,OAAA,EAAS,OAAQ,EAAA,CAAA;QAAA,CACnC;QAEC,IAAA,CAAK,KAAiB,GAAA,IAAA,CAAA;QAEvB,IAAI,eACJ,EAAA;YACS,IAAA,CAAA,KAAA,CAAM,OAAA,CAAQ,CAAC,IAAA,GAAS,KAAK,OAAQ,CAAA,OAAA,CAAQ,IAAI,CAAC,CAAA,CAAA;YACtD,IAAA,CAAK,KAAgB,GAAA,IAAA,CAAA;QAAA,CAC1B;IAAA,CACJ;AACJ","debugId":null}},
    {"offset": {"line": 3726, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/text/canvas/utils/fontStringFromTextStyle.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/text/canvas/utils/fontStringFromTextStyle.ts"],"sourcesContent":["import type { TextStyle } from '../../TextStyle';\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n];\n\n/**\n * Generates a font style string to use for `TextMetrics.measureFont()`.\n * @param style\n * @returns Font style string, for passing to `TextMetrics.measureFont()`\n * @internal\n */\nexport function fontStringFromTextStyle(style: TextStyle): string\n{\n    // build canvas api font setting from individual components. Convert a numeric style.fontSize to px\n    const fontSizeString = (typeof style.fontSize === 'number') ? `${style.fontSize}px` : style.fontSize;\n\n    // Clean-up fontFamily property by quoting each font name\n    // this will support font names with spaces\n    let fontFamilies: string | string[] = style.fontFamily;\n\n    if (!Array.isArray(style.fontFamily))\n    {\n        fontFamilies = style.fontFamily.split(',');\n    }\n\n    for (let i = fontFamilies.length - 1; i >= 0; i--)\n    {\n        // Trim any extra white-space\n        let fontFamily = fontFamilies[i].trim();\n\n        // Check if font already contains strings\n        if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && !genericFontFamilies.includes(fontFamily))\n        {\n            fontFamily = `\"${fontFamily}\"`;\n        }\n        (fontFamilies as string[])[i] = fontFamily;\n    }\n\n    // eslint-disable-next-line max-len\n    return `${style.fontStyle} ${style.fontVariant} ${style.fontWeight} ${fontSizeString} ${(fontFamilies as string[]).join(',')}`;\n}\n"],"names":[],"mappings":";;;;;AAEA,MAAM,mBAAsB,GAAA;IACxB,OAAA;IACA,YAAA;IACA,WAAA;IACA,SAAA;IACA,SAAA;IACA,WAAA;CACJ,CAAA;AAQO,SAAS,wBAAwB,KACxC,EAAA;IAEU,MAAA,cAAA,GAAkB,OAAO,KAAM,CAAA,QAAA,KAAa,WAAY,CAAG,EAAA,KAAA,CAAM,QAAQ,CAAA,EAAA,CAAA,GAAO,KAAM,CAAA,QAAA,CAAA;IAI5F,IAAI,eAAkC,KAAM,CAAA,UAAA,CAAA;IAE5C,IAAI,CAAC,KAAA,CAAM,OAAQ,CAAA,KAAA,CAAM,UAAU,CACnC,EAAA;QACmB,YAAA,GAAA,KAAA,CAAM,UAAW,CAAA,KAAA,CAAM,GAAG,CAAA,CAAA;IAAA,CAC7C;IAEA,IAAA,IAAS,IAAI,YAAa,CAAA,MAAA,GAAS,CAAG,EAAA,CAAA,IAAK,GAAG,CAC9C,EAAA,CAAA;QAEI,IAAI,UAAa,GAAA,YAAA,CAAa,CAAC,CAAA,CAAE,IAAK,EAAA,CAAA;QAGlC,IAAA,CAAE,qBAAsB,IAAK,CAAA,UAAU,KAAK,CAAC,mBAAA,CAAoB,QAAS,CAAA,UAAU,CACxF,EAAA;YACI,UAAA,GAAa,CAAA,CAAA,EAAI,UAAU,CAAA,CAAA,CAAA,CAAA;QAAA,CAC/B;QACC,YAAA,CAA0B,CAAC,CAAI,GAAA,UAAA,CAAA;IAAA,CACpC;IAGA,OAAO,CAAG,EAAA,KAAA,CAAM,SAAS,CAAA,CAAA,EAAI,MAAM,WAAW,CAAA,CAAA,EAAI,KAAM,CAAA,UAAU,CAAA,CAAA,EAAI,cAAc,CAAA,CAAA,EAAK,YAA0B,CAAA,IAAA,CAAK,GAAG,CAAC,CAAA,CAAA,CAAA;AAChI","debugId":null}},
    {"offset": {"line": 3760, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/text/canvas/CanvasTextMetrics.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/text/canvas/CanvasTextMetrics.ts"],"sourcesContent":["import { lru } from 'tiny-lru';\nimport { DOMAdapter } from '../../../environment/adapter';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle';\n\nimport type { ICanvas, ICanvasRenderingContext2DSettings } from '../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { TextStyle, TextStyleWhiteSpace } from '../TextStyle';\n\n// The type for Intl.Segmenter is only available since TypeScript 4.7.2, so let's make a polyfill for it.\ninterface ISegmentData\n{\n    segment: string;\n}\ninterface ISegments\n{\n    [Symbol.iterator](): IterableIterator<ISegmentData>;\n}\ninterface ISegmenter\n{\n    segment(input: string): ISegments;\n}\ninterface IIntl\n{\n    Segmenter?: {\n        prototype: ISegmenter;\n        /**\n         * Creates a new Intl.Segmenter object.\n         * @returns A new Intl.Segmenter object.\n         */\n        new(): ISegmenter;\n    };\n}\n\n/**\n * A number, or a string containing a number.\n * @category text\n * @typedef {object} FontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n * @advanced\n */\nexport interface FontMetrics\n{\n    ascent: number;\n    descent: number;\n    fontSize: number;\n}\n\ntype CharacterWidthCache = Record<string, number>;\n\n// Default settings used for all getContext calls\nconst contextSettings: ICanvasRenderingContext2DSettings = {\n    // TextMetrics requires getImageData readback for measuring fonts.\n    willReadFrequently: true,\n};\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n * @example\n * import { CanvasTextMetrics, TextStyle } from 'pixi.js';\n *\n * const style = new TextStyle({\n *     fontFamily: 'Arial',\n *     fontSize: 24,\n *     fill: 0xff1010,\n *     align: 'center',\n * });\n * const textMetrics = CanvasTextMetrics.measureText('Your text', style);\n * @category text\n * @advanced\n */\nexport class CanvasTextMetrics\n{\n    /** The text that was measured. */\n    public text: string;\n\n    /** The style that was measured. */\n    public style: TextStyle;\n\n    /** The measured width of the text. */\n    public width: number;\n\n    /** The measured height of the text. */\n    public height: number;\n\n    /** An array of lines of the text broken by new lines and wrapping is specified in style. */\n    public lines: string[];\n\n    /** An array of the line widths for each line matched to `lines`. */\n    public lineWidths: number[];\n\n    /** The measured line height for this style. */\n    public lineHeight: number;\n\n    /** The maximum line width for all measured lines. */\n    public maxLineWidth: number;\n\n    /** The font properties object from TextMetrics.measureFont. */\n    public fontProperties: FontMetrics;\n\n    /**\n     * String used for calculate font metrics.\n     * These characters are all tall to help calculate the height required for text.\n     */\n    public static METRICS_STRING = '|ÉqÅ';\n\n    /** Baseline symbol for calculate font metrics. */\n    public static BASELINE_SYMBOL = 'M';\n\n    /** Baseline multiplier for calculate font metrics. */\n    public static BASELINE_MULTIPLIER = 1.4;\n\n    /** Height multiplier for setting height of canvas to calculate font metrics. */\n    public static HEIGHT_MULTIPLIER = 2.0;\n\n    /**\n     * A Unicode \"character\", or \"grapheme cluster\", can be composed of multiple Unicode code points,\n     * such as letters with diacritical marks (e.g. `'\\u0065\\u0301'`, letter e with acute)\n     * or emojis with modifiers (e.g. `'\\uD83E\\uDDD1\\u200D\\uD83D\\uDCBB'`, technologist).\n     * The new `Intl.Segmenter` API in ES2022 can split the string into grapheme clusters correctly. If it is not available,\n     * PixiJS will fallback to use the iterator of String, which can only spilt the string into code points.\n     * If you want to get full functionality in environments that don't support `Intl.Segmenter` (such as Firefox),\n     * you can use other libraries such as [grapheme-splitter]{@link https://www.npmjs.com/package/grapheme-splitter}\n     * or [graphemer]{@link https://www.npmjs.com/package/graphemer} to create a polyfill. Since these libraries can be\n     * relatively large in size to handle various Unicode grapheme clusters properly, PixiJS won't use them directly.\n     */\n    public static graphemeSegmenter: (s: string) => string[] = (() =>\n    {\n        if (typeof (Intl as IIntl)?.Segmenter === 'function')\n        {\n            const segmenter = new (Intl as IIntl).Segmenter();\n\n            return (s: string) =>\n            {\n                const segments = segmenter.segment(s);\n                const result = [];\n\n                let i = 0;\n\n                for (const segment of segments)\n                {\n                    result[i++] = (segment.segment);\n                }\n\n                return result;\n            };\n        }\n\n        return (s: string) => [...s];\n    })();\n\n    public static _experimentalLetterSpacingSupported?: boolean;\n\n    /**\n     * Checking that we can use modern canvas 2D API.\n     *\n     * Note: This is an unstable API, Chrome < 94 use `textLetterSpacing`, later versions use `letterSpacing`.\n     * @see TextMetrics.experimentalLetterSpacing\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/ICanvasRenderingContext2D/letterSpacing\n     * @see https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n     */\n    public static get experimentalLetterSpacingSupported(): boolean\n    {\n        let result = CanvasTextMetrics._experimentalLetterSpacingSupported;\n\n        if (result === undefined)\n        {\n            const proto = DOMAdapter.get().getCanvasRenderingContext2D().prototype;\n\n            result\n                = CanvasTextMetrics._experimentalLetterSpacingSupported\n                = 'letterSpacing' in proto || 'textLetterSpacing' in proto;\n        }\n\n        return result;\n    }\n\n    /**\n     * New rendering behavior for letter-spacing which uses Chrome's new native API. This will\n     * lead to more accurate letter-spacing results because it does not try to manually draw\n     * each character. However, this Chrome API is experimental and may not serve all cases yet.\n     * @see TextMetrics.experimentalLetterSpacingSupported\n     */\n    public static experimentalLetterSpacing = false;\n\n    /** Cache of {@link TextMetrics.FontMetrics} objects. */\n    private static _fonts: Record<string, FontMetrics> = {};\n\n    /** Cache of new line chars. */\n    private static readonly _newlines: number[] = [\n        0x000A, // line feed\n        0x000D, // carriage return\n    ];\n\n    /** Cache of breaking spaces. */\n    private static readonly _breakingSpaces: number[] = [\n        0x0009, // character tabulation\n        0x0020, // space\n        0x2000, // en quad\n        0x2001, // em quad\n        0x2002, // en space\n        0x2003, // em space\n        0x2004, // three-per-em space\n        0x2005, // four-per-em space\n        0x2006, // six-per-em space\n        0x2008, // punctuation space\n        0x2009, // thin space\n        0x200A, // hair space\n        0x205F, // medium mathematical space\n        0x3000, // ideographic space\n    ];\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private static __canvas: ICanvas;\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private static __context: ICanvasRenderingContext2D;\n\n    /** Cache for measured text metrics */\n    private static readonly _measurementCache = lru<CanvasTextMetrics>(1000);\n\n    /**\n     * @param text - the text that was measured\n     * @param style - the style that was measured\n     * @param width - the measured width of the text\n     * @param height - the measured height of the text\n     * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param lineWidths - an array of the line widths for each line matched to `lines`\n     * @param lineHeight - the measured line height for this style\n     * @param maxLineWidth - the maximum line width for all measured lines\n     * @param {FontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text: string, style: TextStyle, width: number, height: number, lines: string[], lineWidths: number[],\n        lineHeight: number, maxLineWidth: number, fontProperties: FontMetrics)\n    {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     * @param text - The text to measure.\n     * @param style - The text style to use for measuring\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @param wordWrap\n     * @returns Measured width and height of the text.\n     */\n    public static measureText(\n        text = ' ',\n        style: TextStyle,\n        canvas: ICanvas = CanvasTextMetrics._canvas,\n        wordWrap: boolean = style.wordWrap,\n    ): CanvasTextMetrics\n    {\n        const textKey = `${text}-${style.styleKey}-wordWrap-${wordWrap}`;\n\n        // check if we have already measured this text with the same style\n        if (CanvasTextMetrics._measurementCache.has(textKey))\n        {\n            return CanvasTextMetrics._measurementCache.get(textKey);\n        }\n\n        const font = fontStringFromTextStyle(style);\n        const fontProperties = CanvasTextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize as number;\n            fontProperties.ascent = style.fontSize as number;\n        }\n\n        const context = CanvasTextMetrics.__context; // canvas.getContext('2d', contextSettings);\n\n        context.font = font;\n\n        const outputText = wordWrap ? CanvasTextMetrics._wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array<number>(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = CanvasTextMetrics._measureText(lines[i], style.letterSpacing, context);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n\n        const strokeWidth = style._stroke?.width || 0;\n\n        let width = maxLineWidth + strokeWidth;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadow.distance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize;\n\n        let height = Math.max(lineHeight, fontProperties.fontSize + (strokeWidth))\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadow.distance;\n        }\n\n        const measurements = new CanvasTextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n\n        // cache the measurements\n        CanvasTextMetrics._measurementCache.set(textKey, measurements);\n\n        return measurements;\n    }\n\n    private static _measureText(\n        text: string,\n        letterSpacing: number,\n        context: ICanvasRenderingContext2D\n    )\n    {\n        let useExperimentalLetterSpacing = false;\n\n        if (CanvasTextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (CanvasTextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        const metrics = context.measureText(text);\n        let metricWidth = metrics.width;\n        const actualBoundingBoxLeft = -metrics.actualBoundingBoxLeft;\n        const actualBoundingBoxRight = metrics.actualBoundingBoxRight;\n        let boundsWidth = actualBoundingBoxRight - actualBoundingBoxLeft;\n\n        if (metricWidth > 0)\n        {\n            if (useExperimentalLetterSpacing)\n            {\n                metricWidth -= letterSpacing;\n                boundsWidth -= letterSpacing;\n            }\n            else\n            {\n                const val = (CanvasTextMetrics.graphemeSegmenter(text).length - 1) * letterSpacing;\n\n                metricWidth += val;\n                boundsWidth += val;\n            }\n        }\n\n        // NOTE: this is a bit of a hack as metrics.width and the bounding box width do not measure the same thing\n        // We can't seem to exclusively use one or the other, so are taking the largest of the two\n        return Math.max(metricWidth, boundsWidth);\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     * @param text - String to apply word wrapping to\n     * @param style - the style to use when wrapping\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns New string with new lines applied where required\n     */\n    private static _wordWrap(\n        text: string,\n        style: TextStyle,\n        canvas: ICanvas = CanvasTextMetrics._canvas\n    ): string\n    {\n        const context = canvas.getContext('2d', contextSettings);\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache: CharacterWidthCache = Object.create(null);\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = CanvasTextMetrics._collapseSpaces(whiteSpace);\n        const collapseNewlines = CanvasTextMetrics._collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = CanvasTextMetrics._tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (CanvasTextMetrics._isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += CanvasTextMetrics._addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = CanvasTextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = CanvasTextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = CanvasTextMetrics._getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += CanvasTextMetrics._addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (CanvasTextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = CanvasTextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n                        let lastChar = char;\n\n                        let k = 1;\n\n                        // we are not at the end of the token\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n\n                            // should not split chars\n                            if (!CanvasTextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            lastChar = nextChar;\n                            k++;\n                        }\n\n                        j += k - 1;\n\n                        const characterWidth = CanvasTextMetrics._getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += CanvasTextMetrics._addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += CanvasTextMetrics._addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += CanvasTextMetrics._addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += CanvasTextMetrics._addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !CanvasTextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += CanvasTextMetrics._addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convenience function for logging each line added during the wordWrap method.\n     * @param line    - The line of text to add\n     * @param newLine - Add new line character to end\n     * @returns A formatted line\n     */\n    private static _addLine(line: string, newLine = true): string\n    {\n        line = CanvasTextMetrics._trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     * @param key            - The key\n     * @param letterSpacing  - The letter spacing\n     * @param cache          - The cache\n     * @param context        - The canvas context\n     * @returns The from cache.\n     */\n    private static _getFromCache(key: string, letterSpacing: number, cache: CharacterWidthCache,\n        context: ICanvasRenderingContext2D): number\n    {\n        let width = cache[key];\n\n        if (typeof width !== 'number')\n        {\n            width = CanvasTextMetrics._measureText(key, letterSpacing, context) + letterSpacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces.\n     * @param whiteSpace - The TextStyle property whiteSpace\n     * @returns Should collapse\n     */\n    private static _collapseSpaces(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars.\n     * @param whiteSpace - The white space\n     * @returns should collapse\n     */\n    private static _collapseNewlines(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * Trims breaking whitespaces from string.\n     * @param text - The text\n     * @returns Trimmed string\n     */\n    private static _trimRight(text: string): string\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!CanvasTextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     * @param char - The character\n     * @returns True if newline, False otherwise.\n     */\n    private static _isNewline(char: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return CanvasTextMetrics._newlines.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * It allows one to determine whether char should be a breaking whitespace\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param char - The character\n     * @param [_nextChar] - The next character\n     * @returns True if whitespace, False otherwise.\n     */\n    public static isBreakingSpace(char: string, _nextChar?: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return CanvasTextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     * @param text - The text\n     * @returns A tokenized array\n     */\n    private static _tokenize(text: string): string[]\n    {\n        const tokens: string[] = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n            const nextChar = text[i + 1];\n\n            if (CanvasTextMetrics.isBreakingSpace(char, nextChar) || CanvasTextMetrics._isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                // treat \\r\\n as a single new line token\n                if (char === '\\r' && nextChar === '\\n')\n                {\n                    tokens.push('\\r\\n');\n                    i++;\n                }\n                else\n                {\n                    tokens.push(char);\n                }\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     * @param _token - The token\n     * @param breakWords - The style attr break words\n     * @returns Whether to break word or not\n     */\n    public static canBreakWords(_token: string, breakWords: boolean): boolean\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param _char - The character\n     * @param _nextChar - The next character\n     * @param _token - The token/word the characters are from\n     * @param _index - The index in the token of the char\n     * @param _breakWords - The style attr break words\n     * @returns whether to break word or not\n     */\n    public static canBreakChars(_char: string, _nextChar: string, _token: string, _index: number,\n        _breakWords: boolean): boolean\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     * @param token - The token to split\n     * @returns The characters of the token\n     * @see CanvasTextMetrics.graphemeSegmenter\n     */\n    public static wordWrapSplit(token: string): string[]\n    {\n        return CanvasTextMetrics.graphemeSegmenter(token);\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     * @param font - String representing the style of the font\n     * @returns Font properties object\n     */\n    public static measureFont(font: string): FontMetrics\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (CanvasTextMetrics._fonts[font])\n        {\n            return CanvasTextMetrics._fonts[font];\n        }\n\n        const context = CanvasTextMetrics._context;\n\n        context.font = font;\n        const metrics = context.measureText(CanvasTextMetrics.METRICS_STRING + CanvasTextMetrics.BASELINE_SYMBOL);\n\n        const properties = {\n            ascent: metrics.actualBoundingBoxAscent,\n            descent: metrics.actualBoundingBoxDescent,\n            fontSize: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent\n        };\n\n        CanvasTextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    public static clearMetrics(font = ''): void\n    {\n        if (font)\n        {\n            delete CanvasTextMetrics._fonts[font];\n        }\n        else\n        {\n            CanvasTextMetrics._fonts = {};\n        }\n    }\n\n    /**\n     * Cached canvas element for measuring text\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _canvas(): ICanvas\n    {\n        if (!CanvasTextMetrics.__canvas)\n        {\n            let canvas: ICanvas;\n\n            try\n            {\n                // OffscreenCanvas2D measureText can be up to 40% faster.\n                const c = new OffscreenCanvas(0, 0);\n                const context = c.getContext('2d', contextSettings);\n\n                if (context?.measureText)\n                {\n                    CanvasTextMetrics.__canvas = c as ICanvas;\n\n                    return c as ICanvas;\n                }\n\n                canvas = DOMAdapter.get().createCanvas();\n            }\n            catch (_cx)\n            {\n                canvas = DOMAdapter.get().createCanvas();\n            }\n            canvas.width = canvas.height = 10;\n            CanvasTextMetrics.__canvas = canvas;\n        }\n\n        return CanvasTextMetrics.__canvas;\n    }\n\n    /**\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _context(): ICanvasRenderingContext2D\n    {\n        if (!CanvasTextMetrics.__context)\n        {\n            CanvasTextMetrics.__context = CanvasTextMetrics._canvas.getContext('2d', contextSettings);\n        }\n\n        return CanvasTextMetrics.__context;\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4284, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/fill/FillGradient.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/fill/FillGradient.ts"],"sourcesContent":["import { Color } from '../../../../color/Color';\nimport { DOMAdapter } from '../../../../environment/adapter';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { type WRAP_MODE } from '../../../../rendering/renderers/shared/texture/const';\nimport { ImageSource } from '../../../../rendering/renderers/shared/texture/sources/ImageSource';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { uid } from '../../../../utils/data/uid';\nimport { deprecation } from '../../../../utils/logging/deprecation';\nimport { definedProps } from '../../../container/utils/definedProps';\n\nimport type { ColorSource } from '../../../../color/Color';\nimport type { PointData } from '../../../../maths/point/PointData';\nimport type { CanvasAndContext } from '../../../../rendering/renderers/shared/texture/CanvasPool';\nimport type { TextureSpace } from '../FillTypes';\n\n/**\n * Defines the type of gradient to create.\n *\n * It can be:\n * - 'linear': A linear gradient that transitions colors along a straight line.\n * - 'radial': A radial gradient that transitions colors in a circular pattern from an inner circle to an outer circle.\n * @category scene\n * @standard\n */\nexport type GradientType = 'linear' | 'radial';\n\n/**\n * Represents the style options for a linear gradient fill.\n * @category scene\n * @standard\n */\nexport interface BaseGradientOptions\n{\n    /** The type of gradient */\n    type?: GradientType;\n    /** Array of colors stops to use in the gradient */\n    colorStops?: { offset: number, color: ColorSource }[];\n    /** Whether coordinates are 'global' or 'local' */\n    textureSpace?: TextureSpace;\n    /**\n     * The size of the texture to use for the gradient - this is for advanced usage.\n     * The texture size does not need to match the size of the object being drawn.\n     * Due to GPU interpolation, gradient textures can be relatively small!\n     * Consider using a larger texture size if your gradient has a lot of very tight color steps\n     */\n    textureSize?: number;\n    /**\n     * The wrap mode of the gradient.\n     * This can be 'clamp-to-edge' or 'repeat'.\n     * @default 'clamp-to-edge'\n     */\n    wrapMode?: WRAP_MODE\n}\n\n/**\n * Options specific to linear gradients.\n * A linear gradient creates a smooth transition between colors along a straight line defined by start and end points.\n * @category scene\n * @standard\n */\nexport interface LinearGradientOptions extends BaseGradientOptions\n{\n    /** The type of gradient. Must be 'linear' for linear gradients. */\n    type?: 'linear';\n\n    /**\n     * The start point of the gradient.\n     * This point defines where the gradient begins.\n     * It is represented as a PointData object containing x and y coordinates.\n     * The coordinates are in local space by default (0-1), but can be in global space if specified.\n     */\n    start?: PointData;\n\n    /**\n     * The end point of the gradient.\n     * This point defines where the gradient ends.\n     * It is represented as a PointData object containing x and y coordinates.\n     * The coordinates are in local space by default (0-1), but can be in global space if specified.\n     */\n    end?: PointData;\n}\n\n/**\n * Options specific to radial gradients.\n * A radial gradient creates a smooth transition between colors that radiates outward in a circular pattern.\n * The gradient is defined by inner and outer circles, each with their own radius.\n * @category scene\n * @standard\n */\nexport interface RadialGradientOptions extends BaseGradientOptions\n{\n    /** The type of gradient. Must be 'radial' for radial gradients. */\n    type?: 'radial';\n    /** The center point of the inner circle where the gradient begins. In local coordinates by default (0-1). */\n    center?: PointData;\n    /** The radius of the inner circle where the gradient begins. */\n    innerRadius?: number;\n    /** The center point of the outer circle where the gradient ends. In local coordinates by default (0-1). */\n    outerCenter?: PointData;\n    /** The radius of the outer circle where the gradient ends. */\n    outerRadius?: number;\n    /**\n     * The y scale of the gradient, use this to make the gradient elliptical.\n     * NOTE: Only applied to radial gradients used with Graphics.\n     */\n    scale?: number;\n    /**\n     * The rotation of the gradient in radians, useful for making the gradient elliptical.\n     * NOTE: Only applied to radial gradients used with Graphics.\n     */\n    rotation?: number;\n}\n\n/**\n * Options for creating a gradient fill.\n * @category scene\n * @standard\n */\nexport type GradientOptions = LinearGradientOptions | RadialGradientOptions;\n\n/**\n * If no color stops are provided, we use a default gradient of white to black - this is to avoid a blank gradient if a dev\n * forgets to set them.\n */\nconst emptyColorStops: { offset: number, color: string }[] = [{ offset: 0, color: 'white' }, { offset: 1, color: 'black' }];\n\n/**\n * Class representing a gradient fill that can be used to fill shapes and text.\n * Supports both linear and radial gradients with multiple color stops.\n *\n * For linear gradients, color stops define colors and positions (0 to 1) along a line from start point (x0,y0)\n * to end point (x1,y1).\n *\n * For radial gradients, color stops define colors between two circles - an inner circle centered at (x0,y0) with radius r0,\n * and an outer circle centered at (x1,y1) with radius r1.\n * @example\n * ```ts\n * // Create a vertical linear gradient from red to blue\n * const linearGradient = new FillGradient({\n *     type: 'linear',\n *     start: { x: 0, y: 0 },  // Start at top\n *     end: { x: 0, y: 1 },    // End at bottom\n *     colorStops: [\n *         { offset: 0, color: 'red' },   // Red at start\n *         { offset: 1, color: 'blue' }   // Blue at end\n *     ],\n *     // Use normalized coordinate system where (0,0) is the top-left and (1,1) is the bottom-right of the shape\n *     textureSpace: 'local'\n * });\n *\n * // Create a radial gradient from yellow center to green edge\n * const radialGradient = new FillGradient({\n *     type: 'radial',\n *     center: { x: 0.5, y: 0.5 },\n *     innerRadius: 0,\n *     outerCenter: { x: 0.5, y: 0.5 },\n *     outerRadius: 0.5,\n *     colorStops: [\n *         { offset: 0, color: 'yellow' }, // Center color\n *         { offset: 1, color: 'green' }   // Edge color\n *     ],\n *     // Use normalized coordinate system where (0,0) is the top-left and (1,1) is the bottom-right of the shape\n *     textureSpace: 'local'\n * });\n *\n * // Create a rainbow linear gradient in global coordinates\n * const globalGradient = new FillGradient({\n *     type: 'linear',\n *     start: { x: 0, y: 0 },\n *     end: { x: 100, y: 0 },\n *     colorStops: [\n *         { offset: 0, color: 0xff0000 },    // Red\n *         { offset: 0.33, color: 0x00ff00 }, // Green\n *         { offset: 0.66, color: 0x0000ff }, // Blue\n *         { offset: 1, color: 0xff00ff }     // Purple\n *     ],\n *     textureSpace: 'global'  // Use world coordinates\n * });\n *\n * // Create an offset radial gradient\n * const offsetRadial = new FillGradient({\n *     type: 'radial',\n *     center: { x: 0.3, y: 0.3 },\n *     innerRadius: 0.1,\n *     outerCenter: { x: 0.5, y: 0.5 },\n *     outerRadius: 0.5,\n *     colorStops: [\n *         { offset: 0, color: 'white' },\n *         { offset: 1, color: 'black' }\n *     ],\n *     // Use normalized coordinate system where (0,0) is the top-left and (1,1) is the bottom-right of the shape\n *     textureSpace: 'local'\n * });\n * ```\n *\n * Internally this creates a  texture of the gradient then applies a\n * transform to it to give it the correct size and angle.\n *\n * This means that it's important to destroy a gradient when it is no longer needed\n * to avoid memory leaks.\n *\n * If you want to animate a gradient then it's best to modify and update an existing one\n * rather than creating a whole new one each time. That or use a custom shader.\n * @category scene\n * @standard\n */\nexport class FillGradient implements CanvasGradient\n{\n    /** Default options for creating a gradient fill */\n    public static readonly defaultLinearOptions: LinearGradientOptions = {\n        start: { x: 0, y: 0 },\n        end: { x: 0, y: 1 },\n        colorStops: [],\n        textureSpace: 'local',\n        type: 'linear',\n        textureSize: 256,\n        wrapMode: 'clamp-to-edge'\n    };\n\n    /** Default options for creating a radial gradient fill */\n    public static readonly defaultRadialOptions: RadialGradientOptions = {\n        center: { x: 0.5, y: 0.5 },\n        innerRadius: 0,\n        outerRadius: 0.5,\n        colorStops: [],\n        scale: 1,\n        textureSpace: 'local',\n        type: 'radial',\n        textureSize: 256,\n        wrapMode: 'clamp-to-edge'\n    };\n\n    /**\n     * Unique identifier for this gradient instance\n     * @internal\n     */\n    public readonly uid: number = uid('fillGradient');\n    /**\n     * Internal tick counter to track changes in the gradient.\n     * This is used to invalidate the gradient when the texture changes.\n     * @internal\n     */\n    public _tick: number = 0;\n    /** Type of gradient - currently only supports 'linear' */\n    public readonly type: GradientType = 'linear';\n\n    /** Internal texture used to render the gradient */\n    public texture: Texture;\n    /** Transform matrix for positioning the gradient */\n    public transform: Matrix;\n    /** Array of color stops defining the gradient */\n    public colorStops: Array<{ offset: number, color: string }> = [];\n\n    /** Whether gradient coordinates are in local or global space */\n    public textureSpace: TextureSpace;\n    private readonly _textureSize: number;\n\n    /** The start point of the linear gradient */\n    public start: PointData;\n    /** The end point of the linear gradient */\n    public end: PointData;\n    /** The wrap mode of the gradient texture */\n    private readonly _wrapMode: WRAP_MODE;\n\n    /** The center point of the inner circle of the radial gradient */\n    public center: PointData;\n    /** The center point of the outer circle of the radial gradient */\n    public outerCenter: PointData;\n    /** The radius of the inner circle of the radial gradient */\n    public innerRadius: number;\n    /** The radius of the outer circle of the radial gradient */\n    public outerRadius: number;\n    /** The scale of the radial gradient */\n    public scale: number;\n    /** The rotation of the radial gradient */\n    public rotation: number;\n\n    /**\n     * Creates a new gradient fill. The constructor behavior changes based on the gradient type.\n     * @param {GradientOptions} options - The options for the gradient\n     * @see {@link LinearGradientOptions}\n     * @see {@link RadialGradientOptions}\n     */\n    constructor(options: GradientOptions);\n    /**\n     * Deprecated: Use the options object instead.\n     * @deprecated since 8.5.2\n     * @ignore\n     */\n    constructor(\n        x0?: number,\n        y0?: number,\n        x1?: number,\n        y1?: number,\n        textureSpace?: TextureSpace,\n        textureSize?: number\n    );\n    constructor(...args: [GradientOptions] | [number?, number?, number?, number?, TextureSpace?, number?])\n    {\n        let options = ensureGradientOptions(args);\n\n        const defaults = options.type === 'radial' ? FillGradient.defaultRadialOptions : FillGradient.defaultLinearOptions;\n\n        options = { ...defaults, ...definedProps(options) };\n\n        this._textureSize = options.textureSize;\n        this._wrapMode = options.wrapMode;\n\n        if (options.type === 'radial')\n        {\n            this.center = options.center;\n            this.outerCenter = options.outerCenter ?? this.center;\n            this.innerRadius = options.innerRadius;\n            this.outerRadius = options.outerRadius;\n            this.scale = options.scale;\n            this.rotation = options.rotation;\n        }\n        else\n        {\n            this.start = options.start;\n            this.end = options.end;\n        }\n\n        this.textureSpace = options.textureSpace;\n\n        this.type = options.type;\n        options.colorStops.forEach((stop) =>\n        {\n            this.addColorStop(stop.offset, stop.color);\n        });\n    }\n\n    /**\n     * Adds a color stop to the gradient\n     * @param offset - Position of the stop (0-1)\n     * @param color - Color of the stop\n     * @returns This gradient instance for chaining\n     */\n    public addColorStop(offset: number, color: ColorSource): this\n    {\n        this.colorStops.push({ offset, color: Color.shared.setValue(color).toHexa() });\n\n        return this;\n    }\n\n    /**\n     * Builds the internal texture and transform for the gradient.\n     * Called automatically when the gradient is first used.\n     * @internal\n     */\n    public buildLinearGradient(): void\n    {\n        if (this.texture) return;\n\n        let { x: x0, y: y0 } = this.start;\n        let { x: x1, y: y1 } = this.end;\n\n        let dx = x1 - x0;\n        let dy = y1 - y0;\n\n        // Determine flip based on original dx/dy and swap coordinates if necessary\n        const flip = dx < 0 || dy < 0;\n\n        if (this._wrapMode === 'clamp-to-edge')\n        {\n            if (dx < 0)\n            {\n                const temp = x0;\n\n                x0 = x1;\n                x1 = temp;\n                dx *= -1;\n            }\n            if (dy < 0)\n            {\n                const temp = y0;\n\n                y0 = y1;\n                y1 = temp;\n                dy *= -1;\n            }\n        }\n\n        const colorStops = this.colorStops.length ? this.colorStops : emptyColorStops;\n\n        const defaultSize = this._textureSize;\n\n        const { canvas, context } = getCanvas(defaultSize, 1);\n\n        const gradient = !flip\n            ? context.createLinearGradient(0, 0, this._textureSize, 0)\n            : context.createLinearGradient(this._textureSize, 0, 0, 0);\n\n        addColorStops(gradient, colorStops);\n\n        context.fillStyle = gradient;\n        context.fillRect(0, 0, defaultSize, 1);\n\n        this.texture = new Texture({\n            source: new ImageSource({\n                resource: canvas,\n                addressMode: this._wrapMode,\n            }),\n        });\n\n        // generate some UVS based on the gradient direction sent\n\n        const dist = Math.sqrt((dx * dx) + (dy * dy));\n        const angle = Math.atan2(dy, dx);\n\n        // little offset to stop the uvs from flowing over the edge..\n        // this matrix is inverted when used in the graphics\n        // add a tiny off set to prevent uv bleeding..\n        const m = new Matrix();\n\n        m.scale((dist / defaultSize), 1);\n        m.rotate(angle);\n        m.translate(x0, y0);\n\n        if (this.textureSpace === 'local')\n        {\n            m.scale(defaultSize, defaultSize);\n        }\n        this.transform = m;\n    }\n\n    /**\n     * Builds the internal texture and transform for the gradient.\n     * Called automatically when the gradient is first used.\n     * @internal\n     */\n    public buildGradient(): void\n    {\n        if (!this.texture) this._tick++;\n        if (this.type === 'linear')\n        {\n            this.buildLinearGradient();\n        }\n        else\n        {\n            this.buildRadialGradient();\n        }\n    }\n\n    /**\n     * Builds the internal texture and transform for the radial gradient.\n     * Called automatically when the gradient is first used.\n     * @internal\n     */\n    public buildRadialGradient(): void\n    {\n        if (this.texture) return;\n\n        const colorStops = this.colorStops.length ? this.colorStops : emptyColorStops;\n\n        const defaultSize = this._textureSize;\n        const { canvas, context } = getCanvas(defaultSize, defaultSize);\n\n        const { x: x0, y: y0 } = this.center;\n        const { x: x1, y: y1 } = this.outerCenter;\n\n        const r0 = this.innerRadius;\n        const r1 = this.outerRadius;\n\n        const ox = x1 - r1;\n        const oy = y1 - r1;\n\n        const scale = defaultSize / (r1 * 2);\n\n        const cx = (x0 - ox) * scale;\n        const cy = (y0 - oy) * scale;\n\n        const gradient = context.createRadialGradient(\n            cx,\n            cy,\n            r0 * scale,\n            (x1 - ox) * scale,\n            (y1 - oy) * scale,\n            r1 * scale\n        );\n\n        addColorStops(gradient, colorStops);\n\n        context.fillStyle = colorStops[colorStops.length - 1].color;\n        context.fillRect(0, 0, defaultSize, defaultSize);\n\n        context.fillStyle = gradient;\n\n        // First translate to center\n        context.translate(cx, cy);\n\n        // Then apply rotation\n        context.rotate(this.rotation);\n\n        // Then scale2\n        context.scale(1, this.scale);\n\n        // Finally translate back, taking scale into account\n        context.translate(-cx, -cy);\n\n        context.fillRect(0, 0, defaultSize, defaultSize);\n\n        this.texture = new Texture({\n            source: new ImageSource({\n                resource: canvas,\n                addressMode: this._wrapMode,\n            }),\n        });\n\n        const m = new Matrix();\n\n        // this matrix is inverted when used in the graphics\n        m.scale(1 / scale, 1 / scale);\n        m.translate(ox, oy);\n\n        if (this.textureSpace === 'local')\n        {\n            m.scale(defaultSize, defaultSize);\n        }\n\n        this.transform = m;\n    }\n\n    /** Destroys the gradient, releasing resources. This will also destroy the internal texture. */\n    public destroy(): void\n    {\n        this.texture?.destroy(true);\n        this.texture = null;\n        this.transform = null;\n        this.colorStops = [];\n        this.start = null;\n        this.end = null;\n        this.center = null;\n        this.outerCenter = null;\n    }\n\n    /**\n     * Returns a unique key for this gradient instance.\n     * This key is used for caching and texture management.\n     * @returns {string} Unique key for the gradient\n     */\n    public get styleKey(): string\n    {\n        return `fill-gradient-${this.uid}-${this._tick}`;\n    }\n}\n\nfunction addColorStops(gradient: CanvasGradient, colorStops: { offset: number, color: string }[]): void\n{\n    for (let i = 0; i < colorStops.length; i++)\n    {\n        const stop = colorStops[i];\n\n        gradient.addColorStop(stop.offset, stop.color);\n    }\n}\n\nfunction getCanvas(width: number, height: number): CanvasAndContext\n{\n    const canvas = DOMAdapter.get().createCanvas(width, height);\n    const context = canvas.getContext('2d');\n\n    return { canvas, context };\n}\n\n/**\n * Helper function to ensure consistent handling of gradient options.\n * This function handles both the new options object format and the deprecated parameter format.\n * @example\n * // New recommended way:\n * const options = ensureGradientOptions({\n *     start: { x: 0, y: 0 },\n *     end: { x: 100, y: 100 },\n *     textureSpace: 'local'\n * });\n *\n * // Deprecated way (will show warning in debug):\n * const options = ensureGradientOptions([0, 0, 100, 100, 'local']);\n * @param args - Arguments passed to gradient constructor\n * @returns Normalized gradient options object\n * @internal\n */\nfunction ensureGradientOptions(\n    args: any[],\n): GradientOptions\n{\n    let options = (args[0] ?? {}) as GradientOptions;\n\n    // @deprecated\n    if (typeof options === 'number' || args[1])\n    {\n        // #if _DEBUG\n        deprecation('8.5.2', `use options object instead`);\n        // #endif\n\n        options = {\n            type: 'linear',\n            start: { x: args[0], y: args[1] },\n            end: { x: args[2], y: args[3] },\n            textureSpace: args[4] as 'global' | 'local',\n            textureSize: args[5] ?? FillGradient.defaultLinearOptions.textureSize\n        };\n    }\n\n    return options;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AA4HA,MAAM,eAAuD,GAAA;IAAC;QAAE,MAAA,EAAQ,CAAG;QAAA,KAAA,EAAO,OAAQ;IAAA,CAAA;IAAG;QAAE,MAAA,EAAQ,CAAG;QAAA,KAAA,EAAO;IAAA,CAAS;CAAA,CAAA;AAkFnH,MAAM,aAAA,GAAN,MAAM,aACb,CAAA;IA0FI,YAAA,GAAe,IACf,CAAA;QA9DA;;;KAAA,GAAgB,IAAA,CAAA,GAAA,OAAc,yNAAA,EAAI,cAAc,CAAA,CAAA;QAMhD;;;;KAAA,GAAA,IAAA,CAAO,KAAgB,GAAA,CAAA,CAAA;QAEvB,wDAAA,GAAA,IAAA,CAAgB,IAAqB,GAAA,QAAA,CAAA;QAOrC,+CAAA,GAAA,IAAA,CAAO,UAAA,GAAuD,EAAC,CAAA;QAgDvD,IAAA,OAAA,GAAU,sBAAsB,IAAI,CAAA,CAAA;QAExC,MAAM,WAAW,OAAQ,CAAA,IAAA,KAAS,QAAW,GAAA,aAAA,CAAa,oBAAA,GAAuB,aAAa,CAAA,oBAAA,CAAA;QAE9F,OAAA,GAAU;YAAE,GAAG,QAAA;YAAU,OAAG,yPAAA,EAAa,OAAO,CAAE;QAAA,CAAA,CAAA;QAElD,IAAA,CAAK,YAAA,GAAe,OAAQ,CAAA,WAAA,CAAA;QAC5B,IAAA,CAAK,SAAA,GAAY,OAAQ,CAAA,QAAA,CAAA;QAErB,IAAA,OAAA,CAAQ,IAAA,KAAS,QACrB,EAAA;YACI,IAAA,CAAK,MAAA,GAAS,OAAQ,CAAA,MAAA,CAAA;YACjB,IAAA,CAAA,WAAA,GAAc,OAAQ,CAAA,WAAA,IAAe,IAAK,CAAA,MAAA,CAAA;YAC/C,IAAA,CAAK,WAAA,GAAc,OAAQ,CAAA,WAAA,CAAA;YAC3B,IAAA,CAAK,WAAA,GAAc,OAAQ,CAAA,WAAA,CAAA;YAC3B,IAAA,CAAK,KAAA,GAAQ,OAAQ,CAAA,KAAA,CAAA;YACrB,IAAA,CAAK,QAAA,GAAW,OAAQ,CAAA,QAAA,CAAA;QAAA,CAG5B,MAAA;YACI,IAAA,CAAK,KAAA,GAAQ,OAAQ,CAAA,KAAA,CAAA;YACrB,IAAA,CAAK,GAAA,GAAM,OAAQ,CAAA,GAAA,CAAA;QAAA,CACvB;QAEA,IAAA,CAAK,YAAA,GAAe,OAAQ,CAAA,YAAA,CAAA;QAE5B,IAAA,CAAK,IAAA,GAAO,OAAQ,CAAA,IAAA,CAAA;QACZ,OAAA,CAAA,UAAA,CAAW,OAAQ,CAAA,CAAC,IAC5B,KAAA;YACI,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK,MAAQ,EAAA,IAAA,CAAK,KAAK,CAAA,CAAA;QAAA,CAC5C,CAAA,CAAA;IAAA,CACL;IAAA;;;;;GAAA,GAQO,YAAA,CAAa,MAAA,EAAgB,KACpC,EAAA;QACI,IAAA,CAAK,UAAW,CAAA,IAAA,CAAK;YAAE,MAAA;YAAQ,KAAO,EAAA,qNAAA,CAAM,MAAO,CAAA,QAAA,CAAS,KAAK,CAAA,CAAE,MAAO,EAAA;QAAA,CAAG,CAAA,CAAA;QAEtE,OAAA,IAAA,CAAA;IAAA,CACX;IAAA;;;;GAAA,GAOO,mBACP,GAAA;QACI,IAAI,IAAK,CAAA,OAAA,EAAS,OAAA;QAElB,IAAI,EAAE,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAA,GAAO,IAAK,CAAA,KAAA,CAAA;QAC5B,IAAI,EAAE,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAA,GAAO,IAAK,CAAA,GAAA,CAAA;QAE5B,IAAI,KAAK,EAAK,GAAA,EAAA,CAAA;QACd,IAAI,KAAK,EAAK,GAAA,EAAA,CAAA;QAGR,MAAA,IAAA,GAAO,EAAK,GAAA,CAAA,IAAK,EAAK,GAAA,CAAA,CAAA;QAExB,IAAA,IAAA,CAAK,SAAA,KAAc,eACvB,EAAA;YACI,IAAI,KAAK,CACT,EAAA;gBACI,MAAM,IAAO,GAAA,EAAA,CAAA;gBAER,EAAA,GAAA,EAAA,CAAA;gBACA,EAAA,GAAA,IAAA,CAAA;gBACC,EAAA,IAAA,CAAA,CAAA,CAAA;YAAA,CACV;YACA,IAAI,KAAK,CACT,EAAA;gBACI,MAAM,IAAO,GAAA,EAAA,CAAA;gBAER,EAAA,GAAA,EAAA,CAAA;gBACA,EAAA,GAAA,IAAA,CAAA;gBACC,EAAA,IAAA,CAAA,CAAA,CAAA;YAAA,CACV;QAAA,CACJ;QAEA,MAAM,UAAa,GAAA,IAAA,CAAK,UAAW,CAAA,MAAA,GAAS,IAAA,CAAK,UAAa,GAAA,eAAA,CAAA;QAE9D,MAAM,cAAc,IAAK,CAAA,YAAA,CAAA;QAEzB,MAAM,EAAE,MAAQ,EAAA,OAAA,EAAY,GAAA,SAAA,CAAU,aAAa,CAAC,CAAA,CAAA;QAEpD,MAAM,WAAW,CAAC,IAAA,GACZ,OAAQ,CAAA,oBAAA,CAAqB,GAAG,CAAG,EAAA,IAAA,CAAK,YAAc,EAAA,CAAC,IACvD,OAAQ,CAAA,oBAAA,CAAqB,IAAA,CAAK,YAAc,EAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;QAE7D,aAAA,CAAc,UAAU,UAAU,CAAA,CAAA;QAElC,OAAA,CAAQ,SAAY,GAAA,QAAA,CAAA;QACpB,OAAA,CAAQ,QAAS,CAAA,CAAA,EAAG,CAAG,EAAA,WAAA,EAAa,CAAC,CAAA,CAAA;QAEhC,IAAA,CAAA,OAAA,GAAU,IAAI,+PAAQ,CAAA;YACvB,MAAA,EAAQ,IAAI,kRAAY,CAAA;gBACpB,QAAU,EAAA,MAAA;gBACV,aAAa,IAAK,CAAA,SAAA;YAAA,CACrB,CAAA;QAAA,CACJ,CAAA,CAAA;QAID,MAAM,OAAO,IAAK,CAAA,IAAA,CAAM,EAAK,GAAA,EAAA,GAAO,KAAK,EAAG,CAAA,CAAA;QAC5C,MAAM,KAAQ,GAAA,IAAA,CAAK,KAAM,CAAA,EAAA,EAAI,EAAE,CAAA,CAAA;QAKzB,MAAA,CAAA,GAAI,IAAI,iOAAO,EAAA,CAAA;QAEnB,CAAA,CAAA,KAAA,CAAO,IAAO,GAAA,WAAA,EAAc,CAAC,CAAA,CAAA;QAC/B,CAAA,CAAE,MAAA,CAAO,KAAK,CAAA,CAAA;QACZ,CAAA,CAAA,SAAA,CAAU,IAAI,EAAE,CAAA,CAAA;QAEd,IAAA,IAAA,CAAK,YAAA,KAAiB,OAC1B,EAAA;YACM,CAAA,CAAA,KAAA,CAAM,aAAa,WAAW,CAAA,CAAA;QAAA,CACpC;QACA,IAAA,CAAK,SAAY,GAAA,CAAA,CAAA;IAAA,CACrB;IAAA;;;;GAAA,GAOO,aACP,GAAA;QACI,IAAI,CAAC,IAAK,CAAA,OAAA,EAAc,IAAA,CAAA,KAAA,EAAA,CAAA;QACpB,IAAA,IAAA,CAAK,IAAA,KAAS,QAClB,EAAA;YACI,IAAA,CAAK,mBAAoB,EAAA,CAAA;QAAA,CAG7B,MAAA;YACI,IAAA,CAAK,mBAAoB,EAAA,CAAA;QAAA,CAC7B;IAAA,CACJ;IAAA;;;;GAAA,GAOO,mBACP,GAAA;QACI,IAAI,IAAK,CAAA,OAAA,EAAS,OAAA;QAElB,MAAM,UAAa,GAAA,IAAA,CAAK,UAAW,CAAA,MAAA,GAAS,IAAA,CAAK,UAAa,GAAA,eAAA,CAAA;QAE9D,MAAM,cAAc,IAAK,CAAA,YAAA,CAAA;QACzB,MAAM,EAAE,MAAQ,EAAA,OAAA,EAAY,GAAA,SAAA,CAAU,aAAa,WAAW,CAAA,CAAA;QAE9D,MAAM,EAAE,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAA,GAAO,IAAK,CAAA,MAAA,CAAA;QAC9B,MAAM,EAAE,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAA,GAAO,IAAK,CAAA,WAAA,CAAA;QAE9B,MAAM,KAAK,IAAK,CAAA,WAAA,CAAA;QAChB,MAAM,KAAK,IAAK,CAAA,WAAA,CAAA;QAEhB,MAAM,KAAK,EAAK,GAAA,EAAA,CAAA;QAChB,MAAM,KAAK,EAAK,GAAA,EAAA,CAAA;QAEV,MAAA,KAAA,GAAQ,cAAA,CAAe,EAAK,GAAA,CAAA,CAAA,CAAA;QAE5B,MAAA,EAAA,GAAA,CAAM,KAAK,EAAM,IAAA,KAAA,CAAA;QACjB,MAAA,EAAA,GAAA,CAAM,KAAK,EAAM,IAAA,KAAA,CAAA;QAEvB,MAAM,WAAW,OAAQ,CAAA,oBAAA,CACrB,EAAA,EACA,EAAA,EACA,EAAK,GAAA,KAAA,EAAA,CACJ,KAAK,EAAM,IAAA,KAAA,EAAA,CACX,KAAK,EAAM,IAAA,KAAA,EACZ,EAAK,GAAA,KAAA;QAGT,aAAA,CAAc,UAAU,UAAU,CAAA,CAAA;QAElC,OAAA,CAAQ,SAAY,GAAA,UAAA,CAAW,UAAW,CAAA,MAAA,GAAS,CAAC,CAAE,CAAA,KAAA,CAAA;QACtD,OAAA,CAAQ,QAAS,CAAA,CAAA,EAAG,CAAG,EAAA,WAAA,EAAa,WAAW,CAAA,CAAA;QAE/C,OAAA,CAAQ,SAAY,GAAA,QAAA,CAAA;QAGZ,OAAA,CAAA,SAAA,CAAU,IAAI,EAAE,CAAA,CAAA;QAGhB,OAAA,CAAA,MAAA,CAAO,IAAA,CAAK,QAAQ,CAAA,CAAA;QAGpB,OAAA,CAAA,KAAA,CAAM,CAAG,EAAA,IAAA,CAAK,KAAK,CAAA,CAAA;QAG3B,OAAA,CAAQ,SAAU,CAAA,CAAC,EAAI,EAAA,CAAC,EAAE,CAAA,CAAA;QAE1B,OAAA,CAAQ,QAAS,CAAA,CAAA,EAAG,CAAG,EAAA,WAAA,EAAa,WAAW,CAAA,CAAA;QAE1C,IAAA,CAAA,OAAA,GAAU,IAAI,+PAAQ,CAAA;YACvB,MAAA,EAAQ,IAAI,kRAAY,CAAA;gBACpB,QAAU,EAAA,MAAA;gBACV,aAAa,IAAK,CAAA,SAAA;YAAA,CACrB,CAAA;QAAA,CACJ,CAAA,CAAA;QAEK,MAAA,CAAA,GAAI,IAAI,iOAAO,EAAA,CAAA;QAGrB,CAAA,CAAE,KAAM,CAAA,CAAA,GAAI,KAAO,EAAA,CAAA,GAAI,KAAK,CAAA,CAAA;QAC1B,CAAA,CAAA,SAAA,CAAU,IAAI,EAAE,CAAA,CAAA;QAEd,IAAA,IAAA,CAAK,YAAA,KAAiB,OAC1B,EAAA;YACM,CAAA,CAAA,KAAA,CAAM,aAAa,WAAW,CAAA,CAAA;QAAA,CACpC;QAEA,IAAA,CAAK,SAAY,GAAA,CAAA,CAAA;IAAA,CACrB;IAAA,6FAAA,GAGO,OACP,GAAA;QACS,IAAA,CAAA,OAAA,EAAS,QAAQ,IAAI,CAAA,CAAA;QAC1B,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;QACf,IAAA,CAAK,SAAY,GAAA,IAAA,CAAA;QACjB,IAAA,CAAK,UAAA,GAAa,EAAC,CAAA;QACnB,IAAA,CAAK,KAAQ,GAAA,IAAA,CAAA;QACb,IAAA,CAAK,GAAM,GAAA,IAAA,CAAA;QACX,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QACd,IAAA,CAAK,WAAc,GAAA,IAAA,CAAA;IAAA,CACvB;IAAA;;;;GAAA,GAOA,IAAW,QACX,GAAA;QACI,OAAO,CAAiB,cAAA,EAAA,IAAA,CAAK,GAAG,CAAA,CAAA,EAAI,IAAA,CAAK,KAAK,CAAA,CAAA,CAAA;IAAA,CAClD;AACJ,CAAA,CAAA;AAAA,iDAAA,GAnVa,aAAA,CAGc,oBAA8C,GAAA;IACjE,KAAO,EAAA;QAAE,CAAG,EAAA,CAAA;QAAG,GAAG,CAAE;IAAA,CAAA;IACpB,GAAK,EAAA;QAAE,CAAG,EAAA,CAAA;QAAG,GAAG,CAAE;IAAA,CAAA;IAClB,YAAY,EAAC;IACb,YAAc,EAAA,OAAA;IACd,IAAM,EAAA,QAAA;IACN,WAAa,EAAA,GAAA;IACb,QAAU,EAAA,eAAA;AACd,CAAA,CAAA;AAAA,wDAAA,GAXS,aAAA,CAcc,oBAA8C,GAAA;IACjE,MAAQ,EAAA;QAAE,CAAG,EAAA,GAAA;QAAK,GAAG,GAAI;IAAA,CAAA;IACzB,WAAa,EAAA,CAAA;IACb,WAAa,EAAA,GAAA;IACb,YAAY,EAAC;IACb,KAAO,EAAA,CAAA;IACP,YAAc,EAAA,OAAA;IACd,IAAM,EAAA,QAAA;IACN,WAAa,EAAA,GAAA;IACb,QAAU,EAAA,eAAA;AACd,CAAA,CAAA;AAxBG,IAAM,YAAN,GAAA,cAAA;AAqVP,SAAS,aAAA,CAAc,QAAA,EAA0B,UACjD,EAAA;IACI,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,UAAA,CAAW,MAAA,EAAQ,CACvC,EAAA,CAAA;QACU,MAAA,IAAA,GAAO,UAAA,CAAW,CAAC,CAAA,CAAA;QAEzB,QAAA,CAAS,YAAa,CAAA,IAAA,CAAK,MAAQ,EAAA,IAAA,CAAK,KAAK,CAAA,CAAA;IAAA,CACjD;AACJ,CAAA;AAEA,SAAS,SAAA,CAAU,KAAA,EAAe,MAClC,EAAA;IACI,MAAM,SAAS,kOAAW,CAAA,GAAA,EAAM,CAAA,YAAA,CAAa,OAAO,MAAM,CAAA,CAAA;IACpD,MAAA,OAAA,GAAU,MAAO,CAAA,UAAA,CAAW,IAAI,CAAA,CAAA;IAE/B,OAAA;QAAE;QAAQ,OAAQ;IAAA,CAAA,CAAA;AAC7B,CAAA;AAmBA,SAAS,sBACL,IAEJ,EAAA;IACI,IAAI,OAAW,GAAA,IAAA,CAAK,CAAC,CAAA,IAAK,CAAA,CAAC,CAAA;IAG3B,IAAI,OAAO,OAAA,KAAY,QAAY,IAAA,IAAA,CAAK,CAAC,CACzC,EAAA;YAEI,4OAAA,EAAY,SAAS,CAA4B,0BAAA,CAAA,CAAA,CAAA;QAGvC,OAAA,GAAA;YACN,IAAM,EAAA,QAAA;YACN,KAAA,EAAO;gBAAE,CAAG,EAAA,IAAA,CAAK,CAAC,CAAG;gBAAA,CAAA,EAAG,IAAK,CAAA,CAAC,CAAE;YAAA,CAAA;YAChC,GAAA,EAAK;gBAAE,CAAG,EAAA,IAAA,CAAK,CAAC,CAAG;gBAAA,CAAA,EAAG,IAAK,CAAA,CAAC,CAAE;YAAA,CAAA;YAC9B,YAAA,EAAc,IAAA,CAAK,CAAC,CAAA;YACpB,WAAa,EAAA,IAAA,CAAK,CAAC,CAAA,IAAK,aAAa,oBAAqB,CAAA,WAAA;QAAA,CAC9D,CAAA;IAAA,CACJ;IAEO,OAAA,OAAA,CAAA;AACX","debugId":null}},
    {"offset": {"line": 4556, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/fill/FillPattern.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/fill/FillPattern.ts"],"sourcesContent":["import { Matrix } from '../../../../maths/matrix/Matrix';\nimport { uid } from '../../../../utils/data/uid';\n\nimport type { WRAP_MODE } from '../../../../rendering/renderers/shared/texture/const';\nimport type { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\n\n/**\n * Defines the repetition modes for fill patterns.\n *\n * - `repeat`: The pattern repeats in both directions.\n * - `repeat-x`: The pattern repeats horizontally only.\n * - `repeat-y`: The pattern repeats vertically only.\n * - `no-repeat`: The pattern does not repeat.\n * @category scene\n * @standard\n */\nexport type PatternRepetition = 'repeat' | 'repeat-x' | 'repeat-y' | 'no-repeat';\n\nconst repetitionMap = {\n    repeat: {\n        addressModeU: 'repeat',\n        addressModeV: 'repeat',\n    },\n    'repeat-x': {\n        addressModeU: 'repeat',\n        addressModeV: 'clamp-to-edge',\n    },\n    'repeat-y': {\n        addressModeU: 'clamp-to-edge',\n        addressModeV: 'repeat',\n    },\n    'no-repeat': {\n        addressModeU: 'clamp-to-edge',\n        addressModeV: 'clamp-to-edge',\n    },\n};\n\n/**\n * A class that represents a fill pattern for use in Text and Graphics fills.\n * It allows for textures to be used as patterns, with optional repetition modes.\n * @category scene\n * @standard\n * @example\n * const txt = await Assets.load('https://pixijs.com/assets/bg_scene_rotate.jpg');\n * const pat = new FillPattern(txt, 'repeat');\n *\n * const textPattern = new Text({\n *     text: 'PixiJS',\n *     style: {\n *         fontSize: 36,\n *         fill: 0xffffff,\n *         stroke: { fill: pat, width: 10 },\n *     },\n * });\n *\n * textPattern.y = (textGradient.height);\n */\nexport class FillPattern implements CanvasPattern\n{\n    /**\n     * unique id for this fill pattern\n     * @internal\n     */\n    public readonly uid: number = uid('fillPattern');\n    /**\n     * Internal tick counter to track changes in the pattern.\n     * This is used to invalidate the pattern when the texture or transform changes.\n     * @internal\n     */\n    public _tick: number = 0;\n    /** @internal */\n    public _texture: Texture;\n    /** The transform matrix applied to the pattern */\n    public transform = new Matrix();\n\n    constructor(texture: Texture, repetition?: PatternRepetition)\n    {\n        this.texture = texture;\n\n        this.transform.scale(\n            1 / texture.frame.width,\n            1 / texture.frame.height\n        );\n\n        if (repetition)\n        {\n            texture.source.style.addressModeU = repetitionMap[repetition].addressModeU as WRAP_MODE;\n            texture.source.style.addressModeV = repetitionMap[repetition].addressModeV as WRAP_MODE;\n        }\n    }\n\n    /**\n     * Sets the transform for the pattern\n     * @param transform - The transform matrix to apply to the pattern.\n     * If not provided, the pattern will use the default transform.\n     */\n    public setTransform(transform?: Matrix): void\n    {\n        const texture = this.texture;\n\n        this.transform.copyFrom(transform);\n        this.transform.invert();\n        //  transform.scale\n        this.transform.scale(\n            1 / texture.frame.width,\n            1 / texture.frame.height\n        );\n\n        this._tick++;\n    }\n\n    /** Internal texture used to render the gradient */\n    public get texture()\n    {\n        return this._texture;\n    }\n    public set texture(value: Texture)\n    {\n        if (this._texture === value) return;\n\n        this._texture = value;\n        this._tick++;\n    }\n\n    /**\n     * Returns a unique key for this instance.\n     * This key is used for caching.\n     * @returns {string} Unique key for the instance\n     */\n    public get styleKey(): string\n    {\n        return `fill-pattern-${this.uid}-${this._tick}`;\n    }\n\n    /** Destroys the fill pattern, releasing resources. This will also destroy the internal texture. */\n    public destroy(): void\n    {\n        this.texture.destroy(true);\n        this.texture = null;\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;AAkBA,MAAM,aAAgB,GAAA;IAClB,MAAQ,EAAA;QACJ,YAAc,EAAA,QAAA;QACd,YAAc,EAAA,QAAA;IAAA,CAClB;IACA,UAAY,EAAA;QACR,YAAc,EAAA,QAAA;QACd,YAAc,EAAA,eAAA;IAAA,CAClB;IACA,UAAY,EAAA;QACR,YAAc,EAAA,eAAA;QACd,YAAc,EAAA,QAAA;IAAA,CAClB;IACA,WAAa,EAAA;QACT,YAAc,EAAA,eAAA;QACd,YAAc,EAAA,eAAA;IAAA,CAClB;AACJ,CAAA,CAAA;AAsBO,MAAM,WACb,CAAA;IAiBI,WAAA,CAAY,OAAA,EAAkB,UAC9B,CAAA;QAbA;;;KAAA,GAAgB,IAAA,CAAA,GAAA,OAAc,yNAAA,EAAI,aAAa,CAAA,CAAA;QAM/C;;;;KAAA,GAAA,IAAA,CAAO,KAAgB,GAAA,CAAA,CAAA;QAIvB,gDAAA,GAAO,IAAA,CAAA,SAAA,GAAY,IAAI,iOAAO,EAAA,CAAA;QAI1B,IAAA,CAAK,OAAU,GAAA,OAAA,CAAA;QAEf,IAAA,CAAK,SAAU,CAAA,KAAA,CACX,CAAA,GAAI,QAAQ,KAAM,CAAA,KAAA,EAClB,CAAA,GAAI,QAAQ,KAAM,CAAA,MAAA;QAGtB,IAAI,UACJ,EAAA;YACI,OAAA,CAAQ,MAAO,CAAA,KAAA,CAAM,YAAe,GAAA,aAAA,CAAc,UAAU,CAAE,CAAA,YAAA,CAAA;YAC9D,OAAA,CAAQ,MAAO,CAAA,KAAA,CAAM,YAAe,GAAA,aAAA,CAAc,UAAU,CAAE,CAAA,YAAA,CAAA;QAAA,CAClE;IAAA,CACJ;IAAA;;;;GAAA,GAOO,aAAa,SACpB,EAAA;QACI,MAAM,UAAU,IAAK,CAAA,OAAA,CAAA;QAEhB,IAAA,CAAA,SAAA,CAAU,QAAA,CAAS,SAAS,CAAA,CAAA;QACjC,IAAA,CAAK,SAAA,CAAU,MAAO,EAAA,CAAA;QAEtB,IAAA,CAAK,SAAU,CAAA,KAAA,CACX,CAAA,GAAI,QAAQ,KAAM,CAAA,KAAA,EAClB,CAAA,GAAI,QAAQ,KAAM,CAAA,MAAA;QAGjB,IAAA,CAAA,KAAA,EAAA,CAAA;IAAA,CACT;IAAA,iDAAA,GAGA,IAAW,OACX,GAAA;QACI,OAAO,IAAK,CAAA,QAAA,CAAA;IAAA,CAChB;IACA,IAAW,QAAQ,KACnB,EAAA;QACI,IAAI,IAAA,CAAK,QAAa,KAAA,KAAA,EAAO,OAAA;QAE7B,IAAA,CAAK,QAAW,GAAA,KAAA,CAAA;QACX,IAAA,CAAA,KAAA,EAAA,CAAA;IAAA,CACT;IAAA;;;;GAAA,GAOA,IAAW,QACX,GAAA;QACI,OAAO,CAAgB,aAAA,EAAA,IAAA,CAAK,GAAG,CAAA,CAAA,EAAI,IAAA,CAAK,KAAK,CAAA,CAAA,CAAA;IAAA,CACjD;IAAA,iGAAA,GAGO,OACP,GAAA;QACS,IAAA,CAAA,OAAA,CAAQ,OAAA,CAAQ,IAAI,CAAA,CAAA;QACzB,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;IAAA,CACnB;AACJ","debugId":null}},
    {"offset": {"line": 4639, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/svg/parseSVGPath.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/svg/parseSVGPath.ts"],"sourcesContent":["import parse from 'parse-svg-path';\nimport { warn } from '../../../../utils/logging/warn';\n\nimport type { GraphicsPath } from '../path/GraphicsPath';\n\ninterface SubPath\n{\n    startX: number;\n    startY: number;\n}\n\n/**\n * Parses an SVG path data string and builds a GraphicsPath object from the commands.\n * This function handles all standard SVG path commands including moves, lines, curves and arcs.\n * It maintains state for the current position and subpaths to properly handle relative commands\n * and path closures.\n *\n * Supported SVG commands:\n * - M/m: Move to absolute/relative\n * - L/l: Line to absolute/relative\n * - H/h: Horizontal line absolute/relative\n * - V/v: Vertical line absolute/relative\n * - C/c: Cubic bezier curve absolute/relative\n * - S/s: Smooth cubic bezier curve absolute/relative\n * - Q/q: Quadratic bezier curve absolute/relative\n * - T/t: Smooth quadratic bezier curve absolute/relative\n * - A/a: Arc absolute/relative\n * - Z/z: Close path\n * @param svgPath - The SVG path data string to parse (e.g. \"M0,0 L100,100\")\n * @param path - The GraphicsPath object to build the path into\n * @returns The input path object with the SVG commands applied\n * @internal\n */\nexport function parseSVGPath(svgPath: string, path: GraphicsPath): GraphicsPath\n{\n    // Parse the SVG path string into an array of commands\n    const commands = parse(svgPath);\n\n    // Track subpaths for proper path closure handling\n    const subpaths: SubPath[] = [];\n    let currentSubPath: SubPath | null = null;\n\n    // Track current position for relative commands\n    let lastX = 0;\n    let lastY = 0;\n\n    // Process each command in sequence\n    for (let i = 0; i < commands.length; i++)\n    {\n        const command = commands[i];\n        const type = command[0]; // The command letter\n        const data = command; // The command parameters, 1-based indexed\n\n        switch (type)\n        {\n            case 'M': // Move To (absolute)\n                lastX = data[1];\n                lastY = data[2];\n\n                path.moveTo(lastX, lastY);\n                break;\n            case 'm': // Move To (relative)\n                lastX += data[1];\n                lastY += data[2];\n\n                path.moveTo(lastX, lastY);\n                break;\n            case 'H': // Horizontal Line To (absolute)\n                lastX = data[1];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'h': // Horizontal Line To (relative)\n                lastX += data[1];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'V': // Vertical Line To (absolute)\n                lastY = data[1];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'v': // Vertical Line To (relative)\n                lastY += data[1];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'L': // Line To (absolute)\n                lastX = data[1];\n                lastY = data[2];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'l': // Line To (relative)\n                lastX += data[1];\n                lastY += data[2];\n\n                path.lineTo(lastX, lastY);\n                break;\n            case 'C': // Cubic Bezier Curve (absolute)\n                lastX = data[5];\n                lastY = data[6];\n\n                path.bezierCurveTo(\n                    data[1], data[2], // First control point\n                    data[3], data[4], // Second control point\n                    lastX, lastY // End point\n                );\n                break;\n            case 'c': // Cubic Bezier Curve (relative)\n                path.bezierCurveTo(\n                    lastX + data[1], lastY + data[2], // First control point\n                    lastX + data[3], lastY + data[4], // Second control point\n                    lastX + data[5], lastY + data[6] // End point\n                );\n\n                lastX += data[5];\n                lastY += data[6];\n                break;\n            case 'S': // Smooth Cubic Bezier Curve (absolute)\n                lastX = data[3];\n                lastY = data[4];\n\n                path.bezierCurveToShort(\n                    data[1], data[2], // Control point\n                    lastX, lastY // End point\n                );\n                break;\n            case 's': // Smooth Cubic Bezier Curve (relative)\n                path.bezierCurveToShort(\n                    lastX + data[1], lastY + data[2], // Control point\n                    lastX + data[3], lastY + data[4], // End point\n                );\n\n                lastX += data[3];\n                lastY += data[4];\n                break;\n            case 'Q': // Quadratic Bezier Curve (absolute)\n                lastX = data[3];\n                lastY = data[4];\n\n                path.quadraticCurveTo(\n                    data[1], data[2], // Control point\n                    lastX, lastY // End point\n                );\n                break;\n            case 'q': // Quadratic Bezier Curve (relative)\n                path.quadraticCurveTo(\n                    lastX + data[1], lastY + data[2], // Control point\n                    lastX + data[3], lastY + data[4] // End point\n                );\n\n                lastX += data[3];\n                lastY += data[4];\n                break;\n            case 'T': // Smooth Quadratic Bezier Curve (absolute)\n                lastX = data[1];\n                lastY = data[2];\n\n                path.quadraticCurveToShort(\n                    lastX, lastY // End point\n                );\n                break;\n            case 't': // Smooth Quadratic Bezier Curve (relative)\n                lastX += data[1];\n                lastY += data[2];\n\n                path.quadraticCurveToShort(\n                    lastX, lastY // End point\n                );\n                break;\n            case 'A': // Arc (absolute)\n                lastX = data[6];\n                lastY = data[7];\n\n                path.arcToSvg(\n                    data[1], // rx\n                    data[2], // ry\n                    data[3], // x-axis-rotation\n                    data[4], // large-arc-flag\n                    data[5], // sweep-flag\n                    lastX, lastY // End point\n                );\n                break;\n            case 'a': // Arc (relative)\n                lastX += data[6];\n                lastY += data[7];\n\n                path.arcToSvg(\n                    data[1], // rx\n                    data[2], // ry\n                    data[3], // x-axis-rotation\n                    data[4], // large-arc-flag\n                    data[5], // sweep-flag\n                    lastX, lastY // End point\n                );\n                break;\n            case 'Z': // Close Path\n            case 'z':\n                path.closePath();\n                if (subpaths.length > 0)\n                {\n                    // Return to the start of the current subpath\n                    currentSubPath = subpaths.pop();\n                    if (currentSubPath)\n                    {\n                        lastX = currentSubPath.startX;\n                        lastY = currentSubPath.startY;\n                    }\n                    else\n                    {\n                        lastX = 0;\n                        lastY = 0;\n                    }\n                }\n                currentSubPath = null;\n                break;\n            default:\n                // #if _DEBUG\n                warn(`Unknown SVG path command: ${type}`);\n                // #endif\n        }\n\n        // Track subpath starts for path closure\n        if (type !== 'Z' && type !== 'z')\n        {\n            if (currentSubPath === null)\n            {\n                currentSubPath = { startX: lastX, startY: lastY };\n                subpaths.push(currentSubPath);\n            }\n        }\n    }\n\n    return path;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4799, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/BatchableGraphics.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/BatchableGraphics.ts"],"sourcesContent":["import { Matrix } from '../../../maths/matrix/Matrix';\nimport { multiplyHexColors } from '../../container/utils/multiplyHexColors';\n\nimport type { Batch, Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableMeshElement } from '../../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Graphics } from './Graphics';\n\nconst identityMatrix = new Matrix();\n\n/**\n * A batchable graphics object.\n * @ignore\n */\nexport class BatchableGraphics implements DefaultBatchableMeshElement\n{\n    public readonly packAsQuad = false;\n    public batcherName = 'default';\n\n    public texture: Texture;\n\n    public topology: Topology = 'triangle-list';\n    public renderable: Graphics;\n    public indexOffset: number;\n    public indexSize: number;\n    public attributeOffset: number;\n    public attributeSize: number;\n    public baseColor: number;\n    public alpha: number;\n    public applyTransform = true;\n    public roundPixels: 0 | 1 = 0;\n\n    public _indexStart: number;\n    public _textureId: number;\n    public _attributeStart: number;\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n\n    public geometryData: { vertices: number[]; uvs: number[]; indices: number[]; };\n\n    get uvs()\n    {\n        return this.geometryData.uvs;\n    }\n\n    get positions()\n    {\n        return this.geometryData.vertices;\n    }\n\n    get indices()\n    {\n        return this.geometryData.indices;\n    }\n\n    get blendMode()\n    {\n        if (this.renderable && this.applyTransform)\n        {\n            return this.renderable.groupBlendMode;\n        }\n\n        return 'normal';\n    }\n\n    get color()\n    {\n        const rgb = this.baseColor;\n        const bgr = (rgb >> 16) | (rgb & 0xff00) | ((rgb & 0xff) << 16);\n        const renderable = this.renderable;\n\n        if (renderable)\n        {\n            return multiplyHexColors(bgr, renderable.groupColor)\n            + ((this.alpha * renderable.groupAlpha * 255) << 24);\n        }\n\n        return bgr + ((this.alpha * 255) << 24);\n    }\n\n    get transform()\n    {\n        return this.renderable?.groupTransform || identityMatrix;\n    }\n\n    public copyTo(gpuBuffer: BatchableGraphics)\n    {\n        gpuBuffer.indexOffset = this.indexOffset;\n        gpuBuffer.indexSize = this.indexSize;\n\n        gpuBuffer.attributeOffset = this.attributeOffset;\n        gpuBuffer.attributeSize = this.attributeSize;\n\n        gpuBuffer.baseColor = this.baseColor;\n        gpuBuffer.alpha = this.alpha;\n\n        gpuBuffer.texture = this.texture;\n        gpuBuffer.geometryData = this.geometryData;\n\n        gpuBuffer.topology = this.topology;\n    }\n\n    public reset()\n    {\n        this.applyTransform = true;\n        this.renderable = null;\n        this.topology = 'triangle-list';\n    }\n\n    public destroy()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this.geometryData = null;\n\n        this._batcher.destroy();\n        this._batcher = null;\n        this._batch.destroy();\n        this._batch = null;\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4878, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildCircle.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildCircle.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { Circle } from '../../../../maths/shapes/Circle';\nimport type { Ellipse } from '../../../../maths/shapes/Ellipse';\nimport type { RoundedRectangle } from '../../../../maths/shapes/RoundedRectangle';\nimport type { ShapeBuildCommand } from './ShapeBuildCommand';\n\n/** @internal */\ntype RoundedShape = Circle | Ellipse | RoundedRectangle;\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @internal\n */\nexport const buildCircle: ShapeBuildCommand<RoundedShape> = {\n    extension: {\n        type: ExtensionType.ShapeBuilder,\n        name: 'circle',\n    },\n\n    build(shape: RoundedShape, points: number[]): boolean\n    {\n        let x;\n        let y;\n        let dx;\n        let dy;\n\n        let rx;\n        let ry;\n\n        if (shape.type === 'circle')\n        {\n            const circle = shape as Circle;\n\n            rx = ry = circle.radius;\n            if (rx <= 0)\n            {\n                return false;\n            }\n            x = circle.x;\n            y = circle.y;\n            dx = dy = 0;\n        }\n\n        else if (shape.type === 'ellipse')\n        {\n            const ellipse = shape as Ellipse;\n\n            rx = ellipse.halfWidth;\n            ry = ellipse.halfHeight;\n            if (rx <= 0 || ry <= 0)\n            { // skip zero ellipse\n                return false;\n            }\n            x = ellipse.x;\n            y = ellipse.y;\n            dx = dy = 0;\n        }\n        else\n        {\n            const roundedRect = shape as RoundedRectangle;\n            const halfWidth = roundedRect.width / 2;\n            const halfHeight = roundedRect.height / 2;\n\n            x = roundedRect.x + halfWidth;\n            y = roundedRect.y + halfHeight;\n            rx = ry = Math.max(0, Math.min(roundedRect.radius, Math.min(halfWidth, halfHeight)));\n            dx = halfWidth - rx;\n            dy = halfHeight - ry;\n        }\n\n        if (dx < 0 || dy < 0)\n        {\n            return false;\n        }\n\n        // Choose a number of segments such that the maximum absolute deviation from the circle is approximately 0.029\n        const n = Math.ceil(2.3 * Math.sqrt(rx + ry));\n        const m = (n * 8) + (dx ? 4 : 0) + (dy ? 4 : 0);\n\n        if (m === 0)\n        {\n            return false;\n        }\n\n        if (n === 0)\n        {\n            points[0] = points[6] = x + dx;\n            points[1] = points[3] = y + dy;\n            points[2] = points[4] = x - dx;\n            points[5] = points[7] = y - dy;\n\n            return true;\n        }\n\n        let j1 = 0;\n        let j2 = (n * 4) + (dx ? 2 : 0) + 2;\n        let j3 = j2;\n        let j4 = m;\n\n        let x0 = dx + rx;\n        let y0 = dy;\n        let x1 = x + x0;\n        let x2 = x - x0;\n        let y1 = y + y0;\n\n        points[j1++] = x1;\n        points[j1++] = y1;\n        points[--j2] = y1;\n        points[--j2] = x2;\n\n        if (dy)\n        {\n            const y2 = y - y0;\n\n            points[j3++] = x2;\n            points[j3++] = y2;\n            points[--j4] = y2;\n            points[--j4] = x1;\n        }\n\n        for (let i = 1; i < n; i++)\n        {\n            const a = Math.PI / 2 * (i / n);\n            const x0 = dx + (Math.cos(a) * rx);\n            const y0 = dy + (Math.sin(a) * ry);\n            const x1 = x + x0;\n            const x2 = x - x0;\n            const y1 = y + y0;\n            const y2 = y - y0;\n\n            points[j1++] = x1;\n            points[j1++] = y1;\n            points[--j2] = y1;\n            points[--j2] = x2;\n            points[j3++] = x2;\n            points[j3++] = y2;\n            points[--j4] = y2;\n            points[--j4] = x1;\n        }\n\n        x0 = dx;\n        y0 = dy + ry;\n        x1 = x + x0;\n        x2 = x - x0;\n        y1 = y + y0;\n        const y2 = y - y0;\n\n        points[j1++] = x1;\n        points[j1++] = y1;\n        points[--j4] = y2;\n        points[--j4] = x1;\n\n        if (dx)\n        {\n            points[j1++] = x2;\n            points[j1++] = y1;\n            points[--j4] = y2;\n            points[--j4] = x2;\n        }\n\n        return true;\n    },\n\n    triangulate(points, vertices, verticesStride, verticesOffset, indices, indicesOffset)\n    {\n        if (points.length === 0)\n        {\n            return;\n        }\n\n        // Compute center (average of all points)\n        let centerX = 0; let\n            centerY = 0;\n\n        for (let i = 0; i < points.length; i += 2)\n        {\n            centerX += points[i];\n            centerY += points[i + 1];\n        }\n        centerX /= (points.length / 2);\n        centerY /= (points.length / 2);\n\n        // Set center vertex\n        let count = verticesOffset;\n\n        vertices[count * verticesStride] = centerX;\n        vertices[(count * verticesStride) + 1] = centerY;\n        const centerIndex = count++;\n\n        // Set edge vertices and indices\n        for (let i = 0; i < points.length; i += 2)\n        {\n            vertices[count * verticesStride] = points[i];\n            vertices[(count * verticesStride) + 1] = points[i + 1];\n\n            if (i > 0)\n            { // Skip first point for indices\n                indices[indicesOffset++] = count;\n                indices[indicesOffset++] = centerIndex;\n                indices[indicesOffset++] = count - 1;\n            }\n            count++;\n        }\n\n        // Connect last point to the first edge point\n        indices[indicesOffset++] = centerIndex + 1;\n        indices[indicesOffset++] = centerIndex;\n        indices[indicesOffset++] = count - 1;\n    }\n\n};\n\n/** @internal */\nexport const buildEllipse = { ...buildCircle, extension: { ...buildCircle.extension, name: 'ellipse' } };\n/** @internal */\nexport const buildRoundedRectangle = { ...buildCircle, extension: { ...buildCircle.extension, name: 'roundedRectangle' } };\n"],"names":["y2","x0","y0","x1","x2","y1"],"mappings":"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","debugId":null}},
    {"offset": {"line": 5051, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/const.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/const.ts"],"sourcesContent":["/**\n * The line cap styles for strokes.\n *\n * It can be:\n * - `butt`: The ends of the stroke are squared off at the endpoints.\n * - `round`: The ends of the stroke are rounded.\n * @category scene\n * @standard\n */\nexport type LineCap = 'butt' | 'round' | 'square';\n/**\n * The line join styles for strokes.\n *\n * It can be:\n * - `round`: The corners of the stroke are rounded.\n * - `bevel`: The corners of the stroke are squared off.\n * - `miter`: The corners of the stroke are extended to meet at a point.\n * @category scene\n * @standard\n */\nexport type LineJoin = 'round' | 'bevel' | 'miter';\n\n/** @internal */\nexport const closePointEps = 1e-4;\n/** @internal */\nexport const curveEps = 0.0001;\n"],"names":[],"mappings":";;;;;;;AAuBO,MAAM,aAAgB,GAAA,KAAA;AAEtB,MAAM,QAAW,GAAA","debugId":null}},
    {"offset": {"line": 5066, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/utils/getOrientationOfPoints.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/utils/getOrientationOfPoints.ts"],"sourcesContent":["/**\n * @param points\n * @internal\n */\nexport function getOrientationOfPoints(points: number[]): number\n{\n    const m = points.length;\n\n    if (m < 6)\n    {\n        return 1;\n    }\n\n    let area = 0;\n\n    for (let i = 0, x1 = points[m - 2], y1 = points[m - 1]; i < m; i += 2)\n    {\n        const x2 = points[i];\n        const y2 = points[i + 1];\n\n        area += (x2 - x1) * (y2 + y1);\n\n        x1 = x2;\n        y1 = y2;\n    }\n\n    if (area < 0)\n    {\n        return -1;\n    }\n\n    return 1;\n}\n"],"names":[],"mappings":";;;;;AAIO,SAAS,uBAAuB,MACvC,EAAA;IACI,MAAM,IAAI,MAAO,CAAA,MAAA,CAAA;IAEjB,IAAI,IAAI,CACR,EAAA;QACW,OAAA,CAAA,CAAA;IAAA,CACX;IAEA,IAAI,IAAO,GAAA,CAAA,CAAA;IAEX,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,EAAK,GAAA,MAAA,CAAO,IAAI,CAAC,CAAA,EAAG,EAAK,GAAA,MAAA,CAAO,IAAI,CAAC,CAAA,EAAG,CAAI,GAAA,CAAA,EAAG,KAAK,CACpE,CAAA;QACU,MAAA,EAAA,GAAK,MAAA,CAAO,CAAC,CAAA,CAAA;QACb,MAAA,EAAA,GAAK,MAAO,CAAA,CAAA,GAAI,CAAC,CAAA,CAAA;QAEd,IAAA,IAAA,CAAA,EAAA,GAAK,EAAA,IAAA,CAAO,EAAK,GAAA,EAAA,CAAA,CAAA;QAErB,EAAA,GAAA,EAAA,CAAA;QACA,EAAA,GAAA,EAAA,CAAA;IAAA,CACT;IAEA,IAAI,OAAO,CACX,EAAA;QACW,OAAA,CAAA,CAAA,CAAA;IAAA,CACX;IAEO,OAAA,CAAA,CAAA;AACX","debugId":null}},
    {"offset": {"line": 5095, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildLine.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildLine.ts"],"sourcesContent":["import { Point } from '../../../../maths/point/Point';\nimport { closePointEps, curveEps } from '../const';\nimport { getOrientationOfPoints } from '../utils/getOrientationOfPoints';\n\nimport type { StrokeAttributes } from '../FillTypes';\n\n/**\n * Buffers vertices to draw a square cap.\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {number} x - X-coord of end point\n * @param {number} y - Y-coord of end point\n * @param {number} nx - X-coord of line normal pointing inside\n * @param {number} ny - Y-coord of line normal pointing inside\n * @param {number} innerWeight - Weight of inner points\n * @param {number} outerWeight - Weight of outer points\n * @param {boolean} clockwise - Whether the cap is drawn clockwise\n * @param {Array<number>} verts - vertex buffer\n * @returns {number} - no. of vertices pushed\n */\nfunction square(\n    x: number,\n    y: number,\n    nx: number,\n    ny: number,\n    innerWeight: number,\n    outerWeight: number,\n    clockwise: boolean, /* rotation for square (true at left end, false at right end) */\n    verts: Array<number>\n): number\n{\n    const ix = x - (nx * innerWeight);\n    const iy = y - (ny * innerWeight);\n    const ox = x + (nx * outerWeight);\n    const oy = y + (ny * outerWeight);\n\n    /* Rotate nx,ny for extension vector */\n    let exx; let\n        eyy;\n\n    if (clockwise)\n    {\n        exx = ny;\n        eyy = -nx;\n    }\n    else\n    {\n        exx = -ny;\n        eyy = nx;\n    }\n\n    /* [i|0]x,y extended at cap */\n    const eix = ix + exx;\n    const eiy = iy + eyy;\n    const eox = ox + exx;\n    const eoy = oy + eyy;\n\n    /* Square itself must be inserted clockwise*/\n    verts.push(eix, eiy);\n    verts.push(eox, eoy);\n\n    return 2;\n}\n\n/**\n * Buffers vertices to draw an arc at the line joint or cap.\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n * @param {number} cx - X-coord of center\n * @param {number} cy - Y-coord of center\n * @param {number} sx - X-coord of arc start\n * @param {number} sy - Y-coord of arc start\n * @param {number} ex - X-coord of arc end\n * @param {number} ey - Y-coord of arc end\n * @param {Array[]} verts - buffer of vertices\n * @param {boolean} clockwise - orientation of vertices\n * @returns {number} - no. of vertices pushed\n */\nfunction round(\n    cx: number,\n    cy: number,\n    sx: number,\n    sy: number,\n    ex: number,\n    ey: number,\n    verts: number[],\n    clockwise: boolean, /* if not cap, then clockwise is turn of joint, otherwise rotation from angle0 to angle1 */\n): number\n{\n    const cx2p0x = sx - cx;\n    const cy2p0y = sy - cy;\n\n    let angle0 = Math.atan2(cx2p0x, cy2p0y);\n    let angle1 = Math.atan2(ex - cx, ey - cy);\n\n    if (clockwise && angle0 < angle1)\n    {\n        angle0 += Math.PI * 2;\n    }\n    else if (!clockwise && angle0 > angle1)\n    {\n        angle1 += Math.PI * 2;\n    }\n\n    let startAngle = angle0;\n    const angleDiff = angle1 - angle0;\n    const absAngleDiff = Math.abs(angleDiff);\n\n    const radius = Math.sqrt((cx2p0x * cx2p0x) + (cy2p0y * cy2p0y));\n    const segCount = ((15 * absAngleDiff * Math.sqrt(radius) / Math.PI) >> 0) + 1;\n    const angleInc = angleDiff / segCount;\n\n    startAngle += angleInc;\n\n    if (clockwise)\n    {\n        verts.push(cx, cy);\n        verts.push(sx, sy);\n\n        for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc)\n        {\n            verts.push(cx, cy);\n            verts.push(cx + ((Math.sin(angle) * radius)),\n                cy + ((Math.cos(angle) * radius)));\n        }\n\n        verts.push(cx, cy);\n        verts.push(ex, ey);\n    }\n    else\n    {\n        verts.push(sx, sy);\n        verts.push(cx, cy);\n\n        for (let i = 1, angle = startAngle; i < segCount; i++, angle += angleInc)\n        {\n            verts.push(cx + ((Math.sin(angle) * radius)),\n                cy + ((Math.cos(angle) * radius)));\n            verts.push(cx, cy);\n        }\n\n        verts.push(ex, ey);\n        verts.push(cx, cy);\n    }\n\n    return segCount * 2;\n}\n\n/**\n * Builds a line to draw using the polygon method.\n * @param points\n * @param lineStyle\n * @param flipAlignment\n * @param closed\n * @param vertices\n * @param indices\n * @internal\n */\nexport function buildLine(\n    points: number[],\n    lineStyle: StrokeAttributes,\n    flipAlignment: boolean,\n    closed: boolean,\n    vertices: number[],\n    indices: number[],\n): void\n{\n    // const shape = graphicsData.shape as Polygon;\n    //   let points = graphicsData.points || shape.points.slice();\n    const eps = closePointEps;\n\n    if (points.length === 0)\n    {\n        return;\n    }\n\n    const style = lineStyle;\n\n    let alignment = style.alignment;\n\n    if (lineStyle.alignment !== 0.5)\n    {\n        // rotate the points!\n        let orientation = getOrientationOfPoints(points);\n\n        if (flipAlignment)orientation *= -1;\n\n        alignment = ((alignment - 0.5) * orientation) + 0.5;\n    }\n\n    // get first and last point.. figure out the middle!\n    const firstPoint = new Point(points[0], points[1]);\n    const lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n    const closedShape = closed;\n    const closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps\n        && Math.abs(firstPoint.y - lastPoint.y) < eps;\n\n    // if the first point is the last point - gonna have issues :)\n    if (closedShape)\n    {\n        // need to clone as we are going to slightly modify the shape..\n        points = points.slice();\n\n        if (closedPath)\n        {\n            points.pop();\n            points.pop();\n            lastPoint.set(points[points.length - 2], points[points.length - 1]);\n        }\n\n        const midPointX = (firstPoint.x + lastPoint.x) * 0.5;\n        const midPointY = (lastPoint.y + firstPoint.y) * 0.5;\n\n        points.unshift(midPointX, midPointY);\n        points.push(midPointX, midPointY);\n    }\n\n    const verts = vertices;\n\n    const length = points.length / 2;\n    let indexCount = points.length;\n    const indexStart = verts.length / 2;\n\n    // Max. inner and outer width\n    const width = style.width / 2;\n    const widthSquared = width * width;\n    const miterLimitSquared = style.miterLimit * style.miterLimit;\n\n    /* Line segments of interest where (x1,y1) forms the corner. */\n    let x0 = points[0];\n    let y0 = points[1];\n    let x1 = points[2];\n    let y1 = points[3];\n    let x2 = 0;\n    let y2 = 0;\n\n    /* perp[?](x|y) = the line normal with magnitude lineWidth. */\n    let perpX = -(y0 - y1);\n    let perpY = x0 - x1;\n    let perp1x = 0;\n    let perp1y = 0;\n\n    let dist = Math.sqrt((perpX * perpX) + (perpY * perpY));\n\n    perpX /= dist;\n    perpY /= dist;\n    perpX *= width;\n    perpY *= width;\n\n    const ratio = alignment;// 0.5;\n    const innerWeight = (1 - ratio) * 2;\n    const outerWeight = ratio * 2;\n\n    if (!closedShape)\n    {\n        if (style.cap === 'round')\n        {\n            indexCount += round(\n                x0 - (perpX * (innerWeight - outerWeight) * 0.5),\n                y0 - (perpY * (innerWeight - outerWeight) * 0.5),\n                x0 - (perpX * innerWeight),\n                y0 - (perpY * innerWeight),\n                x0 + (perpX * outerWeight),\n                y0 + (perpY * outerWeight),\n                verts,\n                true,\n            ) + 2;\n        }\n        else if (style.cap === 'square')\n        {\n            indexCount += square(x0, y0, perpX, perpY, innerWeight, outerWeight, true, verts);\n        }\n    }\n\n    // Push first point (below & above vertices)\n    verts.push(\n        x0 - (perpX * innerWeight),\n        y0 - (perpY * innerWeight));\n    verts.push(\n        x0 + (perpX * outerWeight),\n        y0 + (perpY * outerWeight));\n\n    for (let i = 1; i < length - 1; ++i)\n    {\n        x0 = points[(i - 1) * 2];\n        y0 = points[((i - 1) * 2) + 1];\n\n        x1 = points[i * 2];\n        y1 = points[(i * 2) + 1];\n\n        x2 = points[(i + 1) * 2];\n        y2 = points[((i + 1) * 2) + 1];\n\n        perpX = -(y0 - y1);\n        perpY = x0 - x1;\n\n        dist = Math.sqrt((perpX * perpX) + (perpY * perpY));\n        perpX /= dist;\n        perpY /= dist;\n        perpX *= width;\n        perpY *= width;\n\n        perp1x = -(y1 - y2);\n        perp1y = x1 - x2;\n\n        dist = Math.sqrt((perp1x * perp1x) + (perp1y * perp1y));\n        perp1x /= dist;\n        perp1y /= dist;\n        perp1x *= width;\n        perp1y *= width;\n\n        /* d[x|y](0|1) = the component displacement between points p(0,1|1,2) */\n        const dx0 = x1 - x0;\n        const dy0 = y0 - y1;\n        const dx1 = x1 - x2;\n        const dy1 = y2 - y1;\n\n        /* +ve if internal angle < 90 degree, -ve if internal angle > 90 degree. */\n        const dot = (dx0 * dx1) + (dy0 * dy1);\n        /* +ve if internal angle counterclockwise, -ve if internal angle clockwise. */\n        const cross = (dy0 * dx1) - (dy1 * dx0);\n        const clockwise = (cross < 0);\n\n        /* Going nearly parallel? */\n        /* atan(0.001) ~= 0.001 rad ~= 0.057 degree */\n        if (Math.abs(cross) < 0.001 * Math.abs(dot))\n        {\n            verts.push(\n                x1 - (perpX * innerWeight),\n                y1 - (perpY * innerWeight));\n            verts.push(\n                x1 + (perpX * outerWeight),\n                y1 + (perpY * outerWeight));\n\n            /* 180 degree corner? */\n            if (dot >= 0)\n            {\n                if (style.join === 'round')\n                {\n                    indexCount += round(\n                        x1, y1,\n                        x1 - (perpX * innerWeight), y1 - (perpY * innerWeight),\n                        x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                        verts, false) + 4;\n                }\n                else\n                {\n                    indexCount += 2;\n                }\n\n                verts.push(\n                    x1 - (perp1x * outerWeight),\n                    y1 - (perp1y * outerWeight));\n                verts.push(\n                    x1 + (perp1x * innerWeight),\n                    y1 + (perp1y * innerWeight));\n            }\n\n            continue;\n        }\n\n        /* p[x|y] is the miter point. pDist is the distance between miter point and p1. */\n        const c1 = ((-perpX + x0) * (-perpY + y1)) - ((-perpX + x1) * (-perpY + y0));\n        const c2 = ((-perp1x + x2) * (-perp1y + y1)) - ((-perp1x + x1) * (-perp1y + y2));\n        const px = ((dx0 * c2) - (dx1 * c1)) / cross;\n        const py = ((dy1 * c1) - (dy0 * c2)) / cross;\n        const pDist = ((px - x1) * (px - x1)) + ((py - y1) * (py - y1));\n\n        /* Inner miter point */\n        const imx = x1 + ((px - x1) * innerWeight);\n        const imy = y1 + ((py - y1) * innerWeight);\n        /* Outer miter point */\n        const omx = x1 - ((px - x1) * outerWeight);\n        const omy = y1 - ((py - y1) * outerWeight);\n\n        /* Is the inside miter point too far away, creating a spike? */\n        const smallerInsideSegmentSq = Math.min((dx0 * dx0) + (dy0 * dy0), (dx1 * dx1) + (dy1 * dy1));\n        const insideWeight = clockwise ? innerWeight : outerWeight;\n        const smallerInsideDiagonalSq = smallerInsideSegmentSq + (insideWeight * insideWeight * widthSquared);\n        const insideMiterOk = pDist <= smallerInsideDiagonalSq;\n\n        if (insideMiterOk)\n        {\n            if (style.join === 'bevel' || pDist / widthSquared > miterLimitSquared)\n            {\n                if (clockwise) /* rotating at inner angle */\n                {\n                    verts.push(imx, imy); // inner miter point\n                    verts.push(x1 + (perpX * outerWeight), y1 + (perpY * outerWeight)); // first segment's outer vertex\n                    verts.push(imx, imy); // inner miter point\n                    verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight)); // second segment's outer vertex\n                }\n                else /* rotating at outer angle */\n                {\n                    verts.push(x1 - (perpX * innerWeight), y1 - (perpY * innerWeight)); // first segment's inner vertex\n                    verts.push(omx, omy); // outer miter point\n                    verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight)); // second segment's outer vertex\n                    verts.push(omx, omy); // outer miter point\n                }\n\n                indexCount += 2;\n            }\n            else if (style.join === 'round')\n            {\n                if (clockwise) /* arc is outside */\n                {\n                    verts.push(imx, imy);\n                    verts.push(x1 + (perpX * outerWeight), y1 + (perpY * outerWeight));\n\n                    indexCount += round(\n                        x1, y1,\n                        x1 + (perpX * outerWeight), y1 + (perpY * outerWeight),\n                        x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight),\n                        verts, true\n                    ) + 4;\n\n                    verts.push(imx, imy);\n                    verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight));\n                }\n                else /* arc is inside */\n                {\n                    verts.push(x1 - (perpX * innerWeight), y1 - (perpY * innerWeight));\n                    verts.push(omx, omy);\n\n                    indexCount += round(\n                        x1, y1,\n                        x1 - (perpX * innerWeight), y1 - (perpY * innerWeight),\n                        x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                        verts, false\n                    ) + 4;\n\n                    verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight));\n                    verts.push(omx, omy);\n                }\n            }\n            else\n            {\n                verts.push(imx, imy);\n                verts.push(omx, omy);\n            }\n        }\n        else // inside miter is NOT ok\n        {\n            verts.push(x1 - (perpX * innerWeight), y1 - (perpY * innerWeight)); // first segment's inner vertex\n            verts.push(x1 + (perpX * outerWeight), y1 + (perpY * outerWeight)); // first segment's outer vertex\n            if (style.join === 'round')\n            {\n                if (clockwise) /* arc is outside */\n                {\n                    indexCount += round(\n                        x1, y1,\n                        x1 + (perpX * outerWeight), y1 + (perpY * outerWeight),\n                        x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight),\n                        verts, true\n                    ) + 2;\n                }\n                else /* arc is inside */\n                {\n                    indexCount += round(\n                        x1, y1,\n                        x1 - (perpX * innerWeight), y1 - (perpY * innerWeight),\n                        x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight),\n                        verts, false\n                    ) + 2;\n                }\n            }\n            else if (style.join === 'miter' && pDist / widthSquared <= miterLimitSquared)\n            {\n                if (clockwise)\n                {\n                    verts.push(omx, omy); // inner miter point\n                    verts.push(omx, omy); // inner miter point\n                }\n                else\n                {\n                    verts.push(imx, imy); // outer miter point\n                    verts.push(imx, imy); // outer miter point\n                }\n                indexCount += 2;\n            }\n            verts.push(x1 - (perp1x * innerWeight), y1 - (perp1y * innerWeight)); // second segment's inner vertex\n            verts.push(x1 + (perp1x * outerWeight), y1 + (perp1y * outerWeight)); // second segment's outer vertex\n            indexCount += 2;\n        }\n    }\n\n    x0 = points[(length - 2) * 2];\n    y0 = points[((length - 2) * 2) + 1];\n\n    x1 = points[(length - 1) * 2];\n    y1 = points[((length - 1) * 2) + 1];\n\n    perpX = -(y0 - y1);\n    perpY = x0 - x1;\n\n    dist = Math.sqrt((perpX * perpX) + (perpY * perpY));\n    perpX /= dist;\n    perpY /= dist;\n    perpX *= width;\n    perpY *= width;\n\n    verts.push(x1 - (perpX * innerWeight), y1 - (perpY * innerWeight));\n    verts.push(x1 + (perpX * outerWeight), y1 + (perpY * outerWeight));\n\n    if (!closedShape)\n    {\n        if (style.cap === 'round')\n        {\n            indexCount += round(\n                x1 - (perpX * (innerWeight - outerWeight) * 0.5),\n                y1 - (perpY * (innerWeight - outerWeight) * 0.5),\n                x1 - (perpX * innerWeight),\n                y1 - (perpY * innerWeight),\n                x1 + (perpX * outerWeight),\n                y1 + (perpY * outerWeight),\n                verts,\n                false\n            ) + 2;\n        }\n        else if (style.cap === 'square')\n        {\n            indexCount += square(x1, y1, perpX, perpY, innerWeight, outerWeight, false, verts);\n        }\n    }\n\n    // const indices = graphicsGeometry.indices;\n    const eps2 = curveEps * curveEps;\n\n    // indices.push(indexStart);\n    for (let i = indexStart; i < indexCount + indexStart - 2; ++i)\n    {\n        x0 = verts[(i * 2)];\n        y0 = verts[(i * 2) + 1];\n\n        x1 = verts[(i + 1) * 2];\n        y1 = verts[((i + 1) * 2) + 1];\n\n        x2 = verts[(i + 2) * 2];\n        y2 = verts[((i + 2) * 2) + 1];\n\n        /* Skip zero area triangles */\n        if (Math.abs((x0 * (y1 - y2)) + (x1 * (y2 - y0)) + (x2 * (y0 - y1))) < eps2)\n        {\n            continue;\n        }\n\n        indices.push(i, i + 1, i + 2);\n    }\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5379, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildPixelLine.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildPixelLine.ts"],"sourcesContent":["import { closePointEps } from '../const';\n\n/**\n * Builds a line to draw using the polygon method.\n * @param points\n * @param closed\n * @param vertices\n * @param indices\n * @internal\n */\nexport function buildPixelLine(\n    points: number[],\n    closed: boolean,\n    vertices: number[],\n    indices: number[],\n): void\n{\n    const eps = closePointEps;\n\n    if (points.length === 0)\n    {\n        return;\n    }\n\n    // get first and last point.. figure out the middle!\n\n    const fx = points[0];\n    const fy = points[1];\n\n    const lx = points[points.length - 2];\n\n    const ly = points[points.length - 1];\n\n    const closePath = closed || (Math.abs(fx - lx) < eps && Math.abs(fy - ly) < eps);\n\n    const verts = vertices;\n\n    const length = points.length / 2;\n    const indexStart = verts.length / 2;\n\n    for (let i = 0; i < length; i++)\n    {\n        verts.push(points[(i * 2)]);\n        verts.push(points[(i * 2) + 1]);\n    }\n\n    for (let i = 0; i < length - 1; i++)\n    {\n        indices.push(indexStart + i, indexStart + i + 1);\n    }\n\n    if (closePath)\n    {\n        indices.push(indexStart + length - 1, indexStart);\n    }\n}\n\n"],"names":[],"mappings":";;;;;;;AAUO,SAAS,cACZ,CAAA,MAAA,EACA,MACA,EAAA,QAAA,EACA,OAEJ,EAAA;IACI,MAAM,GAAM,GAAA,mPAAA,CAAA;IAER,IAAA,MAAA,CAAO,MAAA,KAAW,CACtB,EAAA;QACI,OAAA;IAAA,CACJ;IAIM,MAAA,EAAA,GAAK,MAAA,CAAO,CAAC,CAAA,CAAA;IACb,MAAA,EAAA,GAAK,MAAA,CAAO,CAAC,CAAA,CAAA;IAEnB,MAAM,EAAK,GAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;IAEnC,MAAM,EAAK,GAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;IAEnC,MAAM,SAAY,GAAA,MAAA,IAAW,IAAK,CAAA,GAAA,CAAI,EAAK,GAAA,EAAE,CAAI,GAAA,GAAA,IAAO,IAAK,CAAA,GAAA,CAAI,EAAK,GAAA,EAAE,CAAI,GAAA,GAAA,CAAA;IAE5E,MAAM,KAAQ,GAAA,QAAA,CAAA;IAER,MAAA,MAAA,GAAS,OAAO,MAAS,GAAA,CAAA,CAAA;IACzB,MAAA,UAAA,GAAa,MAAM,MAAS,GAAA,CAAA,CAAA;IAElC,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,MAAA,EAAQ,CAC5B,EAAA,CAAA;QACI,KAAA,CAAM,IAAK,CAAA,MAAA,CAAQ,CAAI,GAAA,CAAE,CAAC,CAAA,CAAA;QAC1B,KAAA,CAAM,IAAK,CAAA,MAAA,CAAQ,CAAI,GAAA,CAAA,GAAK,CAAC,CAAC,CAAA,CAAA;IAAA,CAClC;IAEA,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,MAAA,GAAS,GAAG,CAChC,EAAA,CAAA;QACI,OAAA,CAAQ,IAAK,CAAA,UAAA,GAAa,CAAG,EAAA,UAAA,GAAa,IAAI,CAAC,CAAA,CAAA;IAAA,CACnD;IAEA,IAAI,SACJ,EAAA;QACI,OAAA,CAAQ,IAAK,CAAA,UAAA,GAAa,MAAS,GAAA,CAAA,EAAG,UAAU,CAAA,CAAA;IAAA,CACpD;AACJ","debugId":null}},
    {"offset": {"line": 5416, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/utils/triangulateWithHoles.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/utils/triangulateWithHoles.ts"],"sourcesContent":["import { earcut } from '../../../../utils/utils';\n\n/**\n * @param points\n * @param holes\n * @param vertices\n * @param verticesStride\n * @param verticesOffset\n * @param indices\n * @param indicesOffset\n * @internal\n */\nexport function triangulateWithHoles(\n    points: number[],\n    holes: number[],\n    vertices: number[],\n    verticesStride: number,\n    verticesOffset: number,\n\n    indices: number[],\n    indicesOffset: number\n)\n{\n    const triangles = earcut(points, holes, 2);\n\n    if (!triangles)\n    {\n        return;\n    }\n\n    for (let i = 0; i < triangles.length; i += 3)\n    {\n        indices[indicesOffset++] = (triangles[i] + verticesOffset);\n        indices[indicesOffset++] = (triangles[i + 1] + verticesOffset);\n        indices[indicesOffset++] = (triangles[i + 2] + verticesOffset);\n    }\n\n    let index = verticesOffset * verticesStride;\n\n    for (let i = 0; i < points.length; i += 2)\n    {\n        vertices[index] = points[i];\n        vertices[index + 1] = points[i + 1];\n\n        index += verticesStride;\n    }\n}\n\n"],"names":[],"mappings":";;;;;;;AAYO,SAAS,qBACZ,MACA,EAAA,KAAA,EACA,QAAA,EACA,cACA,EAAA,cAAA,EAEA,OAAA,EACA,aAEJ,EAAA;IACI,MAAM,SAAY,OAAA,sOAAA,EAAO,MAAQ,EAAA,KAAA,EAAO,CAAC,CAAA,CAAA;IAEzC,IAAI,CAAC,SACL,EAAA;QACI,OAAA;IAAA,CACJ;IAEA,IAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,SAAU,CAAA,MAAA,EAAQ,KAAK,CAC3C,CAAA;QACI,OAAA,CAAQ,aAAe,EAAA,CAAA,GAAK,SAAU,CAAA,CAAC,CAAI,GAAA,cAAA,CAAA;QAC3C,OAAA,CAAQ,aAAe,EAAA,CAAA,GAAK,SAAU,CAAA,CAAA,GAAI,CAAC,CAAI,GAAA,cAAA,CAAA;QAC/C,OAAA,CAAQ,aAAe,EAAA,CAAA,GAAK,SAAU,CAAA,CAAA,GAAI,CAAC,CAAI,GAAA,cAAA,CAAA;IAAA,CACnD;IAEA,IAAI,QAAQ,cAAiB,GAAA,cAAA,CAAA;IAE7B,IAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,MAAO,CAAA,MAAA,EAAQ,KAAK,CACxC,CAAA;QACa,QAAA,CAAA,KAAK,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;QAC1B,QAAA,CAAS,KAAQ,GAAA,CAAC,CAAI,GAAA,MAAA,CAAO,IAAI,CAAC,CAAA,CAAA;QAEzB,KAAA,IAAA,cAAA,CAAA;IAAA,CACb;AACJ","debugId":null}},
    {"offset": {"line": 5446, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildPolygon.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildPolygon.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\nimport { triangulateWithHoles } from '../utils/triangulateWithHoles';\n\nimport type { Polygon } from '../../../../maths/shapes/Polygon';\nimport type { ShapeBuildCommand } from './ShapeBuildCommand';\n\nconst emptyArray: number[] = [];\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n */\nexport const buildPolygon: ShapeBuildCommand<Polygon> = {\n    extension: {\n        type: ExtensionType.ShapeBuilder,\n        name: 'polygon',\n    },\n\n    build(shape: Polygon, points: number[]): boolean\n    {\n        for (let i = 0; i < shape.points.length; i++)\n        {\n            points[i] = shape.points[i];\n        }\n\n        return true;\n    },\n\n    triangulate(\n        points: number[],\n        //  holes: number[],\n        vertices: number[],\n        verticesStride: number,\n        verticesOffset: number,\n\n        indices: number[],\n        indicesOffset: number\n    )\n    {\n        triangulateWithHoles(points, emptyArray, vertices, verticesStride, verticesOffset, indices, indicesOffset);\n    },\n\n};\n"],"names":[],"mappings":";;;;;;;;;AAMA,MAAM,aAAuB,EAAC,CAAA;AASvB,MAAM,YAA2C,GAAA;IACpD,SAAW,EAAA;QACP,MAAM,uOAAc,CAAA,YAAA;QACpB,IAAM,EAAA,SAAA;IAAA,CACV;IAEA,KAAA,EAAM,KAAA,EAAgB,MACtB,EAAA;QACI,IAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,KAAM,CAAA,MAAA,CAAO,MAAA,EAAQ,CACzC,EAAA,CAAA;YACI,MAAA,CAAO,CAAC,CAAA,GAAI,KAAM,CAAA,MAAA,CAAO,CAAC,CAAA,CAAA;QAAA,CAC9B;QAEO,OAAA,IAAA,CAAA;IAAA,CACX;IAEA,aACI,MAEA,EAAA,QAAA,EACA,cACA,EAAA,cAAA,EAEA,OAAA,EACA,aAEJ,EAAA;YACI,kRAAA,EAAqB,QAAQ,UAAY,EAAA,QAAA,EAAU,cAAgB,EAAA,cAAA,EAAgB,SAAS,aAAa,CAAA,CAAA;IAAA,CAC7G;AAEJ","debugId":null}},
    {"offset": {"line": 5477, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildRectangle.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildRectangle.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport type { ShapeBuildCommand } from './ShapeBuildCommand';\n\n/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n */\nexport const buildRectangle: ShapeBuildCommand<Rectangle> = {\n    extension: {\n        type: ExtensionType.ShapeBuilder,\n        name: 'rectangle',\n    },\n\n    build(shape: Rectangle, points: number[]): boolean\n    {\n        const rectData = shape;\n        const x = rectData.x;\n        const y = rectData.y;\n        const width = rectData.width;\n        const height = rectData.height;\n\n        if (!(width > 0 && height > 0))\n        {\n            return false;\n        }\n\n        points[0] = x;\n        points[1] = y;\n        points[2] = x + width;\n        points[3] = y;\n        points[4] = x + width;\n        points[5] = y + height;\n        points[6] = x;\n        points[7] = y + height;\n\n        return true;\n    },\n\n    triangulate(\n        points: number[],\n\n        vertices: number[],\n        verticesStride: number,\n        verticesOffset: number,\n\n        indices: number[],\n        indicesOffset: number\n    )\n    {\n        let count = 0;\n\n        verticesOffset *= verticesStride;\n\n        vertices[verticesOffset + count] = points[0];\n        vertices[verticesOffset + count + 1] = points[1];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[2];\n        vertices[verticesOffset + count + 1] = points[3];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[6];\n        vertices[verticesOffset + count + 1] = points[7];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[4];\n        vertices[verticesOffset + count + 1] = points[5];\n\n        count += verticesStride;\n\n        const verticesIndex = verticesOffset / verticesStride;\n\n        // triangle 1\n        indices[indicesOffset++] = verticesIndex;\n        indices[indicesOffset++] = verticesIndex + 1;\n        indices[indicesOffset++] = verticesIndex + 2;\n\n        // triangle 2\n        indices[indicesOffset++] = verticesIndex + 1;\n        indices[indicesOffset++] = verticesIndex + 3;\n        indices[indicesOffset++] = verticesIndex + 2;\n    },\n};\n"],"names":[],"mappings":";;;;;;;AAYO,MAAM,cAA+C,GAAA;IACxD,SAAW,EAAA;QACP,MAAM,uOAAc,CAAA,YAAA;QACpB,IAAM,EAAA,WAAA;IAAA,CACV;IAEA,KAAA,EAAM,KAAA,EAAkB,MACxB,EAAA;QACI,MAAM,QAAW,GAAA,KAAA,CAAA;QACjB,MAAM,IAAI,QAAS,CAAA,CAAA,CAAA;QACnB,MAAM,IAAI,QAAS,CAAA,CAAA,CAAA;QACnB,MAAM,QAAQ,QAAS,CAAA,KAAA,CAAA;QACvB,MAAM,SAAS,QAAS,CAAA,MAAA,CAAA;QAExB,IAAI,CAAA,CAAE,KAAA,GAAQ,CAAK,IAAA,MAAA,GAAS,CAC5B,CAAA,EAAA;YACW,OAAA,KAAA,CAAA;QAAA,CACX;QAEA,MAAA,CAAO,CAAC,CAAI,GAAA,CAAA,CAAA;QACZ,MAAA,CAAO,CAAC,CAAI,GAAA,CAAA,CAAA;QACL,MAAA,CAAA,CAAC,CAAA,GAAI,CAAI,GAAA,KAAA,CAAA;QAChB,MAAA,CAAO,CAAC,CAAI,GAAA,CAAA,CAAA;QACL,MAAA,CAAA,CAAC,CAAA,GAAI,CAAI,GAAA,KAAA,CAAA;QACT,MAAA,CAAA,CAAC,CAAA,GAAI,CAAI,GAAA,MAAA,CAAA;QAChB,MAAA,CAAO,CAAC,CAAI,GAAA,CAAA,CAAA;QACL,MAAA,CAAA,CAAC,CAAA,GAAI,CAAI,GAAA,MAAA,CAAA;QAET,OAAA,IAAA,CAAA;IAAA,CACX;IAEA,aACI,MAEA,EAAA,QAAA,EACA,cACA,EAAA,cAAA,EAEA,OAAA,EACA,aAEJ,EAAA;QACI,IAAI,KAAQ,GAAA,CAAA,CAAA;QAEM,cAAA,IAAA,cAAA,CAAA;QAElB,QAAA,CAAS,cAAiB,GAAA,KAAK,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;QAC3C,QAAA,CAAS,cAAiB,GAAA,KAAA,GAAQ,CAAC,CAAA,GAAI,MAAA,CAAO,CAAC,CAAA,CAAA;QAEtC,KAAA,IAAA,cAAA,CAAA;QAET,QAAA,CAAS,cAAiB,GAAA,KAAK,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;QAC3C,QAAA,CAAS,cAAiB,GAAA,KAAA,GAAQ,CAAC,CAAA,GAAI,MAAA,CAAO,CAAC,CAAA,CAAA;QAEtC,KAAA,IAAA,cAAA,CAAA;QAET,QAAA,CAAS,cAAiB,GAAA,KAAK,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;QAC3C,QAAA,CAAS,cAAiB,GAAA,KAAA,GAAQ,CAAC,CAAA,GAAI,MAAA,CAAO,CAAC,CAAA,CAAA;QAEtC,KAAA,IAAA,cAAA,CAAA;QAET,QAAA,CAAS,cAAiB,GAAA,KAAK,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;QAC3C,QAAA,CAAS,cAAiB,GAAA,KAAA,GAAQ,CAAC,CAAA,GAAI,MAAA,CAAO,CAAC,CAAA,CAAA;QAEtC,KAAA,IAAA,cAAA,CAAA;QAET,MAAM,gBAAgB,cAAiB,GAAA,cAAA,CAAA;QAGvC,OAAA,CAAQ,eAAe,CAAI,GAAA,aAAA,CAAA;QACnB,OAAA,CAAA,aAAA,EAAe,CAAA,GAAI,aAAgB,GAAA,CAAA,CAAA;QACnC,OAAA,CAAA,aAAA,EAAe,CAAA,GAAI,aAAgB,GAAA,CAAA,CAAA;QAGnC,OAAA,CAAA,aAAA,EAAe,CAAA,GAAI,aAAgB,GAAA,CAAA,CAAA;QACnC,OAAA,CAAA,aAAA,EAAe,CAAA,GAAI,aAAgB,GAAA,CAAA,CAAA;QACnC,OAAA,CAAA,aAAA,EAAe,CAAA,GAAI,aAAgB,GAAA,CAAA,CAAA;IAAA,CAC/C;AACJ","debugId":null}},
    {"offset": {"line": 5538, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildTriangle.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildTriangle.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { Triangle } from '../../../../maths/shapes/Triangle';\nimport type { ShapeBuildCommand } from './ShapeBuildCommand';\n\n/**\n * Builds a triangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n * @ignore\n * @private\n */\nexport const buildTriangle: ShapeBuildCommand<Triangle> = {\n    extension: {\n        type: ExtensionType.ShapeBuilder,\n        name: 'triangle',\n    },\n\n    build(shape: Triangle, points: number[]): boolean\n    {\n        points[0] = shape.x;\n        points[1] = shape.y;\n        points[2] = shape.x2;\n        points[3] = shape.y2;\n        points[4] = shape.x3;\n        points[5] = shape.y3;\n\n        return true;\n    },\n\n    triangulate(\n        points: number[],\n\n        vertices: number[],\n        verticesStride: number,\n        verticesOffset: number,\n\n        indices: number[],\n        indicesOffset: number\n    )\n    {\n        let count = 0;\n\n        verticesOffset *= verticesStride;\n\n        vertices[verticesOffset + count] = points[0];\n        vertices[verticesOffset + count + 1] = points[1];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[2];\n        vertices[verticesOffset + count + 1] = points[3];\n\n        count += verticesStride;\n\n        vertices[verticesOffset + count] = points[4];\n        vertices[verticesOffset + count + 1] = points[5];\n\n        const verticesIndex = verticesOffset / verticesStride;\n\n        // triangle 1\n        indices[indicesOffset++] = verticesIndex;\n        indices[indicesOffset++] = verticesIndex + 1;\n        indices[indicesOffset++] = verticesIndex + 2;\n    },\n};\n"],"names":[],"mappings":";;;;;;;AAYO,MAAM,aAA6C,GAAA;IACtD,SAAW,EAAA;QACP,MAAM,uOAAc,CAAA,YAAA;QACpB,IAAM,EAAA,UAAA;IAAA,CACV;IAEA,KAAA,EAAM,KAAA,EAAiB,MACvB,EAAA;QACW,MAAA,CAAA,CAAC,CAAA,GAAI,KAAM,CAAA,CAAA,CAAA;QACX,MAAA,CAAA,CAAC,CAAA,GAAI,KAAM,CAAA,CAAA,CAAA;QACX,MAAA,CAAA,CAAC,CAAA,GAAI,KAAM,CAAA,EAAA,CAAA;QACX,MAAA,CAAA,CAAC,CAAA,GAAI,KAAM,CAAA,EAAA,CAAA;QACX,MAAA,CAAA,CAAC,CAAA,GAAI,KAAM,CAAA,EAAA,CAAA;QACX,MAAA,CAAA,CAAC,CAAA,GAAI,KAAM,CAAA,EAAA,CAAA;QAEX,OAAA,IAAA,CAAA;IAAA,CACX;IAEA,aACI,MAEA,EAAA,QAAA,EACA,cACA,EAAA,cAAA,EAEA,OAAA,EACA,aAEJ,EAAA;QACI,IAAI,KAAQ,GAAA,CAAA,CAAA;QAEM,cAAA,IAAA,cAAA,CAAA;QAElB,QAAA,CAAS,cAAiB,GAAA,KAAK,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;QAC3C,QAAA,CAAS,cAAiB,GAAA,KAAA,GAAQ,CAAC,CAAA,GAAI,MAAA,CAAO,CAAC,CAAA,CAAA;QAEtC,KAAA,IAAA,cAAA,CAAA;QAET,QAAA,CAAS,cAAiB,GAAA,KAAK,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;QAC3C,QAAA,CAAS,cAAiB,GAAA,KAAA,GAAQ,CAAC,CAAA,GAAI,MAAA,CAAO,CAAC,CAAA,CAAA;QAEtC,KAAA,IAAA,cAAA,CAAA;QAET,QAAA,CAAS,cAAiB,GAAA,KAAK,CAAI,GAAA,MAAA,CAAO,CAAC,CAAA,CAAA;QAC3C,QAAA,CAAS,cAAiB,GAAA,KAAA,GAAQ,CAAC,CAAA,GAAI,MAAA,CAAO,CAAC,CAAA,CAAA;QAE/C,MAAM,gBAAgB,cAAiB,GAAA,cAAA,CAAA;QAGvC,OAAA,CAAQ,eAAe,CAAI,GAAA,aAAA,CAAA;QACnB,OAAA,CAAA,aAAA,EAAe,CAAA,GAAI,aAAgB,GAAA,CAAA,CAAA;QACnC,OAAA,CAAA,aAAA,EAAe,CAAA,GAAI,aAAgB,GAAA,CAAA,CAAA;IAAA,CAC/C;AACJ","debugId":null}},
    {"offset": {"line": 5582, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/utils/generateTextureFillMatrix.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/utils/generateTextureFillMatrix.ts"],"sourcesContent":["import { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { FillGradient } from '../fill/FillGradient';\n\nimport type { ShapePrimitive } from '../../../../maths/shapes/ShapePrimitive';\nimport type { FillStyle, StrokeStyle } from '../FillTypes';\n\n/**\n * Temporary matrix used for matrix calculations\n * @internal\n */\nconst tempTextureMatrix = new Matrix();\n\n/**\n * Temporary rectangle used for bounds calculations\n * @internal\n */\nconst tempRect = new Rectangle();\n\n/**\n * Generates a texture matrix for mapping textures onto shapes.\n * This function handles both local and global texture space mapping.\n *\n * In local space, the texture is mapped to fit exactly within the bounds of the shape.\n * In global space, the texture is mapped using its own dimensions and position.\n * @param out - The matrix to store the result in\n * @param style - The fill style containing texture and mapping properties\n * @param shape - The shape to map the texture onto\n * @param matrix - Optional transform matrix to apply\n * @returns The generated texture matrix for UV mapping\n * @example\n * ```ts\n * const matrix = new Matrix();\n * const textureMatrix = generateTextureMatrix(matrix, fillStyle, shape);\n * // textureMatrix now contains the proper UV mapping for the texture\n * ```\n * @internal\n */\nexport function generateTextureMatrix(out: Matrix, style: FillStyle | StrokeStyle, shape: ShapePrimitive, matrix?: Matrix)\n{\n    // Start with either the style's matrix inverted, or identity matrix\n    const textureMatrix = style.matrix\n        ? out.copyFrom(style.matrix).invert()\n        : out.identity();\n\n    if (style.textureSpace === 'local')\n    {\n        // For local space, map texture to shape's bounds\n        const bounds = shape.getBounds(tempRect);\n\n        if ((style as StrokeStyle).width)\n        {\n            bounds.pad((style as StrokeStyle).width);\n        }\n\n        const { x: tx, y: ty } = bounds;\n        const sx = 1 / bounds.width;\n        const sy = 1 / bounds.height;\n\n        const mTx = -tx * sx;\n        const mTy = -ty * sy;\n\n        const a1 = textureMatrix.a;\n        const b1 = textureMatrix.b;\n        const c1 = textureMatrix.c;\n        const d1 = textureMatrix.d;\n\n        textureMatrix.a *= sx;\n        textureMatrix.b *= sx;\n        textureMatrix.c *= sy;\n        textureMatrix.d *= sy;\n\n        textureMatrix.tx = (mTx * a1) + (mTy * c1) + textureMatrix.tx;\n        textureMatrix.ty = (mTx * b1) + (mTy * d1) + textureMatrix.ty;\n    }\n    else\n    {\n        // For global space, use texture's own dimensions\n        textureMatrix.translate(style.texture.frame.x, style.texture.frame.y);\n        textureMatrix.scale(1 / (style.texture.source.width), 1 / (style.texture.source.height));\n    }\n\n    const sourceStyle = style.texture.source.style;\n\n    // we don't want to set the address mode if the fill is a gradient as this handles its own address mode\n    if (!(style.fill instanceof FillGradient) && sourceStyle.addressMode === 'clamp-to-edge')\n    {\n        sourceStyle.addressMode = 'repeat';\n        sourceStyle.update();\n    }\n\n    // Apply any additional transform matrix\n    if (matrix)\n    {\n        textureMatrix.append(tempTextureMatrix.copyFrom(matrix).invert());\n    }\n\n    return textureMatrix;\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAWA,MAAM,iBAAA,GAAoB,IAAI,iOAAO,EAAA,CAAA;AAMrC,MAAM,QAAA,GAAW,IAAI,uOAAU,EAAA,CAAA;AAqBxB,SAAS,qBAAsB,CAAA,GAAA,EAAa,KAAgC,EAAA,KAAA,EAAuB,MAC1G,EAAA;IAEU,MAAA,aAAA,GAAgB,KAAM,CAAA,MAAA,GACtB,GAAI,CAAA,QAAA,CAAS,KAAM,CAAA,MAAM,CAAE,CAAA,MAAA,EAC3B,GAAA,GAAA,CAAI,QAAS,EAAA,CAAA;IAEf,IAAA,KAAA,CAAM,YAAA,KAAiB,OAC3B,EAAA;QAEU,MAAA,MAAA,GAAS,KAAM,CAAA,SAAA,CAAU,QAAQ,CAAA,CAAA;QAEvC,IAAK,MAAsB,KAC3B,EAAA;YACW,MAAA,CAAA,GAAA,CAAK,MAAsB,KAAK,CAAA,CAAA;QAAA,CAC3C;QAEA,MAAM,EAAE,CAAA,EAAG,EAAI,EAAA,CAAA,EAAG,EAAA,EAAO,GAAA,MAAA,CAAA;QACnB,MAAA,EAAA,GAAK,IAAI,MAAO,CAAA,KAAA,CAAA;QAChB,MAAA,EAAA,GAAK,IAAI,MAAO,CAAA,MAAA,CAAA;QAEhB,MAAA,GAAA,GAAM,CAAC,EAAK,GAAA,EAAA,CAAA;QACZ,MAAA,GAAA,GAAM,CAAC,EAAK,GAAA,EAAA,CAAA;QAElB,MAAM,KAAK,aAAc,CAAA,CAAA,CAAA;QACzB,MAAM,KAAK,aAAc,CAAA,CAAA,CAAA;QACzB,MAAM,KAAK,aAAc,CAAA,CAAA,CAAA;QACzB,MAAM,KAAK,aAAc,CAAA,CAAA,CAAA;QAEzB,aAAA,CAAc,CAAK,IAAA,EAAA,CAAA;QACnB,aAAA,CAAc,CAAK,IAAA,EAAA,CAAA;QACnB,aAAA,CAAc,CAAK,IAAA,EAAA,CAAA;QACnB,aAAA,CAAc,CAAK,IAAA,EAAA,CAAA;QAEnB,aAAA,CAAc,EAAM,GAAA,GAAA,GAAM,EAAO,GAAA,GAAA,GAAM,KAAM,aAAc,CAAA,EAAA,CAAA;QAC3D,aAAA,CAAc,EAAM,GAAA,GAAA,GAAM,EAAO,GAAA,GAAA,GAAM,KAAM,aAAc,CAAA,EAAA,CAAA;IAAA,CAG/D,MAAA;QAEkB,aAAA,CAAA,SAAA,CAAU,MAAM,OAAQ,CAAA,KAAA,CAAM,CAAA,EAAG,KAAM,CAAA,OAAA,CAAQ,KAAA,CAAM,CAAC,CAAA,CAAA;QACtD,aAAA,CAAA,KAAA,CAAM,CAAK,GAAA,KAAA,CAAM,OAAQ,CAAA,MAAA,CAAO,KAAA,EAAQ,CAAK,GAAA,KAAA,CAAM,OAAQ,CAAA,MAAA,CAAO,MAAO,CAAA,CAAA;IAAA,CAC3F;IAEM,MAAA,WAAA,GAAc,KAAM,CAAA,OAAA,CAAQ,MAAO,CAAA,KAAA,CAAA;IAGzC,IAAI,CAAA,CAAE,KAAM,CAAA,IAAA,YAAgB,iQAAiB,CAAA,IAAA,WAAA,CAAY,WAAA,KAAgB,eACzE,EAAA;QACI,WAAA,CAAY,WAAc,GAAA,QAAA,CAAA;QAC1B,WAAA,CAAY,MAAO,EAAA,CAAA;IAAA,CACvB;IAGA,IAAI,MACJ,EAAA;QACI,aAAA,CAAc,MAAA,CAAO,iBAAkB,CAAA,QAAA,CAAS,MAAM,CAAA,CAAE,MAAA,EAAQ,CAAA,CAAA;IAAA,CACpE;IAEO,OAAA,aAAA,CAAA;AACX","debugId":null}},
    {"offset": {"line": 5637, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/utils/buildContextBatches.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/utils/buildContextBatches.ts"],"sourcesContent":["import { extensions, ExtensionType } from '../../../../extensions/Extensions';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { buildSimpleUvs, buildUvs } from '../../../../rendering/renderers/shared/geometry/utils/buildUvs';\nimport { transformVertices } from '../../../../rendering/renderers/shared/geometry/utils/transformVertices';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { BigPool } from '../../../../utils/pool/PoolGroup';\nimport { BatchableGraphics } from '../BatchableGraphics';\nimport { buildCircle, buildEllipse, buildRoundedRectangle } from '../buildCommands/buildCircle';\nimport { buildLine } from '../buildCommands/buildLine';\nimport { buildPixelLine } from '../buildCommands/buildPixelLine';\nimport { buildPolygon } from '../buildCommands/buildPolygon';\nimport { buildRectangle } from '../buildCommands/buildRectangle';\nimport { buildTriangle } from '../buildCommands/buildTriangle';\nimport { generateTextureMatrix as generateTextureFillMatrix } from './generateTextureFillMatrix';\nimport { triangulateWithHoles } from './triangulateWithHoles';\n\nimport type { Polygon } from '../../../../maths/shapes/Polygon';\nimport type { Topology } from '../../../../rendering/renderers/shared/geometry/const';\nimport type { ShapeBuildCommand } from '../buildCommands/ShapeBuildCommand';\nimport type { ConvertedFillStyle, ConvertedStrokeStyle } from '../FillTypes';\nimport type { GraphicsContext, TextureInstruction } from '../GraphicsContext';\nimport type { GpuGraphicsContext } from '../GraphicsContextSystem';\nimport type { ShapePath, ShapePrimitiveWithHoles } from '../path/ShapePath';\n\n/**\n * A record of shape builders, keyed by shape type.\n * @category scene\n * @advanced\n */\nexport const shapeBuilders: Record<string, ShapeBuildCommand> = {};\n\nextensions.handleByMap(ExtensionType.ShapeBuilder, shapeBuilders);\nextensions.add(buildRectangle, buildPolygon, buildTriangle, buildCircle, buildEllipse, buildRoundedRectangle);\n\nconst tempRect = new Rectangle();\nconst tempTextureMatrix = new Matrix();\n\n/**\n * @param context\n * @param gpuContext\n * @internal\n */\nexport function buildContextBatches(context: GraphicsContext, gpuContext: GpuGraphicsContext)\n{\n    const { geometryData, batches } = gpuContext;\n\n    // reset them..\n    batches.length = 0;\n    geometryData.indices.length = 0;\n    geometryData.vertices.length = 0;\n    geometryData.uvs.length = 0;\n\n    for (let i = 0; i < context.instructions.length; i++)\n    {\n        const instruction = context.instructions[i];\n\n        if (instruction.action === 'texture')\n        {\n            // add a quad!\n            addTextureToGeometryData(instruction.data, batches, geometryData);\n        }\n        else if (instruction.action === 'fill' || instruction.action === 'stroke')\n        {\n            const isStroke = instruction.action === 'stroke';\n\n            // build path collection of polys and shapes points..\n            const shapePath = instruction.data.path.shapePath;\n\n            const style = instruction.data.style;\n\n            const hole = instruction.data.hole;\n\n            if (isStroke && hole)\n            {\n                addShapePathToGeometryData(hole.shapePath, style, true, batches, geometryData);\n            }\n\n            if (hole)\n            {\n                // add the holes to the last shape primitive\n                shapePath.shapePrimitives[shapePath.shapePrimitives.length - 1].holes = hole.shapePath.shapePrimitives;\n            }\n\n            addShapePathToGeometryData(shapePath, style, isStroke, batches, geometryData);\n        }\n    }\n}\n\nfunction addTextureToGeometryData(\n    data: TextureInstruction['data'],\n    batches: BatchableGraphics[],\n    geometryData: {\n        vertices: number[];\n        uvs: number[];\n        indices: number[];\n    }\n)\n{\n    const points: number[] = [];\n\n    const build = shapeBuilders.rectangle;\n\n    const rect = tempRect;\n\n    rect.x = data.dx;\n    rect.y = data.dy;\n    rect.width = data.dw;\n    rect.height = data.dh;\n\n    const matrix = data.transform;\n\n    // TODO - this can be cached...\n    if (!build.build(rect, points))\n    {\n        return;\n    }\n\n    const { vertices, uvs, indices } = geometryData;\n\n    const indexOffset = indices.length;\n    const vertOffset = vertices.length / 2;\n\n    if (matrix)\n    {\n        transformVertices(points, matrix);\n    }\n\n    build.triangulate(points, vertices, 2, vertOffset, indices, indexOffset);\n\n    const texture = data.image;\n    const textureUvs = texture.uvs;\n\n    uvs.push(\n        textureUvs.x0, textureUvs.y0,\n        textureUvs.x1, textureUvs.y1,\n        textureUvs.x3, textureUvs.y3,\n        textureUvs.x2, textureUvs.y2,\n    );\n\n    const graphicsBatch = BigPool.get(BatchableGraphics);\n\n    graphicsBatch.indexOffset = indexOffset;\n    graphicsBatch.indexSize = indices.length - indexOffset;\n\n    graphicsBatch.attributeOffset = vertOffset;\n    graphicsBatch.attributeSize = (vertices.length / 2) - vertOffset;\n\n    graphicsBatch.baseColor = data.style;\n    graphicsBatch.alpha = data.alpha;\n\n    graphicsBatch.texture = texture;\n    graphicsBatch.geometryData = geometryData;\n\n    batches.push(graphicsBatch);\n}\n\nfunction addShapePathToGeometryData(\n    shapePath: ShapePath,\n    style: ConvertedFillStyle | ConvertedStrokeStyle,\n    isStroke: boolean,\n    batches: BatchableGraphics[],\n    geometryData: {\n        vertices: number[];\n        uvs: number[];\n        indices: number[];\n    }\n)\n{\n    const { vertices, uvs, indices } = geometryData;\n\n    shapePath.shapePrimitives.forEach(({ shape, transform: matrix, holes }) =>\n    {\n        const points: number[] = [];\n        const build = shapeBuilders[shape.type];\n        // TODO - this can be cached...\n        // TODO - THIS IS DONE TWICE!!!!!!\n        // ONCE FOR STROKE AND ONCE FOR FILL\n        // move to the ShapePath2D class itself?\n\n        if (!build.build(shape, points))\n        {\n            return;\n        }\n\n        const indexOffset = indices.length;\n        const vertOffset = vertices.length / 2;\n        let topology: Topology = 'triangle-list';\n\n        if (matrix)\n        {\n            transformVertices(points, matrix);\n        }\n\n        if (!isStroke)\n        {\n            if (holes)\n            {\n                const holeIndices: number[] = [];\n\n                const otherPoints = points.slice();\n\n                const holeArrays = getHoleArrays(holes);\n\n                holeArrays.forEach((holePoints) =>\n                {\n                    holeIndices.push(otherPoints.length / 2);\n                    otherPoints.push(...holePoints);\n                });\n\n                triangulateWithHoles(otherPoints, holeIndices, vertices, 2, vertOffset, indices, indexOffset);\n            }\n            else\n            {\n                build.triangulate(points, vertices, 2, vertOffset, indices, indexOffset);\n            }\n        }\n        else\n        {\n            const close = (shape as Polygon).closePath ?? true;\n            const lineStyle = style as ConvertedStrokeStyle;\n\n            if (!lineStyle.pixelLine)\n            {\n                buildLine(points, lineStyle, false, close, vertices, indices);\n            }\n            else\n            {\n                buildPixelLine(points, close, vertices, indices);\n                topology = 'line-list';\n            }\n        }\n\n        const uvsOffset = uvs.length / 2;\n\n        const texture = style.texture;\n\n        if (texture !== Texture.WHITE)\n        {\n            const textureMatrix = generateTextureFillMatrix(tempTextureMatrix, style, shape, matrix);\n\n            buildUvs(vertices, 2, vertOffset, uvs, uvsOffset, 2, (vertices.length / 2) - vertOffset, textureMatrix);\n        }\n        else\n        {\n            buildSimpleUvs(uvs, uvsOffset, 2, (vertices.length / 2) - vertOffset);\n        }\n\n        const graphicsBatch = BigPool.get(BatchableGraphics);\n\n        graphicsBatch.indexOffset = indexOffset;\n        graphicsBatch.indexSize = indices.length - indexOffset;\n\n        graphicsBatch.attributeOffset = vertOffset;\n        graphicsBatch.attributeSize = (vertices.length / 2) - vertOffset;\n\n        graphicsBatch.baseColor = style.color;\n        graphicsBatch.alpha = style.alpha;\n\n        graphicsBatch.texture = texture;\n        graphicsBatch.geometryData = geometryData;\n        graphicsBatch.topology = topology;\n\n        batches.push(graphicsBatch);\n    });\n}\n\nfunction getHoleArrays(holePrimitives: ShapePrimitiveWithHoles[])\n{\n    const holeArrays = [];\n\n    for (let k = 0; k < holePrimitives.length; k++)\n    {\n        const holePrimitive = holePrimitives[k].shape;\n\n        // TODO - need to transform the points via there transform here..\n        const holePoints: number[] = [];\n\n        const holeBuilder = shapeBuilders[holePrimitive.type] as ShapeBuildCommand;\n\n        if (holeBuilder.build(holePrimitive, holePoints))\n        {\n            holeArrays.push(holePoints);\n        }\n    }\n\n    return holeArrays;\n}\n"],"names":["generateTextureFillMatrix"],"mappings":"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","debugId":null}},
    {"offset": {"line": 5815, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/GraphicsContextSystem.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/GraphicsContextSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { getTextureBatchBindGroup } from '../../../rendering/batcher/gpu/getTextureBatchBindGroup';\nimport { DefaultBatcher } from '../../../rendering/batcher/shared/DefaultBatcher';\nimport { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport { deprecation, v8_3_4 } from '../../../utils/logging/deprecation';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { buildContextBatches } from './utils/buildContextBatches';\n\nimport type { System } from '../../../rendering/renderers/shared/system/System';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { BatchableGraphics } from './BatchableGraphics';\nimport type { GraphicsContext } from './GraphicsContext';\n\ninterface GeometryData\n{\n    vertices: number[];\n    uvs: number[];\n    indices: number[];\n}\n\n/**\n * A class that holds batchable graphics data for a GraphicsContext.\n * @category rendering\n * @ignore\n */\nexport class GpuGraphicsContext\n{\n    public isBatchable: boolean;\n    public context: GraphicsContext;\n\n    public batches: BatchableGraphics[] = [];\n    public geometryData: GeometryData = {\n        vertices: [],\n        uvs: [],\n        indices: [],\n    };\n    public graphicsData: GraphicsContextRenderData;\n}\n\n/**\n * A class that holds the render data for a GraphicsContext.\n * @category rendering\n * @ignore\n */\nexport class GraphicsContextRenderData\n{\n    public batcher: DefaultBatcher;\n    public instructions = new InstructionSet();\n\n    public init(maxTextures: number)\n    {\n        this.batcher = new DefaultBatcher({\n            maxTextures,\n        });\n\n        this.instructions.reset();\n    }\n\n    /**\n     * @deprecated since version 8.0.0\n     * Use `batcher.geometry` instead.\n     * @see {Batcher#geometry}\n     */\n    get geometry()\n    {\n        // #if _DEBUG\n        deprecation(v8_3_4, 'GraphicsContextRenderData#geometry is deprecated, please use batcher.geometry instead.');\n        // #endif\n\n        return this.batcher.geometry;\n    }\n\n    public destroy()\n    {\n        this.batcher.destroy();\n        this.instructions.destroy();\n\n        this.batcher = null;\n        this.instructions = null;\n    }\n}\n\n/**\n * Options for the GraphicsContextSystem.\n * @category rendering\n * @advanced\n */\nexport interface GraphicsContextSystemOptions\n{\n    /** A value from 0 to 1 that controls the smoothness of bezier curves (the higher the smoother) */\n    bezierSmoothness?: number;\n}\n\n/**\n * A system that manages the rendering of GraphicsContexts.\n * @category rendering\n * @advanced\n */\nexport class GraphicsContextSystem implements System<GraphicsContextSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'graphicsContext'\n    } as const;\n\n    /** The default options for the GraphicsContextSystem. */\n    public static readonly defaultOptions: GraphicsContextSystemOptions = {\n        /**\n         * A value from 0 to 1 that controls the smoothness of bezier curves (the higher the smoother)\n         * @default 0.5\n         */\n        bezierSmoothness: 0.5,\n    };\n\n    // the root context batches, used to either make a batch or geometry\n    // all graphics use this as a base\n    private _gpuContextHash: Record<number, GpuGraphicsContext> = {};\n    // used for non-batchable graphics\n    private _graphicsDataContextHash: Record<number, GraphicsContextRenderData> = Object.create(null);\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        renderer.renderableGC.addManagedHash(this, '_gpuContextHash');\n        renderer.renderableGC.addManagedHash(this, '_graphicsDataContextHash');\n    }\n\n    /**\n     * Runner init called, update the default options\n     * @ignore\n     */\n    public init(options?: GraphicsContextSystemOptions)\n    {\n        GraphicsContextSystem.defaultOptions.bezierSmoothness = options?.bezierSmoothness\n            ?? GraphicsContextSystem.defaultOptions.bezierSmoothness;\n    }\n\n    /**\n     * Returns the render data for a given GraphicsContext.\n     * @param context - The GraphicsContext to get the render data for.\n     * @internal\n     */\n    public getContextRenderData(context: GraphicsContext): GraphicsContextRenderData\n    {\n        return this._graphicsDataContextHash[context.uid] || this._initContextRenderData(context);\n    }\n\n    /**\n     * Updates the GPU context for a given GraphicsContext.\n     * If the context is dirty, it will rebuild the batches and geometry data.\n     * @param context - The GraphicsContext to update.\n     * @returns The updated GpuGraphicsContext.\n     * @internal\n     */\n    public updateGpuContext(context: GraphicsContext)\n    {\n        let gpuContext: GpuGraphicsContext = this._gpuContextHash[context.uid]\n\n            || this._initContext(context);\n\n        if (context.dirty)\n        {\n            if (gpuContext)\n            {\n                this._cleanGraphicsContextData(context);\n            }\n            else\n            {\n                gpuContext = this._initContext(context);\n            }\n\n            buildContextBatches(context, gpuContext);\n\n            const batchMode = context.batchMode;\n\n            if (context.customShader || batchMode === 'no-batch')\n            {\n                gpuContext.isBatchable = false;\n            }\n            else if (batchMode === 'auto')\n            {\n                gpuContext.isBatchable = (gpuContext.geometryData.vertices.length < 400);\n            }\n            else\n            {\n                gpuContext.isBatchable = true;\n            }\n\n            context.dirty = false;\n        }\n\n        return gpuContext;\n    }\n\n    /**\n     * Returns the GpuGraphicsContext for a given GraphicsContext.\n     * If it does not exist, it will initialize a new one.\n     * @param context - The GraphicsContext to get the GpuGraphicsContext for.\n     * @returns The GpuGraphicsContext for the given GraphicsContext.\n     * @internal\n     */\n    public getGpuContext(context: GraphicsContext): GpuGraphicsContext\n    {\n        return this._gpuContextHash[context.uid] || this._initContext(context);\n    }\n\n    private _initContextRenderData(context: GraphicsContext): GraphicsContextRenderData\n    {\n        const graphicsData: GraphicsContextRenderData = BigPool.get(GraphicsContextRenderData, {\n            maxTextures: this._renderer.limits.maxBatchableTextures,\n        });\n\n        const { batches, geometryData } = this._gpuContextHash[context.uid];\n\n        const vertexSize = geometryData.vertices.length;\n        const indexSize = geometryData.indices.length;\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            batches[i].applyTransform = false;\n        }\n\n        const batcher = graphicsData.batcher;\n\n        // TODO we can pool buffers here eventually..\n        batcher.ensureAttributeBuffer(vertexSize);\n        batcher.ensureIndexBuffer(indexSize);\n\n        batcher.begin();\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            const batch = batches[i];\n\n            batcher.add(batch);\n        }\n\n        batcher.finish(graphicsData.instructions);\n\n        const geometry = batcher.geometry;\n\n        // not to self - this works as we are assigning the batchers array buffer\n        // once its up loaded - this buffer is then put back in the pool to be reused.\n        // this mean we don't have to creating new Batchers for each graphics items\n        geometry.indexBuffer.setDataWithSize(batcher.indexBuffer, batcher.indexSize, true);\n        geometry.buffers[0].setDataWithSize(batcher.attributeBuffer.float32View, batcher.attributeSize, true);\n\n        const drawBatches = batcher.batches;\n\n        for (let i = 0; i < drawBatches.length; i++)\n        {\n            const batch = drawBatches[i];\n\n            batch.bindGroup = getTextureBatchBindGroup(\n                batch.textures.textures,\n                batch.textures.count,\n                this._renderer.limits.maxBatchableTextures\n            );\n        }\n\n        this._graphicsDataContextHash[context.uid] = graphicsData;\n\n        return graphicsData;\n    }\n\n    private _initContext(context: GraphicsContext): GpuGraphicsContext\n    {\n        const gpuContext = new GpuGraphicsContext();\n\n        gpuContext.context = context;\n\n        this._gpuContextHash[context.uid] = gpuContext;\n\n        context.on('destroy', this.onGraphicsContextDestroy, this);\n\n        return this._gpuContextHash[context.uid];\n    }\n\n    protected onGraphicsContextDestroy(context: GraphicsContext)\n    {\n        this._cleanGraphicsContextData(context);\n\n        context.off('destroy', this.onGraphicsContextDestroy, this);\n\n        this._gpuContextHash[context.uid] = null;\n    }\n\n    private _cleanGraphicsContextData(context: GraphicsContext)\n    {\n        const gpuContext: GpuGraphicsContext = this._gpuContextHash[context.uid];\n\n        if (!gpuContext.isBatchable)\n        {\n            if (this._graphicsDataContextHash[context.uid])\n            {\n                BigPool.return(this.getContextRenderData(context) as PoolItem);\n\n                // we will rebuild this...\n                this._graphicsDataContextHash[context.uid] = null;\n            }\n        }\n\n        if (gpuContext.batches)\n        {\n            gpuContext.batches.forEach((batch) =>\n            {\n                BigPool.return(batch as PoolItem);\n            });\n        }\n    }\n\n    public destroy()\n    {\n        // Clean up all graphics contexts\n\n        for (const i in this._gpuContextHash)\n        {\n            if (this._gpuContextHash[i])\n            {\n                this.onGraphicsContextDestroy(this._gpuContextHash[i].context);\n            }\n        }\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6018, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildAdaptiveBezier.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildAdaptiveBezier.ts"],"sourcesContent":["// thanks to https://github.com/mattdesl/adaptive-bezier-curve\n// for the original code!\n\nimport { GraphicsContextSystem } from '../GraphicsContextSystem';\n\nconst RECURSION_LIMIT = 8;\nconst FLT_EPSILON = 1.19209290e-7;\nconst PATH_DISTANCE_EPSILON = 1.0;\n\nconst curveAngleToleranceEpsilon = 0.01;\nconst mAngleTolerance = 0;\nconst mCuspLimit = 0;\n\n/**\n * @param points\n * @param sX\n * @param sY\n * @param cp1x\n * @param cp1y\n * @param cp2x\n * @param cp2y\n * @param eX\n * @param eY\n * @param smoothness\n * @internal\n */\nexport function buildAdaptiveBezier(\n    points: number[],\n    sX: number, sY: number,\n    cp1x: number, cp1y: number,\n    cp2x: number, cp2y: number,\n    eX: number, eY: number,\n    smoothness?: number,\n)\n{\n    // TODO expose as a parameter\n    const scale = 1;\n    const smoothing = Math.min(\n        0.99, // a value of 1.0 actually inverts smoothing, so we cap it at 0.99\n        Math.max(0, smoothness ?? GraphicsContextSystem.defaultOptions.bezierSmoothness)\n    );\n    let distanceTolerance = (PATH_DISTANCE_EPSILON - smoothing) / scale;\n\n    distanceTolerance *= distanceTolerance;\n    begin(sX, sY, cp1x, cp1y, cp2x, cp2y, eX, eY, points, distanceTolerance);\n\n    return points;\n}\n\n// //// Based on:\n// //// https://github.com/pelson/antigrain/blob/master/agg-2.4/src/agg_curves.cpp\n\nfunction begin(\n    sX: number, sY: number,\n    cp1x: number, cp1y: number,\n    cp2x: number, cp2y: number,\n    eX: number, eY: number,\n    points: number[],\n    distanceTolerance: number\n)\n{\n    // dont need to actually ad this!\n    // points.push(sX, sY);\n    recursive(sX, sY, cp1x, cp1y, cp2x, cp2y, eX, eY, points, distanceTolerance, 0);\n    points.push(eX, eY);\n}\n\n// eslint-disable-next-line max-params\nfunction recursive(\n    x1: number, y1: number,\n    x2: number, y2: number,\n    x3: number, y3: number,\n    x4: number, y4: number,\n    points: number[],\n    distanceTolerance: number,\n    level: number)\n{\n    if (level > RECURSION_LIMIT)\n    { return; }\n\n    const pi = Math.PI;\n\n    // Calculate all the mid-points of the line segments\n    // ----------------------\n    const x12 = (x1 + x2) / 2;\n    const y12 = (y1 + y2) / 2;\n    const x23 = (x2 + x3) / 2;\n    const y23 = (y2 + y3) / 2;\n    const x34 = (x3 + x4) / 2;\n    const y34 = (y3 + y4) / 2;\n    const x123 = (x12 + x23) / 2;\n    const y123 = (y12 + y23) / 2;\n    const x234 = (x23 + x34) / 2;\n    const y234 = (y23 + y34) / 2;\n    const x1234 = (x123 + x234) / 2;\n    const y1234 = (y123 + y234) / 2;\n\n    if (level > 0)\n    { // Enforce subdivision first time\n        // Try to approximate the full cubic curve by a single straight line\n        // ------------------\n        let dx = x4 - x1;\n        let dy = y4 - y1;\n\n        const d2 = Math.abs(((x2 - x4) * dy) - ((y2 - y4) * dx));\n        const d3 = Math.abs(((x3 - x4) * dy) - ((y3 - y4) * dx));\n\n        let da1; let da2;\n\n        if (d2 > FLT_EPSILON && d3 > FLT_EPSILON)\n        {\n            // Regular care\n            // -----------------\n            if ((d2 + d3) * (d2 + d3) <= distanceTolerance * ((dx * dx) + (dy * dy)))\n            {\n                // If the curvature doesn't exceed the distanceTolerance value\n                // we tend to finish subdivisions.\n                // ----------------------\n                if (mAngleTolerance < curveAngleToleranceEpsilon)\n                {\n                    points.push(x1234, y1234);\n\n                    return;\n                }\n\n                // Angle & Cusp Condition\n                // ----------------------\n                const a23 = Math.atan2(y3 - y2, x3 - x2);\n\n                da1 = Math.abs(a23 - Math.atan2(y2 - y1, x2 - x1));\n                da2 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - a23);\n                if (da1 >= pi) da1 = (2 * pi) - da1;\n                if (da2 >= pi) da2 = (2 * pi) - da2;\n\n                if (da1 + da2 < mAngleTolerance)\n                {\n                    // Finally we can stop the recursion\n                    // ----------------------\n                    points.push(x1234, y1234);\n\n                    return;\n                }\n\n                if (mCuspLimit !== 0.0)\n                {\n                    if (da1 > mCuspLimit)\n                    {\n                        points.push(x2, y2);\n\n                        return;\n                    }\n\n                    if (da2 > mCuspLimit)\n                    {\n                        points.push(x3, y3);\n\n                        return;\n                    }\n                }\n            }\n        }\n        else if (d2 > FLT_EPSILON)\n        {\n            // p1,p3,p4 are collinear, p2 is considerable\n            // ----------------------\n            if (d2 * d2 <= distanceTolerance * ((dx * dx) + (dy * dy)))\n            {\n                if (mAngleTolerance < curveAngleToleranceEpsilon)\n                {\n                    points.push(x1234, y1234);\n\n                    return;\n                }\n\n                // Angle Condition\n                // ----------------------\n                da1 = Math.abs(Math.atan2(y3 - y2, x3 - x2) - Math.atan2(y2 - y1, x2 - x1));\n                if (da1 >= pi) da1 = (2 * pi) - da1;\n\n                if (da1 < mAngleTolerance)\n                {\n                    points.push(x2, y2);\n                    points.push(x3, y3);\n\n                    return;\n                }\n\n                if (mCuspLimit !== 0.0)\n                {\n                    if (da1 > mCuspLimit)\n                    {\n                        points.push(x2, y2);\n\n                        return;\n                    }\n                }\n            }\n        }\n        else if (d3 > FLT_EPSILON)\n        {\n            // p1,p2,p4 are collinear, p3 is considerable\n            // ----------------------\n            if (d3 * d3 <= distanceTolerance * ((dx * dx) + (dy * dy)))\n            {\n                if (mAngleTolerance < curveAngleToleranceEpsilon)\n                {\n                    points.push(x1234, y1234);\n\n                    return;\n                }\n\n                // Angle Condition\n                // ----------------------\n                da1 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - Math.atan2(y3 - y2, x3 - x2));\n                if (da1 >= pi) da1 = (2 * pi) - da1;\n\n                if (da1 < mAngleTolerance)\n                {\n                    points.push(x2, y2);\n                    points.push(x3, y3);\n\n                    return;\n                }\n\n                if (mCuspLimit !== 0.0)\n                {\n                    if (da1 > mCuspLimit)\n                    {\n                        points.push(x3, y3);\n\n                        return;\n                    }\n                }\n            }\n        }\n        else\n        {\n            // Collinear case\n            // -----------------\n            dx = x1234 - ((x1 + x4) / 2);\n            dy = y1234 - ((y1 + y4) / 2);\n            if ((dx * dx) + (dy * dy) <= distanceTolerance)\n            {\n                points.push(x1234, y1234);\n\n                return;\n            }\n        }\n    }\n\n    // Continue subdivision\n    // ----------------------\n    recursive(x1, y1, x12, y12, x123, y123, x1234, y1234, points, distanceTolerance, level + 1);\n    recursive(x1234, y1234, x234, y234, x34, y34, x4, y4, points, distanceTolerance, level + 1);\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6136, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildAdaptiveQuadratic.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildAdaptiveQuadratic.ts"],"sourcesContent":["// thanks to https://github.com/mattdesl/adaptive-quadratic-curve\n// for the original code!\n\nimport { GraphicsContextSystem } from '../GraphicsContextSystem';\n\nconst RECURSION_LIMIT = 8;\nconst FLT_EPSILON = 1.19209290e-7;\nconst PATH_DISTANCE_EPSILON = 1.0;\n\nconst curveAngleToleranceEpsilon = 0.01;\nconst mAngleTolerance = 0;\n\n/**\n * @param points\n * @param sX\n * @param sY\n * @param cp1x\n * @param cp1y\n * @param eX\n * @param eY\n * @param smoothness\n * @internal\n */\nexport function buildAdaptiveQuadratic(\n    points: number[],\n    sX: number, sY: number,\n    cp1x: number, cp1y: number,\n    eX: number, eY: number,\n    smoothness?: number,\n)\n{\n    const scale = 1.0;\n    const smoothing = Math.min(\n        0.99, // a value of 1.0 actually inverts smoothing, so we cap it at 0.99\n        Math.max(0, smoothness ?? GraphicsContextSystem.defaultOptions.bezierSmoothness)\n    );\n    let distanceTolerance = (PATH_DISTANCE_EPSILON - smoothing) / scale;\n\n    distanceTolerance *= distanceTolerance;\n    begin(sX, sY, cp1x, cp1y, eX, eY, points, distanceTolerance);\n\n    return points;\n}\n\n// //// Based on:\n// //// https://github.com/pelson/antigrain/blob/master/agg-2.4/src/agg_curves.cpp\n\nfunction begin(\n    sX: number, sY: number,\n    cp1x: number, cp1y: number,\n    eX: number, eY: number,\n    points: number[],\n    distanceTolerance: number\n)\n{\n    recursive(points, sX, sY, cp1x, cp1y, eX, eY, distanceTolerance, 0);\n\n    points.push(eX, eY);\n}\n\nfunction recursive(\n    points: number[],\n    x1: number, y1: number,\n    x2: number, y2: number,\n    x3: number, y3: number,\n    distanceTolerance: number,\n    level: number\n)\n{\n    if (level > RECURSION_LIMIT)\n    { return; }\n\n    const pi = Math.PI;\n\n    // Calculate all the mid-points of the line segments\n    // ----------------------\n    const x12 = (x1 + x2) / 2;\n    const y12 = (y1 + y2) / 2;\n    const x23 = (x2 + x3) / 2;\n    const y23 = (y2 + y3) / 2;\n    const x123 = (x12 + x23) / 2;\n    const y123 = (y12 + y23) / 2;\n\n    let dx = x3 - x1;\n    let dy = y3 - y1;\n    const d = Math.abs((((x2 - x3) * dy) - ((y2 - y3) * dx)));\n\n    if (d > FLT_EPSILON)\n    {\n        // Regular care\n        // -----------------\n        if (d * d <= distanceTolerance * ((dx * dx) + (dy * dy)))\n        {\n            // If the curvature doesn't exceed the distance_tolerance value\n            // we tend to finish subdivisions.\n            // ----------------------\n            if (mAngleTolerance < curveAngleToleranceEpsilon)\n            {\n                points.push(x123, y123);\n\n                return;\n            }\n\n            // Angle & Cusp Condition\n            // ----------------------\n            let da = Math.abs(Math.atan2(y3 - y2, x3 - x2) - Math.atan2(y2 - y1, x2 - x1));\n\n            if (da >= pi) da = (2 * pi) - da;\n\n            if (da < mAngleTolerance)\n            {\n                // Finally we can stop the recursion\n                // ----------------------\n                points.push(x123, y123);\n\n                return;\n            }\n        }\n    }\n    else\n    {\n        // Collinear case\n        // -----------------\n        dx = x123 - ((x1 + x3) / 2);\n        dy = y123 - ((y1 + y3) / 2);\n        if ((dx * dx) + (dy * dy) <= distanceTolerance)\n        {\n            points.push(x123, y123);\n\n            return;\n        }\n    }\n\n    // Continue subdivision\n    // ----------------------\n    recursive(points, x1, y1, x12, y12, x123, y123, distanceTolerance, level + 1);\n    recursive(points, x123, y123, x23, y23, x3, y3, distanceTolerance, level + 1);\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6205, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildArc.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildArc.ts"],"sourcesContent":["/**\n * @param points\n * @param x\n * @param y\n * @param radius\n * @param start\n * @param end\n * @param clockwise\n * @param steps\n * @internal\n */\nexport function buildArc(\n    points: number[],\n    x: number, y: number,\n    radius: number,\n    start: number,\n    end: number,\n    clockwise: boolean,\n    steps?: number\n)\n{\n    // determine distance between the two angles\n    // ...probably a nicer way of writing this\n    let dist = Math.abs(start - end);\n\n    if (!clockwise && start > end)\n    {\n        dist = (2 * Math.PI) - dist;\n    }\n    else if (clockwise && end > start)\n    {\n        dist = (2 * Math.PI) - dist;\n    }\n\n    // approximate the # of steps using the cube root of the radius\n\n    steps ||= Math.max(6, Math.floor(6 * Math.pow(radius, 1 / 3) * (dist / (Math.PI))));\n\n    // ensure we have at least 3 steps..\n    steps = Math.max(steps, 3);\n\n    let f = dist / (steps);\n    let t = start;\n\n    // modify direction\n    f *= clockwise ? -1 : 1;\n\n    for (let i = 0; i < steps + 1; i++)\n    {\n        const cs = Math.cos(t);\n        const sn = Math.sin(t);\n\n        const nx = x + (cs * radius);\n        const ny = y + (sn * radius);\n\n        points.push(nx, ny);\n\n        t += f;\n    }\n}\n"],"names":[],"mappings":";;;;;AAWgB,SAAA,QAAA,CACZ,MAAA,EACA,CAAW,EAAA,CAAA,EACX,MAAA,EACA,KACA,EAAA,GAAA,EACA,SAAA,EACA,KAEJ,EAAA;IAGI,IAAI,IAAO,GAAA,IAAA,CAAK,GAAI,CAAA,KAAA,GAAQ,GAAG,CAAA,CAAA;IAE3B,IAAA,CAAC,SAAa,IAAA,KAAA,GAAQ,GAC1B,EAAA;QACY,IAAA,GAAA,CAAA,GAAI,KAAK,EAAM,GAAA,IAAA,CAAA;IAAA,CAC3B,MAAA,IACS,SAAa,IAAA,GAAA,GAAM,KAC5B,EAAA;QACY,IAAA,GAAA,CAAA,GAAI,KAAK,EAAM,GAAA,IAAA,CAAA;IAAA,CAC3B;IAIA,KAAA,IAAA,CAAA,KAAA,GAAU,IAAK,CAAA,GAAA,CAAI,CAAG,EAAA,IAAA,CAAK,KAAA,CAAM,CAAI,GAAA,IAAA,CAAK,GAAI,CAAA,MAAA,EAAQ,IAAI,CAAC,CAAA,GAAA,CAAK,IAAQ,GAAA,IAAA,CAAK,EAAA,CAAI,CAAC,CAAA,CAAA,CAAA;IAG1E,KAAA,GAAA,IAAA,CAAK,GAAI,CAAA,KAAA,EAAO,CAAC,CAAA,CAAA;IAEzB,IAAI,IAAI,IAAQ,GAAA,KAAA,CAAA;IAChB,IAAI,CAAI,GAAA,KAAA,CAAA;IAGR,CAAA,IAAK,YAAY,CAAK,CAAA,GAAA,CAAA,CAAA;IAEtB,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,GAAQ,GAAG,CAC/B,EAAA,CAAA;QACU,MAAA,EAAA,GAAK,IAAK,CAAA,GAAA,CAAI,CAAC,CAAA,CAAA;QACf,MAAA,EAAA,GAAK,IAAK,CAAA,GAAA,CAAI,CAAC,CAAA,CAAA;QAEf,MAAA,EAAA,GAAK,IAAK,EAAK,GAAA,MAAA,CAAA;QACf,MAAA,EAAA,GAAK,IAAK,EAAK,GAAA,MAAA,CAAA;QAEd,MAAA,CAAA,IAAA,CAAK,IAAI,EAAE,CAAA,CAAA;QAEb,CAAA,IAAA,CAAA,CAAA;IAAA,CACT;AACJ","debugId":null}},
    {"offset": {"line": 6237, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildArcTo.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildArcTo.ts"],"sourcesContent":["import { buildArc } from './buildArc';\n\n/**\n * The arcTo() method creates an arc/curve between two tangents on the canvas.\n *\n * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n * @param points\n * @param x1\n * @param y1\n * @param x2\n * @param y2\n * @param radius\n * @internal\n */\nexport function buildArcTo(\n    points: number[],\n    x1: number, y1: number,\n    x2: number, y2: number,\n    radius: number,\n): void\n{\n    const fromX = points[points.length - 2];\n    const fromY = points[points.length - 1];\n\n    const a1 = fromY - y1;\n    const b1 = fromX - x1;\n    const a2 = y2 - y1;\n    const b2 = x2 - x1;\n    const mm = Math.abs((a1 * b2) - (b1 * a2));\n\n    if (mm < 1.0e-8 || radius === 0)\n    {\n        if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1)\n        {\n            points.push(x1, y1);\n        }\n\n        return;\n    }\n\n    const dd = (a1 * a1) + (b1 * b1);\n    const cc = (a2 * a2) + (b2 * b2);\n    const tt = (a1 * a2) + (b1 * b2);\n    const k1 = radius * Math.sqrt(dd) / mm;\n    const k2 = radius * Math.sqrt(cc) / mm;\n    const j1 = k1 * tt / dd;\n    const j2 = k2 * tt / cc;\n    const cx = (k1 * b2) + (k2 * b1);\n    const cy = (k1 * a2) + (k2 * a1);\n    const px = b1 * (k2 + j1);\n    const py = a1 * (k2 + j1);\n    const qx = b2 * (k1 + j2);\n    const qy = a2 * (k1 + j2);\n    const startAngle = Math.atan2(py - cy, px - cx);\n    const endAngle = Math.atan2(qy - cy, qx - cx);\n\n    buildArc(points,\n        (cx + x1),\n        (cy + y1),\n        radius,\n        startAngle,\n        endAngle,\n        b1 * a2 > b2 * a1\n    );\n}\n"],"names":[],"mappings":";;;;;;;AAcO,SAAS,WACZ,MACA,EAAA,EAAA,EAAY,EACZ,EAAA,EAAA,EAAY,EAAA,EACZ,MAEJ,EAAA;IACI,MAAM,KAAQ,GAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;IACtC,MAAM,KAAQ,GAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;IAEtC,MAAM,KAAK,KAAQ,GAAA,EAAA,CAAA;IACnB,MAAM,KAAK,KAAQ,GAAA,EAAA,CAAA;IACnB,MAAM,KAAK,EAAK,GAAA,EAAA,CAAA;IAChB,MAAM,KAAK,EAAK,GAAA,EAAA,CAAA;IAChB,MAAM,KAAK,IAAK,CAAA,GAAA,CAAK,EAAK,GAAA,EAAA,GAAO,KAAK,EAAG,CAAA,CAAA;IAErC,IAAA,EAAA,GAAK,IAAU,IAAA,MAAA,KAAW,CAC9B,EAAA;QACQ,IAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,KAAM,EAAM,IAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,KAAM,EACtE,EAAA;YACW,MAAA,CAAA,IAAA,CAAK,IAAI,EAAE,CAAA,CAAA;QAAA,CACtB;QAEA,OAAA;IAAA,CACJ;IAEM,MAAA,EAAA,GAAM,EAAK,GAAA,EAAA,GAAO,EAAK,GAAA,EAAA,CAAA;IACvB,MAAA,EAAA,GAAM,EAAK,GAAA,EAAA,GAAO,EAAK,GAAA,EAAA,CAAA;IACvB,MAAA,EAAA,GAAM,EAAK,GAAA,EAAA,GAAO,EAAK,GAAA,EAAA,CAAA;IAC7B,MAAM,EAAK,GAAA,MAAA,GAAS,IAAK,CAAA,IAAA,CAAK,EAAE,CAAI,GAAA,EAAA,CAAA;IACpC,MAAM,EAAK,GAAA,MAAA,GAAS,IAAK,CAAA,IAAA,CAAK,EAAE,CAAI,GAAA,EAAA,CAAA;IAC9B,MAAA,EAAA,GAAK,KAAK,EAAK,GAAA,EAAA,CAAA;IACf,MAAA,EAAA,GAAK,KAAK,EAAK,GAAA,EAAA,CAAA;IACf,MAAA,EAAA,GAAM,EAAK,GAAA,EAAA,GAAO,EAAK,GAAA,EAAA,CAAA;IACvB,MAAA,EAAA,GAAM,EAAK,GAAA,EAAA,GAAO,EAAK,GAAA,EAAA,CAAA;IACvB,MAAA,EAAA,GAAK,KAAA,CAAM,EAAK,GAAA,EAAA,CAAA,CAAA;IAChB,MAAA,EAAA,GAAK,KAAA,CAAM,EAAK,GAAA,EAAA,CAAA,CAAA;IAChB,MAAA,EAAA,GAAK,KAAA,CAAM,EAAK,GAAA,EAAA,CAAA,CAAA;IAChB,MAAA,EAAA,GAAK,KAAA,CAAM,EAAK,GAAA,EAAA,CAAA,CAAA;IACtB,MAAM,aAAa,IAAK,CAAA,KAAA,CAAM,EAAK,GAAA,EAAA,EAAI,KAAK,EAAE,CAAA,CAAA;IAC9C,MAAM,WAAW,IAAK,CAAA,KAAA,CAAM,EAAK,GAAA,EAAA,EAAI,KAAK,EAAE,CAAA,CAAA;QAE5C,kQAAA,EAAS,MAAA,EACJ,EAAK,GAAA,EAAA,EACL,EAAK,GAAA,EAAA,EACN,MAAA,EACA,UAAA,EACA,QAAA,EACA,EAAA,GAAK,KAAK,EAAK,GAAA,EAAA;AAEvB","debugId":null}},
    {"offset": {"line": 6281, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/buildCommands/buildArcToSvg.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/buildCommands/buildArcToSvg.ts"],"sourcesContent":["import { buildAdaptiveBezier } from './buildAdaptiveBezier';\n\nconst TAU = Math.PI * 2;\n\nconst out = {\n    centerX: 0,\n    centerY: 0,\n    ang1: 0,\n    ang2: 0\n};\n\nconst mapToEllipse = (\n    { x, y }: {x: number, y: number},\n    rx: number, ry: number,\n    cosPhi: number, sinPhi: number,\n    centerX: number, centerY: number,\n    out: {x: number, y: number}\n): {x: number, y: number} =>\n{\n    x *= rx;\n    y *= ry;\n\n    const xp = (cosPhi * x) - (sinPhi * y);\n    const yp = (sinPhi * x) + (cosPhi * y);\n\n    out.x = xp + centerX;\n    out.y = yp + centerY;\n\n    return out;\n};\n\nfunction approxUnitArc(ang1: number, ang2: number): {x: number, y: number}[]\n{\n    // If 90 degree circular arc, use a constant\n    // as derived from http://spencermortensen.com/articles/bezier-circle\n\n    const a1 = ang2 === -1.5707963267948966 ? -0.551915024494 : 4 / 3 * Math.tan(ang2 / 4);\n\n    const a = ang2 === 1.5707963267948966 ? 0.551915024494 : a1;\n\n    const x1 = Math.cos(ang1);\n    const y1 = Math.sin(ang1);\n    const x2 = Math.cos(ang1 + ang2);\n    const y2 = Math.sin(ang1 + ang2);\n\n    return [\n        {\n            x: x1 - (y1 * a),\n            y: y1 + (x1 * a)\n        },\n        {\n            x: x2 + (y2 * a),\n            y: y2 - (x2 * a)\n        },\n        {\n            x: x2,\n            y: y2\n        }\n    ];\n}\n\nconst vectorAngle = (ux: number, uy: number, vx: number, vy: number) =>\n{\n    const sign = ((ux * vy) - (uy * vx) < 0) ? -1 : 1;\n\n    let dot = (ux * vx) + (uy * vy);\n\n    if (dot > 1)\n    {\n        dot = 1;\n    }\n\n    if (dot < -1)\n    {\n        dot = -1;\n    }\n\n    return sign * Math.acos(dot);\n};\n\nconst getArcCenter = (\n    px: number,\n    py: number,\n    cx: number,\n    cy: number,\n    rx: number,\n    ry: number,\n    largeArcFlag: number,\n    sweepFlag: number,\n    sinPhi: number,\n    cosPhi: number,\n    pxp: number,\n    pyp: number,\n    out: {\n        centerX: number,\n        centerY: number,\n        ang1: number,\n        ang2: number\n    }\n// eslint-disable-next-line max-params\n) =>\n{\n    const rxSq = Math.pow(rx, 2);\n    const rySq = Math.pow(ry, 2);\n    const pxpSq = Math.pow(pxp, 2);\n    const pypSq = Math.pow(pyp, 2);\n\n    let radicant = (rxSq * rySq) - (rxSq * pypSq) - (rySq * pxpSq);\n\n    if (radicant < 0)\n    {\n        radicant = 0;\n    }\n\n    radicant /= (rxSq * pypSq) + (rySq * pxpSq);\n    radicant = Math.sqrt(radicant) * (largeArcFlag === sweepFlag ? -1 : 1);\n\n    const centerXp = radicant * rx / ry * pyp;\n    const centerYp = radicant * -ry / rx * pxp;\n\n    const centerX = (cosPhi * centerXp) - (sinPhi * centerYp) + ((px + cx) / 2);\n    const centerY = (sinPhi * centerXp) + (cosPhi * centerYp) + ((py + cy) / 2);\n\n    const vx1 = (pxp - centerXp) / rx;\n    const vy1 = (pyp - centerYp) / ry;\n    const vx2 = (-pxp - centerXp) / rx;\n    const vy2 = (-pyp - centerYp) / ry;\n\n    const ang1 = vectorAngle(1, 0, vx1, vy1);\n    let ang2 = vectorAngle(vx1, vy1, vx2, vy2);\n\n    if (sweepFlag === 0 && ang2 > 0)\n    {\n        ang2 -= TAU;\n    }\n\n    if (sweepFlag === 1 && ang2 < 0)\n    {\n        ang2 += TAU;\n    }\n\n    out.centerX = centerX;\n    out.centerY = centerY;\n    out.ang1 = ang1;\n    out.ang2 = ang2;\n};\n\n/**\n * @param points\n * @param px\n * @param py\n * @param cx\n * @param cy\n * @param rx\n * @param ry\n * @param xAxisRotation\n * @param largeArcFlag\n * @param sweepFlag\n * @internal\n */\nexport function buildArcToSvg(\n    points: number[],\n    px: number,\n    py: number,\n    cx: number,\n    cy: number,\n    rx: number,\n    ry: number,\n    xAxisRotation = 0,\n    largeArcFlag = 0,\n    sweepFlag = 0\n): void\n{\n    if (rx === 0 || ry === 0)\n    {\n        return;\n    }\n\n    const sinPhi = Math.sin(xAxisRotation * TAU / 360);\n    const cosPhi = Math.cos(xAxisRotation * TAU / 360);\n\n    const pxp = (cosPhi * (px - cx) / 2) + (sinPhi * (py - cy) / 2);\n    const pyp = (-sinPhi * (px - cx) / 2) + (cosPhi * (py - cy) / 2);\n\n    if (pxp === 0 && pyp === 0)\n    {\n        return;\n    }\n\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n\n    const lambda = (Math.pow(pxp, 2) / Math.pow(rx, 2)) + (Math.pow(pyp, 2) / Math.pow(ry, 2));\n\n    if (lambda > 1)\n    {\n        rx *= Math.sqrt(lambda);\n        ry *= Math.sqrt(lambda);\n    }\n\n    getArcCenter(\n        px,\n        py,\n        cx,\n        cy,\n        rx,\n        ry,\n        largeArcFlag,\n        sweepFlag,\n        sinPhi,\n        cosPhi,\n        pxp,\n        pyp,\n        out\n    );\n\n    let { ang1, ang2 } = out;\n    const { centerX, centerY } = out;\n\n    // If 'ang2' == 90.0000000001, then `ratio` will devalue to\n    // 1.0000000001. This causes `segments` to be greater than one, which is an\n    // unnecessary split, and adds extra points to the bezier curve. To alleviate\n    // this issue, we round to 1.0 when the ratio is close to 1.0.\n    let ratio = Math.abs(ang2) / (TAU / 4);\n\n    if (Math.abs(1.0 - ratio) < 0.0000001)\n    {\n        ratio = 1.0;\n    }\n\n    const segments = Math.max(Math.ceil(ratio), 1);\n\n    ang2 /= segments;\n\n    let lastX = points[points.length - 2];\n    let lastY = points[points.length - 1];\n\n    const outCurvePoint = { x: 0, y: 0 };\n\n    for (let i = 0; i < segments; i++)\n    {\n        const curve = approxUnitArc(ang1, ang2);\n\n        const { x: x1, y: y1 } = mapToEllipse(curve[0], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n        const { x: x2, y: y2 } = mapToEllipse(curve[1], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n        const { x, y } = mapToEllipse(curve[2], rx, ry, cosPhi, sinPhi, centerX, centerY, outCurvePoint);\n\n        buildAdaptiveBezier(\n            points,\n            lastX, lastY,\n            x1, y1, x2, y2, x, y\n        );\n\n        lastX = x;\n        lastY = y;\n\n        ang1 += ang2;\n    }\n}\n"],"names":["out"],"mappings":";;;;;;;AAEA,MAAM,GAAA,GAAM,KAAK,EAAK,GAAA,CAAA,CAAA;AAEtB,MAAM,GAAM,GAAA;IACR,OAAS,EAAA,CAAA;IACT,OAAS,EAAA,CAAA;IACT,IAAM,EAAA,CAAA;IACN,IAAM,EAAA,CAAA;AACV,CAAA,CAAA;AAEA,MAAM,YAAe,GAAA,CACjB,EAAE,CAAA,EAAG,CAAE,EAAA,EACP,EAAY,EAAA,EAAA,EACZ,MAAgB,EAAA,MAAA,EAChB,OAAiB,EAAA,OAAA,EACjBA,IAEJ,KAAA;IACS,CAAA,IAAA,EAAA,CAAA;IACA,CAAA,IAAA,EAAA,CAAA;IAEC,MAAA,EAAA,GAAM,MAAS,GAAA,CAAA,GAAM,MAAS,GAAA,CAAA,CAAA;IAC9B,MAAA,EAAA,GAAM,MAAS,GAAA,CAAA,GAAM,MAAS,GAAA,CAAA,CAAA;IAEpCA,IAAAA,CAAI,CAAA,GAAI,EAAK,GAAA,OAAA,CAAA;IACbA,IAAAA,CAAI,CAAA,GAAI,EAAK,GAAA,OAAA,CAAA;IAENA,OAAAA,IAAAA,CAAAA;AACX,CAAA,CAAA;AAEA,SAAS,aAAA,CAAc,IAAA,EAAc,IACrC,EAAA;IAIU,MAAA,EAAA,GAAK,SAAS,CAAsB,kBAAA,GAAA,CAAA,cAAA,GAAkB,IAAI,CAAI,GAAA,IAAA,CAAK,GAAI,CAAA,IAAA,GAAO,CAAC,CAAA,CAAA;IAE/E,MAAA,CAAA,GAAI,IAAS,KAAA,kBAAA,GAAqB,cAAiB,GAAA,EAAA,CAAA;IAEnD,MAAA,EAAA,GAAK,IAAK,CAAA,GAAA,CAAI,IAAI,CAAA,CAAA;IAClB,MAAA,EAAA,GAAK,IAAK,CAAA,GAAA,CAAI,IAAI,CAAA,CAAA;IACxB,MAAM,EAAK,GAAA,IAAA,CAAK,GAAI,CAAA,IAAA,GAAO,IAAI,CAAA,CAAA;IAC/B,MAAM,EAAK,GAAA,IAAA,CAAK,GAAI,CAAA,IAAA,GAAO,IAAI,CAAA,CAAA;IAExB,OAAA;QACH;YACI,CAAA,EAAG,KAAM,EAAK,GAAA,CAAA;YACd,CAAA,EAAG,KAAM,EAAK,GAAA,CAAA;QAAA,CAClB;QACA;YACI,CAAA,EAAG,KAAM,EAAK,GAAA,CAAA;YACd,CAAA,EAAG,KAAM,EAAK,GAAA,CAAA;QAAA,CAClB;QACA;YACI,CAAG,EAAA,EAAA;YACH,CAAG,EAAA,EAAA;QAAA,CACP;KACJ,CAAA;AACJ,CAAA;AAEA,MAAM,WAAc,GAAA,CAAC,EAAY,EAAA,EAAA,EAAY,IAAY,EACzD,KAAA;IACI,MAAM,OAAS,EAAK,GAAA,EAAA,GAAO,EAAK,GAAA,EAAA,GAAM,IAAK,CAAK,CAAA,GAAA,CAAA,CAAA;IAE5C,IAAA,GAAA,GAAO,EAAK,GAAA,EAAA,GAAO,EAAK,GAAA,EAAA,CAAA;IAE5B,IAAI,MAAM,CACV,EAAA;QACU,GAAA,GAAA,CAAA,CAAA;IAAA,CACV;IAEA,IAAI,MAAM,CACV,CAAA,EAAA;QACU,GAAA,GAAA,CAAA,CAAA,CAAA;IAAA,CACV;IAEO,OAAA,IAAA,GAAO,IAAK,CAAA,IAAA,CAAK,GAAG,CAAA,CAAA;AAC/B,CAAA,CAAA;AAEA,MAAM,YAAe,GAAA,CACjB,EACA,EAAA,EAAA,EACA,IACA,EACA,EAAA,EAAA,EACA,EACA,EAAA,YAAA,EACA,SACA,EAAA,MAAA,EACA,MACA,EAAA,GAAA,EACA,KACAA,IAQJ,KAAA;IACI,MAAM,IAAO,GAAA,IAAA,CAAK,GAAI,CAAA,EAAA,EAAI,CAAC,CAAA,CAAA;IAC3B,MAAM,IAAO,GAAA,IAAA,CAAK,GAAI,CAAA,EAAA,EAAI,CAAC,CAAA,CAAA;IAC3B,MAAM,KAAQ,GAAA,IAAA,CAAK,GAAI,CAAA,GAAA,EAAK,CAAC,CAAA,CAAA;IAC7B,MAAM,KAAQ,GAAA,IAAA,CAAK,GAAI,CAAA,GAAA,EAAK,CAAC,CAAA,CAAA;IAE7B,IAAI,QAAY,GAAA,IAAA,GAAO,IAAS,GAAA,IAAA,GAAO,QAAU,IAAO,GAAA,KAAA,CAAA;IAExD,IAAI,WAAW,CACf,EAAA;QACe,QAAA,GAAA,CAAA,CAAA;IAAA,CACf;IAEa,QAAA,IAAA,IAAA,GAAO,QAAU,IAAO,GAAA,KAAA,CAAA;IACrC,QAAA,GAAW,KAAK,IAAK,CAAA,QAAQ,CAAK,GAAA,CAAA,YAAA,KAAiB,YAAY,CAAK,CAAA,GAAA,CAAA,CAAA,CAAA;IAE9D,MAAA,QAAA,GAAW,QAAW,GAAA,EAAA,GAAK,EAAK,GAAA,GAAA,CAAA;IACtC,MAAM,QAAW,GAAA,QAAA,GAAW,CAAC,EAAA,GAAK,EAAK,GAAA,GAAA,CAAA;IAEvC,MAAM,UAAW,MAAS,GAAA,QAAA,GAAa,MAAS,GAAA,QAAA,GAAA,CAAc,KAAK,EAAM,IAAA,CAAA,CAAA;IACzE,MAAM,UAAW,MAAS,GAAA,QAAA,GAAa,MAAS,GAAA,QAAA,GAAA,CAAc,KAAK,EAAM,IAAA,CAAA,CAAA;IAEnE,MAAA,GAAA,GAAA,CAAO,MAAM,QAAY,IAAA,EAAA,CAAA;IACzB,MAAA,GAAA,GAAA,CAAO,MAAM,QAAY,IAAA,EAAA,CAAA;IACzB,MAAA,GAAA,GAAA,CAAO,CAAC,GAAA,GAAM,QAAY,IAAA,EAAA,CAAA;IAC1B,MAAA,GAAA,GAAA,CAAO,CAAC,GAAA,GAAM,QAAY,IAAA,EAAA,CAAA;IAEhC,MAAM,IAAO,GAAA,WAAA,CAAY,CAAG,EAAA,CAAA,EAAG,KAAK,GAAG,CAAA,CAAA;IACvC,IAAI,IAAO,GAAA,WAAA,CAAY,GAAK,EAAA,GAAA,EAAK,KAAK,GAAG,CAAA,CAAA;IAErC,IAAA,SAAA,KAAc,CAAK,IAAA,IAAA,GAAO,CAC9B,EAAA;QACY,IAAA,IAAA,GAAA,CAAA;IAAA,CACZ;IAEI,IAAA,SAAA,KAAc,CAAK,IAAA,IAAA,GAAO,CAC9B,EAAA;QACY,IAAA,IAAA,GAAA,CAAA;IAAA,CACZ;IAEAA,KAAI,OAAU,GAAA,OAAA,CAAA;IACdA,KAAI,OAAU,GAAA,OAAA,CAAA;IACdA,KAAI,IAAO,GAAA,IAAA,CAAA;IACXA,KAAI,IAAO,GAAA,IAAA,CAAA;AACf,CAAA,CAAA;AAeO,SAAS,aACZ,CAAA,MAAA,EACA,EACA,EAAA,EAAA,EACA,EACA,EAAA,EAAA,EACA,EACA,EAAA,EAAA,EACA,aAAgB,GAAA,CAAA,EAChB,YAAe,GAAA,CAAA,EACf,YAAY,CAEhB,EAAA;IACQ,IAAA,EAAA,KAAO,CAAK,IAAA,EAAA,KAAO,CACvB,EAAA;QACI,OAAA;IAAA,CACJ;IAEA,MAAM,MAAS,GAAA,IAAA,CAAK,GAAI,CAAA,aAAA,GAAgB,MAAM,GAAG,CAAA,CAAA;IACjD,MAAM,MAAS,GAAA,IAAA,CAAK,GAAI,CAAA,aAAA,GAAgB,MAAM,GAAG,CAAA,CAAA;IAEjD,MAAM,MAAO,MAAU,GAAA,CAAA,EAAA,GAAK,EAAA,IAAM,CAAM,GAAA,MAAA,GAAA,CAAU,KAAK,EAAM,CAAA,GAAA,CAAA,CAAA;IACvD,MAAA,GAAA,GAAO,CAAC,MAAU,GAAA,CAAA,EAAA,GAAK,EAAA,IAAM,CAAM,GAAA,MAAA,GAAA,CAAU,KAAK,EAAM,CAAA,GAAA,CAAA,CAAA;IAE1D,IAAA,GAAA,KAAQ,CAAK,IAAA,GAAA,KAAQ,CACzB,EAAA;QACI,OAAA;IAAA,CACJ;IAEK,EAAA,GAAA,IAAA,CAAK,GAAA,CAAI,EAAE,CAAA,CAAA;IACX,EAAA,GAAA,IAAA,CAAK,GAAA,CAAI,EAAE,CAAA,CAAA;IAEhB,MAAM,SAAU,IAAK,CAAA,GAAA,CAAI,KAAK,CAAC,CAAA,GAAI,KAAK,GAAI,CAAA,EAAA,EAAI,CAAC,CAAM,GAAA,IAAA,CAAK,GAAA,CAAI,GAAK,EAAA,CAAC,IAAI,IAAK,CAAA,GAAA,CAAI,IAAI,CAAC,CAAA,CAAA;IAExF,IAAI,SAAS,CACb,EAAA;QACU,EAAA,IAAA,IAAA,CAAK,IAAA,CAAK,MAAM,CAAA,CAAA;QAChB,EAAA,IAAA,IAAA,CAAK,IAAA,CAAK,MAAM,CAAA,CAAA;IAAA,CAC1B;IAEA,YAAA,CACI,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,YAAA,EACA,SAAA,EACA,MAAA,EACA,MAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA;IAGA,IAAA,EAAE,IAAM,EAAA,IAAA,EAAS,GAAA,GAAA,CAAA;IACf,MAAA,EAAE,OAAS,EAAA,OAAA,EAAY,GAAA,GAAA,CAAA;IAM7B,IAAI,KAAQ,GAAA,IAAA,CAAK,GAAI,CAAA,IAAI,IAAA,CAAK,GAAM,GAAA,CAAA,CAAA,CAAA;IAEpC,IAAI,IAAK,CAAA,GAAA,CAAI,CAAM,GAAA,KAAK,IAAI,IAC5B,EAAA;QACY,KAAA,GAAA,CAAA,CAAA;IAAA,CACZ;IAEA,MAAM,WAAW,IAAK,CAAA,GAAA,CAAI,KAAK,IAAK,CAAA,KAAK,GAAG,CAAC,CAAA,CAAA;IAErC,IAAA,IAAA,QAAA,CAAA;IAER,IAAI,KAAQ,GAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;IACpC,IAAI,KAAQ,GAAA,MAAA,CAAO,MAAO,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;IAEpC,MAAM,aAAgB,GAAA;QAAE,CAAG,EAAA,CAAA;QAAG,GAAG,CAAE;IAAA,CAAA,CAAA;IAEnC,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,QAAA,EAAU,CAC9B,EAAA,CAAA;QACU,MAAA,KAAA,GAAQ,aAAc,CAAA,IAAA,EAAM,IAAI,CAAA,CAAA;QAEtC,MAAM,EAAE,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAA,GAAO,YAAa,CAAA,KAAA,CAAM,CAAC,CAAA,EAAG,IAAI,EAAI,EAAA,MAAA,EAAQ,MAAQ,EAAA,OAAA,EAAS,SAAS,aAAa,CAAA,CAAA;QACvG,MAAM,EAAE,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,EAAA,EAAA,GAAO,YAAa,CAAA,KAAA,CAAM,CAAC,CAAA,EAAG,IAAI,EAAI,EAAA,MAAA,EAAQ,MAAQ,EAAA,OAAA,EAAS,SAAS,aAAa,CAAA,CAAA;QACvG,MAAM,EAAE,CAAA,EAAG,CAAE,EAAA,GAAI,aAAa,KAAM,CAAA,CAAC,CAAG,EAAA,EAAA,EAAI,EAAI,EAAA,MAAA,EAAQ,MAAQ,EAAA,OAAA,EAAS,SAAS,aAAa,CAAA,CAAA;YAE/F,wRAAA,EACI,MAAA,EACA,KAAA,EAAO,KAAA,EACP,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,EAAA,EAAI,CAAA,EAAG,CAAA;QAGf,KAAA,GAAA,CAAA,CAAA;QACA,KAAA,GAAA,CAAA,CAAA;QAEA,IAAA,IAAA,IAAA,CAAA;IAAA,CACZ;AACJ","debugId":null}},
    {"offset": {"line": 6419, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/path/roundShape.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/path/roundShape.ts"],"sourcesContent":["import type { PointData } from '../../../../maths/point/PointData';\nimport type { ShapePath } from './ShapePath';\n\n/**\n * Typed and cleaned up version of:\n * https://stackoverflow.com/questions/44855794/html5-canvas-triangle-with-rounded-corners/44856925#44856925\n * @param g - Graphics to be drawn on.\n * @param points - Corners of the shape to draw. Minimum length is 3.\n * @param radius - Corners default radius.\n * @ignore\n */\nexport function roundedShapeArc(\n    g: ShapePath,\n    points: RoundedPoint[],\n    radius: number\n): void\n{\n    const vecFrom = (p: PointData, pp: PointData) =>\n    {\n        const x = pp.x - p.x;\n        const y = pp.y - p.y;\n        const len = Math.sqrt((x * x) + (y * y));\n        const nx = x / len;\n        const ny = y / len;\n\n        return { len, nx, ny };\n    };\n\n    const sharpCorner = (i: number, p: PointData) =>\n    {\n        if (i === 0)\n        {\n            g.moveTo(p.x, p.y);\n        }\n        else\n        {\n            g.lineTo(p.x, p.y);\n        }\n    };\n\n    let p1 = points[points.length - 1];\n\n    for (let i = 0; i < points.length; i++)\n    {\n        const p2 = points[i % points.length];\n        const pRadius = p2.radius ?? radius;\n\n        if (pRadius <= 0)\n        {\n            sharpCorner(i, p2);\n            p1 = p2;\n            continue;\n        }\n\n        const p3 = points[(i + 1) % points.length];\n        const v1 = vecFrom(p2, p1);\n        const v2 = vecFrom(p2, p3);\n\n        if (v1.len < 1e-4 || v2.len < 1e-4)\n        {\n            sharpCorner(i, p2);\n            p1 = p2;\n            continue;\n        }\n\n        let angle = Math.asin((v1.nx * v2.ny) - (v1.ny * v2.nx));\n        let radDirection = 1;\n        let drawDirection = false;\n\n        if ((v1.nx * v2.nx) - (v1.ny * -v2.ny) < 0)\n        {\n            if (angle < 0)\n            {\n                angle = Math.PI + angle;\n            }\n            else\n            {\n                angle = Math.PI - angle;\n                radDirection = -1;\n                drawDirection = true;\n            }\n        }\n        else if (angle > 0)\n        {\n            radDirection = -1;\n            drawDirection = true;\n        }\n\n        const halfAngle = angle / 2;\n\n        let cRadius: number;\n        let lenOut = Math.abs(\n            (Math.cos(halfAngle) * pRadius) / Math.sin(halfAngle)\n        );\n\n        if (lenOut > Math.min(v1.len / 2, v2.len / 2))\n        {\n            lenOut = Math.min(v1.len / 2, v2.len / 2);\n            cRadius = Math.abs((lenOut * Math.sin(halfAngle)) / Math.cos(halfAngle));\n        }\n        else\n        {\n            cRadius = pRadius;\n        }\n\n        const cX = p2.x + (v2.nx * lenOut) + (-v2.ny * cRadius * radDirection);\n        const cY = p2.y + (v2.ny * lenOut) + (v2.nx * cRadius * radDirection);\n        const startAngle = Math.atan2(v1.ny, v1.nx) + ((Math.PI / 2) * radDirection);\n        const endAngle = Math.atan2(v2.ny, v2.nx) - ((Math.PI / 2) * radDirection);\n\n        if (i === 0)\n        {\n            g.moveTo(\n                cX + (Math.cos(startAngle) * cRadius),\n                cY + (Math.sin(startAngle) * cRadius)\n            );\n        }\n\n        g.arc(cX, cY, cRadius, startAngle, endAngle, drawDirection);\n\n        p1 = p2;\n    }\n}\n\n/**\n * Data structure for points with optional radius.\n * @category scene\n * @standard\n */\nexport type RoundedPoint = PointData & { radius?: number };\n\n/**\n * Typed and cleaned up version of:\n * https://stackoverflow.com/questions/44855794/html5-canvas-triangle-with-rounded-corners/56214413#56214413\n * @param g - Graphics to be drawn on.\n * @param points - Corners of the shape to draw. Minimum length is 3.\n * @param radius - Corners default radius.\n * @ignore\n */\nexport function roundedShapeQuadraticCurve(\n    g: ShapePath,\n    points: RoundedPoint[],\n    radius: number,\n    smoothness?: number,\n): void\n{\n    const distance = (p1: PointData, p2: PointData) =>\n        Math.sqrt(((p1.x - p2.x) ** 2) + ((p1.y - p2.y) ** 2));\n\n    const pointLerp = (p1: PointData, p2: PointData, t: number) => ({\n        x: p1.x + ((p2.x - p1.x) * t),\n        y: p1.y + ((p2.y - p1.y) * t),\n    });\n\n    const numPoints = points.length;\n\n    for (let i = 0; i < numPoints; i++)\n    {\n        const thisPoint = points[(i + 1) % numPoints];\n        const pRadius = thisPoint.radius ?? radius;\n\n        if (pRadius <= 0)\n        {\n            if (i === 0)\n            {\n                g.moveTo(thisPoint.x, thisPoint.y);\n            }\n            else\n            {\n                g.lineTo(thisPoint.x, thisPoint.y);\n            }\n\n            continue;\n        }\n\n        const lastPoint = points[i];\n        const nextPoint = points[(i + 2) % numPoints];\n\n        const lastEdgeLength = distance(lastPoint, thisPoint);\n        let start;\n\n        if (lastEdgeLength < 1e-4)\n        {\n            start = thisPoint;\n        }\n        else\n        {\n            const lastOffsetDistance = Math.min(lastEdgeLength / 2, pRadius);\n\n            start = pointLerp(\n                thisPoint,\n                lastPoint,\n                lastOffsetDistance / lastEdgeLength\n            );\n        }\n\n        const nextEdgeLength = distance(nextPoint, thisPoint);\n        let end;\n\n        if (nextEdgeLength < 1e-4)\n        {\n            end = thisPoint;\n        }\n        else\n        {\n            const nextOffsetDistance = Math.min(nextEdgeLength / 2, pRadius);\n\n            end = pointLerp(\n                thisPoint,\n                nextPoint,\n                nextOffsetDistance / nextEdgeLength\n            );\n        }\n\n        if (i === 0)\n        {\n            g.moveTo(start.x, start.y);\n        }\n        else\n        {\n            g.lineTo(start.x, start.y);\n        }\n        g.quadraticCurveTo(thisPoint.x, thisPoint.y, end.x, end.y, smoothness);\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6548, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/path/ShapePath.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/path/ShapePath.ts"],"sourcesContent":["// a shape lets you build out a shape with lines and curves and primitives..\n\nimport { Circle } from '../../../../maths/shapes/Circle';\nimport { Ellipse } from '../../../../maths/shapes/Ellipse';\nimport { Polygon } from '../../../../maths/shapes/Polygon';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { RoundedRectangle } from '../../../../maths/shapes/RoundedRectangle';\nimport { Bounds } from '../../../container/bounds/Bounds';\nimport { buildAdaptiveBezier } from '../buildCommands/buildAdaptiveBezier';\nimport { buildAdaptiveQuadratic } from '../buildCommands/buildAdaptiveQuadratic';\nimport { buildArc } from '../buildCommands/buildArc';\nimport { buildArcTo } from '../buildCommands/buildArcTo';\nimport { buildArcToSvg } from '../buildCommands/buildArcToSvg';\nimport { roundedShapeArc, roundedShapeQuadraticCurve } from './roundShape';\n\nimport type { Matrix } from '../../../../maths/matrix/Matrix';\nimport type { PointData } from '../../../../maths/point/PointData';\nimport type { ShapePrimitive } from '../../../../maths/shapes/ShapePrimitive';\nimport type { GraphicsPath } from './GraphicsPath';\nimport type { RoundedPoint } from './roundShape';\n\nconst tempRectangle = new Rectangle();\n\n/**\n * A type representing a shape primitive with optional transformation and holes.\n * @category scene\n * @advanced\n */\nexport type ShapePrimitiveWithHoles = {\n    shape: ShapePrimitive,\n    transform?: Matrix,\n    holes?: ShapePrimitiveWithHoles[]\n};\n\n/**\n * The `ShapePath` class acts as a bridge between high-level drawing commands\n * and the lower-level `GraphicsContext` rendering engine.\n * It translates drawing commands, such as those for creating lines, arcs, ellipses, rectangles, and complex polygons, into a\n * format that can be efficiently processed by a `GraphicsContext`. This includes handling path starts,\n * ends, and transformations for shapes.\n *\n * It is used internally by `GraphicsPath` to build up the path.\n * @category scene\n * @advanced\n */\nexport class ShapePath\n{\n    /** The list of shape primitives that make up the path. */\n    public shapePrimitives: ShapePrimitiveWithHoles[] = [];\n    private _currentPoly: Polygon | null = null;\n    private readonly _graphicsPath2D: GraphicsPath;\n    private readonly _bounds = new Bounds();\n    public readonly signed: boolean;\n\n    constructor(graphicsPath2D: GraphicsPath)\n    {\n        this._graphicsPath2D = graphicsPath2D;\n        this.signed = graphicsPath2D.checkForHoles;\n    }\n\n    /**\n     * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n     * @param x - The x-coordinate for the starting point.\n     * @param y - The y-coordinate for the starting point.\n     * @returns The instance of the current object for chaining.\n     */\n    public moveTo(x: number, y: number): this\n    {\n        this.startPoly(x, y);\n\n        return this;\n    }\n\n    /**\n     * Connects the current point to a new point with a straight line. This method updates the current path.\n     * @param x - The x-coordinate of the new point to connect to.\n     * @param y - The y-coordinate of the new point to connect to.\n     * @returns The instance of the current object for chaining.\n     */\n    public lineTo(x: number, y: number): this\n    {\n        this._ensurePoly();\n\n        const points = this._currentPoly.points;\n\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        if (fromX !== x || fromY !== y)\n        {\n            points.push(x, y);\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds an arc to the path. The arc is centered at (x, y)\n     *  position with radius `radius` starting at `startAngle` and ending at `endAngle`.\n     * @param x - The x-coordinate of the arc's center.\n     * @param y - The y-coordinate of the arc's center.\n     * @param radius - The radius of the arc.\n     * @param startAngle - The starting angle of the arc, in radians.\n     * @param endAngle - The ending angle of the arc, in radians.\n     * @param counterclockwise - Specifies whether the arc should be drawn in the anticlockwise direction. False by default.\n     * @returns The instance of the current object for chaining.\n     */\n    public arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise: boolean): this\n    {\n        // TODO - if its 360 degrees.. make it a circle object?\n\n        this._ensurePoly(false);\n\n        const points = this._currentPoly.points;\n\n        buildArc(points, x, y, radius, startAngle, endAngle, counterclockwise);\n\n        return this;\n    }\n\n    /**\n     * Adds an arc to the path with the arc tangent to the line joining two specified points.\n     * The arc radius is specified by `radius`.\n     * @param x1 - The x-coordinate of the first point.\n     * @param y1 - The y-coordinate of the first point.\n     * @param x2 - The x-coordinate of the second point.\n     * @param y2 - The y-coordinate of the second point.\n     * @param radius - The radius of the arc.\n     * @returns The instance of the current object for chaining.\n     */\n    public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this\n    {\n        this._ensurePoly();\n\n        const points = this._currentPoly.points;\n\n        buildArcTo(points, x1, y1, x2, y2, radius);\n\n        return this;\n    }\n\n    /**\n     * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n     * @param rx - The x-radius of the ellipse.\n     * @param ry - The y-radius of the ellipse.\n     * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n     * to the x-axis of the coordinate system, in degrees.\n     * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n     * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n     * @param x - The x-coordinate of the arc's end point.\n     * @param y - The y-coordinate of the arc's end point.\n     * @returns The instance of the current object for chaining.\n     */\n    public arcToSvg(\n        rx: number, ry: number,\n        xAxisRotation: number, largeArcFlag: number, sweepFlag: number,\n        x: number, y: number\n    ): this\n    {\n        const points = this._currentPoly.points;\n\n        // this needs to work on both canvas and GPU backends so might want to move this to the Graphics2D path..\n        buildArcToSvg(\n            points,\n            this._currentPoly.lastX,\n            this._currentPoly.lastY,\n            x,\n            y,\n            rx,\n            ry,\n            xAxisRotation,\n            largeArcFlag,\n            sweepFlag,\n        );\n\n        return this;\n    }\n\n    /**\n     * Adds a cubic Bezier curve to the path.\n     * It requires three points: the first two are control points and the third one is the end point.\n     * The starting point is the last point in the current path.\n     * @param cp1x - The x-coordinate of the first control point.\n     * @param cp1y - The y-coordinate of the first control point.\n     * @param cp2x - The x-coordinate of the second control point.\n     * @param cp2y - The y-coordinate of the second control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public bezierCurveTo(\n        cp1x: number, cp1y: number, cp2x: number, cp2y: number,\n        x: number, y: number,\n        smoothness?: number\n    ): this\n    {\n        this._ensurePoly();\n\n        const currentPoly = this._currentPoly;\n\n        // ensure distance from last point to first control point is not too small\n\n        // TODO - make this a plugin that people can override..\n        buildAdaptiveBezier(\n            this._currentPoly.points,\n            currentPoly.lastX, currentPoly.lastY,\n            cp1x, cp1y, cp2x, cp2y, x, y,\n            smoothness,\n        );\n\n        return this;\n    }\n\n    /**\n     * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n     * The starting point is the last point in the current path.\n     * @param cp1x - The x-coordinate of the control point.\n     * @param cp1y - The y-coordinate of the control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothing - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public quadraticCurveTo(cp1x: number, cp1y: number, x: number, y: number, smoothing?: number): this\n    {\n        this._ensurePoly();\n\n        const currentPoly = this._currentPoly;\n\n        // ensure distance from last point to first control point is not too small\n\n        // TODO - make this a plugin that people can override..\n        buildAdaptiveQuadratic(\n            this._currentPoly.points,\n            currentPoly.lastX, currentPoly.lastY,\n            cp1x, cp1y, x, y,\n            smoothing,\n        );\n\n        return this;\n    }\n\n    /**\n     * Closes the current path by drawing a straight line back to the start.\n     * If the shape is already closed or there are no points in the path, this method does nothing.\n     * @returns The instance of the current object for chaining.\n     */\n    public closePath(): this\n    {\n        this.endPoly(true);\n\n        return this;\n    }\n\n    /**\n     * Adds another path to the current path. This method allows for the combination of multiple paths into one.\n     * @param path - The `GraphicsPath` object representing the path to add.\n     * @param transform - An optional `Matrix` object to apply a transformation to the path before adding it.\n     * @returns The instance of the current object for chaining.\n     */\n    public addPath(path: GraphicsPath, transform?: Matrix): this\n    {\n        this.endPoly();\n\n        // Only clone if we need to transform\n        if (transform && !transform.isIdentity())\n        {\n            path = path.clone(true);\n            path.transform(transform);\n        }\n\n        const shapePrimitives = this.shapePrimitives;\n        const start = shapePrimitives.length;\n\n        for (let i = 0; i < path.instructions.length; i++)\n        {\n            const instruction = path.instructions[i];\n\n            this[instruction.action](...(instruction.data as [never, never, never, never, never, never, never]));\n        }\n\n        // This section processes holes in polygons by checking if any polygon is contained within another.\n        // If a polygon is found to be inside another polygon (mainShape), it's treated as a hole.\n        // The hole polygon is removed from the main shapePrimitives array and added to the holes array\n        // of the containing polygon. This allows for proper rendering of shapes with holes.\n        if (path.checkForHoles && shapePrimitives.length - start > 1)\n        {\n            let mainShape = null;\n\n            // Process in place instead of creating a removal array\n            for (let i = start; i < shapePrimitives.length; i++)\n            {\n                const shapePrimitive = shapePrimitives[i];\n\n                if (shapePrimitive.shape.type === 'polygon')\n                {\n                    const polygon = shapePrimitive.shape as Polygon;\n                    const mainPolygon = mainShape?.shape as Polygon;\n\n                    if (mainPolygon && mainPolygon.containsPolygon(polygon))\n                    {\n                        // Initialize holes array only when needed\n                        mainShape.holes ||= [];\n                        mainShape.holes.push(shapePrimitive);\n\n                        // Remove the hole by moving elements left\n                        shapePrimitives.copyWithin(i, i + 1);\n                        shapePrimitives.length--;\n                        i--;\n                    }\n                    else\n                    {\n                        mainShape = shapePrimitive;\n                    }\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Finalizes the drawing of the current path. Optionally, it can close the path.\n     * @param closePath - A boolean indicating whether to close the path after finishing. False by default.\n     */\n    public finish(closePath = false)\n    {\n        this.endPoly(closePath);\n    }\n\n    /**\n     * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n     * @returns The instance of the current object for chaining.\n     */\n    public rect(x: number, y: number, w: number, h: number, transform?: Matrix): this\n    {\n        this.drawShape(new Rectangle(x, y, w, h), transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a circle shape. This method adds a new circle path to the current drawing.\n     * @param x - The x-coordinate of the center of the circle.\n     * @param y - The y-coordinate of the center of the circle.\n     * @param radius - The radius of the circle.\n     * @param transform - An optional `Matrix` object to apply a transformation to the circle.\n     * @returns The instance of the current object for chaining.\n     */\n    public circle(x: number, y: number, radius: number, transform?: Matrix): this\n    {\n        this.drawShape(new Circle(x, y, radius), transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon shape. This method allows for the creation of complex polygons by specifying a sequence of points.\n     * @param points - An array of numbers, or or an array of PointData objects eg [{x,y}, {x,y}, {x,y}]\n     * representing the x and y coordinates of the polygon's vertices, in sequence.\n     * @param close - A boolean indicating whether to close the polygon path. True by default.\n     * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n     * @returns The instance of the current object for chaining.\n     */\n    public poly(points: number[] | PointData[], close?: boolean, transform?: Matrix): this\n    {\n        const polygon = new Polygon(points);\n\n        polygon.closePath = close;\n\n        this.drawShape(polygon, transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n     * @returns The instance of the current object for chaining.\n     */\n    public regularPoly(x: number, y: number, radius: number, sides: number, rotation = 0, transform?: Matrix): this\n    {\n        sides = Math.max(sides | 0, 3);\n        const startAngle = (-1 * Math.PI / 2) + rotation;\n        const delta = (Math.PI * 2) / sides;\n        const polygon = [];\n\n        for (let i = 0; i < sides; i++)\n        {\n            const angle = startAngle - (i * delta);\n\n            polygon.push(\n                x + (radius * Math.cos(angle)),\n                y + (radius * Math.sin(angle))\n            );\n        }\n\n        this.poly(polygon, true, transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon with rounded corners.\n     * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param corner - The radius of the rounding of the corners.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @param smoothness - Optional parameter to adjust the smoothness of the rounding.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundPoly(\n        x: number, y: number,\n        radius: number,\n        sides: number, corner: number,\n        rotation = 0,\n        smoothness?: number,\n    ): this\n    {\n        sides = Math.max((sides | 0), 3);\n\n        if (corner <= 0)\n        {\n            return this.regularPoly(x, y, radius, sides, rotation);\n        }\n\n        const sideLength = (radius * Math.sin(Math.PI / sides)) - 0.001;\n\n        corner = Math.min(corner, sideLength);\n\n        const startAngle = (-1 * Math.PI / 2) + rotation;\n        const delta = (Math.PI * 2) / sides;\n        const internalAngle = ((sides - 2) * Math.PI) / sides / 2;\n\n        for (let i = 0; i < sides; i++)\n        {\n            const angle = (i * delta) + startAngle;\n            const x0 = x + (radius * Math.cos(angle));\n            const y0 = y + (radius * Math.sin(angle));\n            const a1 = angle + (Math.PI) + internalAngle;\n            const a2 = angle - (Math.PI) - internalAngle;\n            const x1 = x0 + (corner * Math.cos(a1));\n            const y1 = y0 + (corner * Math.sin(a1));\n            const x3 = x0 + (corner * Math.cos(a2));\n            const y3 = y0 + (corner * Math.sin(a2));\n\n            if (i === 0)\n            {\n                this.moveTo(x1, y1);\n            }\n            else\n            {\n                this.lineTo(x1, y1);\n            }\n            this.quadraticCurveTo(x0, y0, x3, y3, smoothness);\n        }\n\n        return this.closePath();\n    }\n\n    /**\n     * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n     * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n     * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n     * A minimum of 3 points is required.\n     * @param radius - The default radius for the corners.\n     * This radius is applied to all corners unless overridden in `points`.\n     * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n     *  method instead of an arc method. Defaults to false.\n     * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n     * Higher values make the curve smoother.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundShape(points: RoundedPoint[], radius: number, useQuadratic = false, smoothness?: number): this\n    {\n        if (points.length < 3)\n        {\n            return this;\n        }\n\n        if (useQuadratic)\n        {\n            roundedShapeQuadraticCurve(this, points, radius, smoothness);\n        }\n        else\n        {\n            roundedShapeArc(this, points, radius);\n        }\n\n        return this.closePath();\n    }\n\n    /**\n     * Draw Rectangle with fillet corners. This is much like rounded rectangle\n     * however it support negative numbers as well for the corner radius.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param fillet - accept negative or positive values\n     */\n    public filletRect(x: number, y: number, width: number, height: number, fillet: number): this\n    {\n        if (fillet === 0)\n        {\n            return this.rect(x, y, width, height);\n        }\n\n        const maxFillet = Math.min(width, height) / 2;\n        const inset = Math.min(maxFillet, Math.max(-maxFillet, fillet));\n        const right = x + width;\n        const bottom = y + height;\n        const dir = inset < 0 ? -inset : 0;\n        const size = Math.abs(inset);\n\n        return this\n            .moveTo(x, y + size)\n            .arcTo(x + dir, y + dir, x + size, y, size)\n            .lineTo(right - size, y)\n            .arcTo(right - dir, y + dir, right, y + size, size)\n            .lineTo(right, bottom - size)\n            .arcTo(right - dir, bottom - dir, x + width - size, bottom, size)\n            .lineTo(x + size, bottom)\n            .arcTo(x + dir, bottom - dir, x, bottom - size, size)\n            .closePath();\n    }\n\n    /**\n     * Draw Rectangle with chamfer corners. These are angled corners.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param chamfer - non-zero real number, size of corner cutout\n     * @param transform\n     */\n    public chamferRect(x: number, y: number, width: number, height: number, chamfer: number, transform?: Matrix): this\n    {\n        if (chamfer <= 0)\n        {\n            return this.rect(x, y, width, height);\n        }\n\n        const inset = Math.min(chamfer, Math.min(width, height) / 2);\n        const right = x + width;\n        const bottom = y + height;\n        const points = [\n            x + inset, y,\n            right - inset, y,\n            right, y + inset,\n            right, bottom - inset,\n            right - inset, bottom,\n            x + inset, bottom,\n            x, bottom - inset,\n            x, y + inset,\n        ];\n\n        // Remove overlapping points\n        for (let i = points.length - 1; i >= 2; i -= 2)\n        {\n            if (points[i] === points[i - 2] && points[i - 1] === points[i - 3])\n            {\n                points.splice(i - 1, 2);\n            }\n        }\n\n        return this.poly(points, true, transform);\n    }\n\n    /**\n     * Draws an ellipse at the specified location and with the given x and y radii.\n     * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n     * @param x - The x-coordinate of the center of the ellipse.\n     * @param y - The y-coordinate of the center of the ellipse.\n     * @param radiusX - The horizontal radius of the ellipse.\n     * @param radiusY - The vertical radius of the ellipse.\n     * @param transform - An optional `Matrix` object to apply a transformation to the ellipse. This can include rotations.\n     * @returns The instance of the current object for chaining.\n     */\n    public ellipse(x: number, y: number, radiusX: number, radiusY: number, transform?: Matrix): this\n    {\n        // TODO apply rotation to transform...\n\n        this.drawShape(new Ellipse(x, y, radiusX, radiusY), transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle with rounded corners.\n     * The corner radius can be specified to determine how rounded the corners should be.\n     * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n     * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundRect(x: number, y: number, w: number, h: number, radius?: number, transform?: Matrix): this\n    {\n        this.drawShape(new RoundedRectangle(x, y, w, h, radius), transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a given shape on the canvas.\n     * This is a generic method that can draw any type of shape specified by the `ShapePrimitive` parameter.\n     * An optional transformation matrix can be applied to the shape, allowing for complex transformations.\n     * @param shape - The shape to draw, defined as a `ShapePrimitive` object.\n     * @param matrix - An optional `Matrix` for transforming the shape. This can include rotations,\n     * scaling, and translations.\n     * @returns The instance of the current object for chaining.\n     */\n    public drawShape(shape: ShapePrimitive, matrix?: Matrix): this\n    {\n        this.endPoly();\n\n        this.shapePrimitives.push({ shape, transform: matrix });\n\n        return this;\n    }\n\n    /**\n     * Starts a new polygon path from the specified starting point.\n     * This method initializes a new polygon or ends the current one if it exists.\n     * @param x - The x-coordinate of the starting point of the new polygon.\n     * @param y - The y-coordinate of the starting point of the new polygon.\n     * @returns The instance of the current object for chaining.\n     */\n    public startPoly(x: number, y: number): this\n    {\n        let currentPoly = this._currentPoly;\n\n        if (currentPoly)\n        {\n            this.endPoly();\n        }\n\n        currentPoly = new Polygon();\n\n        currentPoly.points.push(x, y);\n\n        this._currentPoly = currentPoly;\n\n        return this;\n    }\n\n    /**\n     * Ends the current polygon path. If `closePath` is set to true,\n     * the path is closed by connecting the last point to the first one.\n     * This method finalizes the current polygon and prepares it for drawing or adding to the shape primitives.\n     * @param closePath - A boolean indicating whether to close the polygon by connecting the last point\n     *  back to the starting point. False by default.\n     * @returns The instance of the current object for chaining.\n     */\n    public endPoly(closePath = false): this\n    {\n        const shape = this._currentPoly;\n\n        if (shape && shape.points.length > 2)\n        {\n            shape.closePath = closePath;\n\n            this.shapePrimitives.push({ shape });\n        }\n\n        this._currentPoly = null;\n\n        return this;\n    }\n\n    private _ensurePoly(start = true): void\n    {\n        if (this._currentPoly) return;\n\n        this._currentPoly = new Polygon();\n\n        if (start)\n        {\n            // get last points..\n            const lastShape = this.shapePrimitives[this.shapePrimitives.length - 1];\n\n            if (lastShape)\n            {\n                // i KNOW its a rect..\n                let lx = lastShape.shape.x;\n                let ly = lastShape.shape.y;\n\n                if (lastShape.transform && !lastShape.transform.isIdentity())\n                {\n                    const t = lastShape.transform;\n\n                    const tempX = lx;\n\n                    lx = (t.a * lx) + (t.c * ly) + t.tx;\n                    ly = (t.b * tempX) + (t.d * ly) + t.ty;\n                }\n\n                this._currentPoly.points.push(lx, ly);\n            }\n            else\n            {\n                this._currentPoly.points.push(0, 0);\n            }\n        }\n    }\n\n    /** Builds the path. */\n    public buildPath()\n    {\n        const path = this._graphicsPath2D;\n\n        this.shapePrimitives.length = 0;\n        this._currentPoly = null;\n\n        for (let i = 0; i < path.instructions.length; i++)\n        {\n            const instruction = path.instructions[i];\n\n            // Sorry TS! this is the best we could do...\n            this[instruction.action](...(instruction.data as [never, never, never, never, never, never, never]));\n        }\n\n        this.finish();\n    }\n\n    /** Gets the bounds of the path. */\n    get bounds(): Bounds\n    {\n        const bounds = this._bounds;\n\n        bounds.clear();\n\n        const shapePrimitives = this.shapePrimitives;\n\n        for (let i = 0; i < shapePrimitives.length; i++)\n        {\n            const shapePrimitive = shapePrimitives[i];\n\n            const boundsRect = shapePrimitive.shape.getBounds(tempRectangle);\n\n            if (shapePrimitive.transform)\n            {\n                bounds.addRect(boundsRect, shapePrimitive.transform);\n            }\n            else\n            {\n                bounds.addRect(boundsRect);\n            }\n        }\n\n        return bounds;\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 7052, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/path/GraphicsPath.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/path/GraphicsPath.ts"],"sourcesContent":["import { Point } from '../../../../maths/point/Point';\nimport { uid } from '../../../../utils/data/uid';\nimport { warn } from '../../../../utils/logging/warn';\nimport { parseSVGPath } from '../svg/parseSVGPath';\nimport { ShapePath } from './ShapePath';\n\nimport type { Matrix } from '../../../../maths/matrix/Matrix';\nimport type { PointData } from '../../../../maths/point/PointData';\nimport type { Bounds } from '../../../container/bounds/Bounds';\nimport type { RoundedPoint } from './roundShape';\n\n/**\n * Represents a single drawing instruction in a `GraphicsPath`.\n * Each instruction consists of an action type and associated data.\n * @category scene\n * @advanced\n */\nexport interface PathInstruction\n{\n    action: 'moveTo' | 'lineTo' | 'quadraticCurveTo' |\n    'bezierCurveTo' | 'arc' | 'closePath' |\n    'addPath' | 'arcTo' | 'ellipse' |\n    'rect' | 'roundRect' | 'arcToSvg' |\n    'poly' | 'circle' |\n    'regularPoly' | 'roundPoly' | 'roundShape' | 'filletRect' | 'chamferRect'\n    data: any[];\n}\n\n/**\n * The `GraphicsPath` class is designed to represent a graphical path consisting of multiple drawing instructions.\n * This class serves as a collection of drawing commands that can be executed to render shapes and paths on a canvas or\n * similar graphical context. It supports high-level drawing operations like lines, arcs, curves, and more, enabling\n * complex graphic constructions with relative ease.\n * @category scene\n * @advanced\n */\nexport class GraphicsPath\n{\n    public instructions: PathInstruction[] = [];\n\n    /** unique id for this graphics path */\n    public readonly uid: number = uid('graphicsPath');\n\n    private _dirty = true;\n    // needed for hit testing and bounds calculations\n    private _shapePath: ShapePath;\n\n    /**\n     * Controls whether shapes in this path should be checked for holes using the non-zero fill rule.\n     * When true, any closed shape that is fully contained within another shape will become\n     * a hole in that shape during filling operations.\n     *\n     * This follows SVG's non-zero fill rule where:\n     * 1. Shapes are analyzed to find containment relationships\n     * 2. If Shape B is fully contained within Shape A, Shape B becomes a hole in Shape A\n     * 3. Multiple nested holes are supported\n     *\n     * Mainly used internally by the SVG parser to correctly handle holes in complex paths.\n     * When false, all shapes are filled independently without checking for holes.\n     */\n    public checkForHoles: boolean;\n\n    /**\n     * Provides access to the internal shape path, ensuring it is up-to-date with the current instructions.\n     * @returns The `ShapePath` instance associated with this `GraphicsPath`.\n     */\n    get shapePath(): ShapePath\n    {\n        if (!this._shapePath)\n        {\n            this._shapePath = new ShapePath(this);\n        }\n\n        if (this._dirty)\n        {\n            this._dirty = false;\n            this._shapePath.buildPath();\n        }\n\n        return this._shapePath;\n    }\n\n    /**\n     * Creates a `GraphicsPath` instance optionally from an SVG path string or an array of `PathInstruction`.\n     * @param instructions - An SVG path string or an array of `PathInstruction` objects.\n     * @param signed\n     */\n    constructor(instructions?: string | PathInstruction[], signed = false)\n    {\n        this.checkForHoles = signed;\n\n        if (typeof instructions === 'string')\n        {\n            parseSVGPath(instructions, this);\n        }\n        else\n        {\n            this.instructions = instructions?.slice() ?? [];\n        }\n    }\n\n    /**\n     * Adds another `GraphicsPath` to this path, optionally applying a transformation.\n     * @param path - The `GraphicsPath` to add.\n     * @param transform - An optional transformation to apply to the added path.\n     * @returns The instance of the current object for chaining.\n     */\n    public addPath(path: GraphicsPath, transform?: Matrix): this\n    {\n        path = path.clone();\n        this.instructions.push({ action: 'addPath', data: [path, transform] });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Adds an arc to the path. The arc is centered at (x, y)\n     *  position with radius `radius` starting at `startAngle` and ending at `endAngle`.\n     * @param x - The x-coordinate of the arc's center.\n     * @param y - The y-coordinate of the arc's center.\n     * @param radius - The radius of the arc.\n     * @param startAngle - The starting angle of the arc, in radians.\n     * @param endAngle - The ending angle of the arc, in radians.\n     * @param counterclockwise - Specifies whether the arc should be drawn in the anticlockwise direction. False by default.\n     * @returns The instance of the current object for chaining.\n     */\n    public arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): this;\n    public arc(...args: [number, number, number, number, number, boolean]): this\n    {\n        this.instructions.push({ action: 'arc', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Adds an arc to the path with the arc tangent to the line joining two specified points.\n     * The arc radius is specified by `radius`.\n     * @param x1 - The x-coordinate of the first point.\n     * @param y1 - The y-coordinate of the first point.\n     * @param x2 - The x-coordinate of the second point.\n     * @param y2 - The y-coordinate of the second point.\n     * @param radius - The radius of the arc.\n     * @returns The instance of the current object for chaining.\n     */\n    public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this;\n    public arcTo(...args: [number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'arcTo', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n     * @param rx - The x-radius of the ellipse.\n     * @param ry - The y-radius of the ellipse.\n     * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n     * to the x-axis of the coordinate system, in degrees.\n     * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n     * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n     * @param x - The x-coordinate of the arc's end point.\n     * @param y - The y-coordinate of the arc's end point.\n     * @returns The instance of the current object for chaining.\n     */\n    // eslint-disable-next-line max-len\n    public arcToSvg(rx: number, ry: number, xAxisRotation: number, largeArcFlag: number, sweepFlag: number, x: number, y: number): this;\n    public arcToSvg(...args: [number, number, number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'arcToSvg', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Adds a cubic Bezier curve to the path.\n     * It requires three points: the first two are control points and the third one is the end point.\n     * The starting point is the last point in the current path.\n     * @param cp1x - The x-coordinate of the first control point.\n     * @param cp1y - The y-coordinate of the first control point.\n     * @param cp2x - The x-coordinate of the second control point.\n     * @param cp2y - The y-coordinate of the second control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public bezierCurveTo(\n        cp1x: number, cp1y: number, cp2x: number, cp2y: number,\n        x: number, y: number,\n        smoothness?: number\n    ): this;\n    public bezierCurveTo(...args: [number, number, number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'bezierCurveTo', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Adds a cubic Bezier curve to the path.\n     * It requires two points: the second control point and the end point. The first control point is assumed to be\n     * The starting point is the last point in the current path.\n     * @param cp2x - The x-coordinate of the second control point.\n     * @param cp2y - The y-coordinate of the second control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public bezierCurveToShort(cp2x: number, cp2y: number, x: number, y: number, smoothness?: number): this\n    {\n        const last = this.instructions[this.instructions.length - 1];\n\n        const lastPoint = this.getLastPoint(Point.shared);\n\n        let cp1x = 0;\n        let cp1y = 0;\n\n        if (!last || last.action !== 'bezierCurveTo')\n        {\n            cp1x = lastPoint.x;\n            cp1y = lastPoint.y;\n        }\n        else\n        {\n            cp1x = last.data[2];\n            cp1y = last.data[3];\n\n            const currentX = lastPoint.x;\n            const currentY = lastPoint.y;\n\n            cp1x = currentX + (currentX - cp1x);\n            cp1y = currentY + (currentY - cp1y);\n        }\n\n        this.instructions.push({ action: 'bezierCurveTo', data: [cp1x, cp1y, cp2x, cp2y, x, y, smoothness] });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Closes the current path by drawing a straight line back to the start.\n     * If the shape is already closed or there are no points in the path, this method does nothing.\n     * @returns The instance of the current object for chaining.\n     */\n    public closePath(): this\n    {\n        this.instructions.push({ action: 'closePath', data: [] });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws an ellipse at the specified location and with the given x and y radii.\n     * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n     * @param x - The x-coordinate of the center of the ellipse.\n     * @param y - The y-coordinate of the center of the ellipse.\n     * @param radiusX - The horizontal radius of the ellipse.\n     * @param radiusY - The vertical radius of the ellipse.\n     * @param matrix - An optional `Matrix` object to apply a transformation to the ellipse. This can include rotations.\n     * @returns The instance of the current object for chaining.\n     */\n    public ellipse(x: number, y: number, radiusX: number, radiusY: number, matrix?: Matrix): this;\n    public ellipse(...args: [number, number, number, number, Matrix]): this\n    {\n        this.instructions.push({ action: 'ellipse', data: args });\n\n        // TODO nail this!\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Connects the current point to a new point with a straight line. This method updates the current path.\n     * @param x - The x-coordinate of the new point to connect to.\n     * @param y - The y-coordinate of the new point to connect to.\n     * @returns The instance of the current object for chaining.\n     */\n    public lineTo(x: number, y: number): this;\n    public lineTo(...args: [number, number]): this\n    {\n        this.instructions.push({ action: 'lineTo', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n     * @param x - The x-coordinate for the starting point.\n     * @param y - The y-coordinate for the starting point.\n     * @returns The instance of the current object for chaining.\n     */\n    public moveTo(x: number, y: number): this;\n    public moveTo(...args: [number, number]): this\n    {\n        this.instructions.push({ action: 'moveTo', data: args });\n\n        return this;\n    }\n\n    /**\n     * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n     * The starting point is the last point in the current path.\n     * @param cpx - The x-coordinate of the control point.\n     * @param cpy - The y-coordinate of the control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public quadraticCurveTo(cpx: number, cpy: number, x: number, y: number, smoothness?: number): this;\n    public quadraticCurveTo(...args: [number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'quadraticCurveTo', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Adds a quadratic curve to the path. It uses the previous point as the control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public quadraticCurveToShort(x: number, y: number, smoothness?: number): this\n    {\n        // check if we have a previous quadraticCurveTo\n        const last = this.instructions[this.instructions.length - 1];\n\n        const lastPoint = this.getLastPoint(Point.shared);\n\n        let cpx1 = 0;\n        let cpy1 = 0;\n\n        if (!last || last.action !== 'quadraticCurveTo')\n        {\n            cpx1 = lastPoint.x;\n            cpy1 = lastPoint.y;\n        }\n        else\n        {\n            cpx1 = last.data[0];\n            cpy1 = last.data[1];\n\n            const currentX = lastPoint.x;\n            const currentY = lastPoint.y;\n\n            cpx1 = currentX + (currentX - cpx1);\n            cpy1 = currentY + (currentY - cpy1);\n        }\n\n        this.instructions.push({ action: 'quadraticCurveTo', data: [cpx1, cpy1, x, y, smoothness] });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n     * @returns The instance of the current object for chaining.\n     */\n    public rect(x: number, y: number, w: number, h: number, transform?: Matrix): this\n    {\n        this.instructions.push({ action: 'rect', data: [x, y, w, h, transform] });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a circle shape. This method adds a new circle path to the current drawing.\n     * @param x - The x-coordinate of the center of the circle.\n     * @param y - The y-coordinate of the center of the circle.\n     * @param radius - The radius of the circle.\n     * @param transform - An optional `Matrix` object to apply a transformation to the circle.\n     * @returns The instance of the current object for chaining.\n     */\n    public circle(x: number, y: number, radius: number, transform?: Matrix): this\n    {\n        this.instructions.push({ action: 'circle', data: [x, y, radius, transform] });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle with rounded corners.\n     * The corner radius can be specified to determine how rounded the corners should be.\n     * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n     * @param transform - An optional `Matrix` object to apply a transformation to the rectangle.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundRect(x: number, y: number, w: number, h: number, radius?: number, transform?: Matrix): this;\n    public roundRect(...args: [number, number, number, number, number, Matrix?]): this\n    {\n        this.instructions.push({ action: 'roundRect', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon shape by specifying a sequence of points. This method allows for the creation of complex polygons,\n     * which can be both open and closed. An optional transformation can be applied, enabling the polygon to be scaled,\n     * rotated, or translated as needed.\n     * @param points - An array of numbers representing the x and y coordinates of the polygon's vertices, in sequence.\n     * @param close - A boolean indicating whether to close the polygon path. True by default.\n     * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n     * @returns The instance of the current object for chaining further drawing commands.\n     */\n    public poly(points: number[] | PointData[], close?: boolean, transform?: Matrix): this;\n    public poly(...args: [number[] | PointData[], boolean, Matrix?]): this\n    {\n        this.instructions.push({ action: 'poly', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n     * @returns The instance of the current object for chaining.\n     */\n    public regularPoly(x: number, y: number, radius: number, sides: number, rotation?: number, transform?: Matrix): this;\n    public regularPoly(...args: [number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'regularPoly', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon with rounded corners.\n     * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param corner - The radius of the rounding of the corners.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundPoly(x: number, y: number, radius: number, sides: number, corner: number, rotation?: number): this;\n    public roundPoly(...args: [number, number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'roundPoly', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n     * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n     * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n     * A minimum of 3 points is required.\n     * @param radius - The default radius for the corners.\n     * This radius is applied to all corners unless overridden in `points`.\n     * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n     *  method instead of an arc method. Defaults to false.\n     * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n     * Higher values make the curve smoother.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundShape(points: RoundedPoint[], radius: number, useQuadratic?: boolean, smoothness?: number): this;\n    public roundShape(...args: [RoundedPoint[], number, boolean, number]): this\n    {\n        this.instructions.push({ action: 'roundShape', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draw Rectangle with fillet corners. This is much like rounded rectangle\n     * however it support negative numbers as well for the corner radius.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param fillet - accept negative or positive values\n     */\n    public filletRect(x: number, y: number, width: number, height: number, fillet: number): this;\n    public filletRect(...args: [number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'filletRect', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draw Rectangle with chamfer corners. These are angled corners.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param chamfer - non-zero real number, size of corner cutout\n     * @param transform\n     */\n    public chamferRect(x: number, y: number, width: number, height: number, chamfer: number, transform?: Matrix): this;\n    public chamferRect(...args: [number, number, number, number, number]): this\n    {\n        this.instructions.push({ action: 'chamferRect', data: args });\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Draws a star shape centered at a specified location. This method allows for the creation\n     *  of stars with a variable number of points, outer radius, optional inner radius, and rotation.\n     * The star is drawn as a closed polygon with alternating outer and inner vertices to create the star's points.\n     * An optional transformation can be applied to scale, rotate, or translate the star as needed.\n     * @param x - The x-coordinate of the center of the star.\n     * @param y - The y-coordinate of the center of the star.\n     * @param points - The number of points of the star.\n     * @param radius - The outer radius of the star (distance from the center to the outer points).\n     * @param innerRadius - Optional. The inner radius of the star\n     * (distance from the center to the inner points between the outer points).\n     * If not provided, defaults to half of the `radius`.\n     * @param rotation - Optional. The rotation of the star in radians, where 0 is aligned with the y-axis.\n     * Defaults to 0, meaning one point is directly upward.\n     * @param transform - An optional `Matrix` object to apply a transformation to the star.\n     * This can include rotations, scaling, and translations.\n     * @returns The instance of the current object for chaining further drawing commands.\n     */\n    // eslint-disable-next-line max-len\n    public star(x: number, y: number, points: number, radius: number, innerRadius?: number, rotation?: number, transform?: Matrix): this\n    {\n        innerRadius ||= radius / 2;\n\n        const startAngle = (-1 * Math.PI / 2) + rotation;\n        const len = points * 2;\n        const delta = (Math.PI * 2) / len;\n        const polygon = [];\n\n        for (let i = 0; i < len; i++)\n        {\n            const r = i % 2 ? innerRadius : radius;\n            const angle = (i * delta) + startAngle;\n\n            polygon.push(\n                x + (r * Math.cos(angle)),\n                y + (r * Math.sin(angle))\n            );\n        }\n\n        this.poly(polygon, true, transform);\n\n        return this;\n    }\n\n    /**\n     * Creates a copy of the current `GraphicsPath` instance. This method supports both shallow and deep cloning.\n     * A shallow clone copies the reference of the instructions array, while a deep clone creates a new array and\n     * copies each instruction individually, ensuring that modifications to the instructions of the cloned `GraphicsPath`\n     * do not affect the original `GraphicsPath` and vice versa.\n     * @param deep - A boolean flag indicating whether the clone should be deep.\n     * @returns A new `GraphicsPath` instance that is a clone of the current instance.\n     */\n    public clone(deep = false): GraphicsPath\n    {\n        const newGraphicsPath2D = new GraphicsPath();\n\n        newGraphicsPath2D.checkForHoles = this.checkForHoles;\n\n        if (!deep)\n        {\n            newGraphicsPath2D.instructions = this.instructions.slice();\n        }\n        else\n        {\n            for (let i = 0; i < this.instructions.length; i++)\n            {\n                const instruction = this.instructions[i];\n\n                newGraphicsPath2D.instructions.push({ action: instruction.action, data: instruction.data.slice() });\n            }\n        }\n\n        return newGraphicsPath2D;\n    }\n\n    public clear(): this\n    {\n        this.instructions.length = 0;\n        this._dirty = true;\n\n        return this;\n    }\n\n    /**\n     * Applies a transformation matrix to all drawing instructions within the `GraphicsPath`.\n     * This method enables the modification of the path's geometry according to the provided\n     * transformation matrix, which can include translations, rotations, scaling, and skewing.\n     *\n     * Each drawing instruction in the path is updated to reflect the transformation,\n     * ensuring the visual representation of the path is consistent with the applied matrix.\n     *\n     * Note: The transformation is applied directly to the coordinates and control points of the drawing instructions,\n     * not to the path as a whole. This means the transformation's effects are baked into the individual instructions,\n     * allowing for fine-grained control over the path's appearance.\n     * @param matrix - A `Matrix` object representing the transformation to apply.\n     * @returns The instance of the current object for chaining further operations.\n     */\n    public transform(matrix: Matrix): this\n    {\n        if (matrix.isIdentity()) return this;\n\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let x = 0;\n        let y = 0;\n\n        let cpx1 = 0;\n        let cpy1 = 0;\n        let cpx2 = 0;\n        let cpy2 = 0;\n\n        let rx = 0;\n        let ry = 0;\n\n        for (let i = 0; i < this.instructions.length; i++)\n        {\n            const instruction = this.instructions[i];\n            const data = instruction.data as any[];\n\n            switch (instruction.action)\n            {\n                case 'moveTo':\n                case 'lineTo':\n\n                    x = data[0];\n                    y = data[1];\n\n                    data[0] = (a * x) + (c * y) + tx;\n                    data[1] = (b * x) + (d * y) + ty;\n                    break;\n                case 'bezierCurveTo':\n\n                    cpx1 = data[0];\n                    cpy1 = data[1];\n                    cpx2 = data[2];\n                    cpy2 = data[3];\n\n                    x = data[4];\n                    y = data[5];\n\n                    data[0] = (a * cpx1) + (c * cpy1) + tx;\n                    data[1] = (b * cpx1) + (d * cpy1) + ty;\n                    data[2] = (a * cpx2) + (c * cpy2) + tx;\n                    data[3] = (b * cpx2) + (d * cpy2) + ty;\n                    data[4] = (a * x) + (c * y) + tx;\n                    data[5] = (b * x) + (d * y) + ty;\n                    break;\n\n                case 'quadraticCurveTo':\n\n                    cpx1 = data[0];\n                    cpy1 = data[1];\n\n                    x = data[2];\n                    y = data[3];\n\n                    data[0] = (a * cpx1) + (c * cpy1) + tx;\n                    data[1] = (b * cpx1) + (d * cpy1) + ty;\n\n                    data[2] = (a * x) + (c * y) + tx;\n                    data[3] = (b * x) + (d * y) + ty;\n\n                    break;\n\n                case 'arcToSvg':\n\n                    x = data[5];\n                    y = data[6];\n\n                    rx = data[0];\n                    ry = data[1];\n\n                    // multiply the radius by the transform..\n\n                    data[0] = (a * rx) + (c * ry);\n                    data[1] = (b * rx) + (d * ry);\n\n                    data[5] = (a * x) + (c * y) + tx;\n                    data[6] = (b * x) + (d * y) + ty;\n\n                    break;\n\n                case 'circle':\n                    data[4] = adjustTransform(data[3], matrix);\n                    break;\n                case 'rect':\n                    data[4] = adjustTransform(data[4], matrix);\n                    break;\n                case 'ellipse':\n                    data[8] = adjustTransform(data[8], matrix);\n                    break;\n                case 'roundRect':\n                    data[5] = adjustTransform(data[5], matrix);\n                    break;\n                case 'addPath':\n                    data[0].transform(matrix);\n                    break;\n                case 'poly':\n                    data[2] = adjustTransform(data[2], matrix);\n                    break;\n                default:\n                    // #if _DEBUG\n                    warn('unknown transform action', instruction.action);\n                    // #endif\n                    break;\n            }\n        }\n\n        this._dirty = true;\n\n        return this;\n    }\n\n    get bounds(): Bounds\n    {\n        return this.shapePath.bounds;\n    }\n\n    /**\n     * Retrieves the last point from the current drawing instructions in the `GraphicsPath`.\n     * This method is useful for operations that depend on the path's current endpoint,\n     * such as connecting subsequent shapes or paths. It supports various drawing instructions,\n     * ensuring the last point's position is accurately determined regardless of the path's complexity.\n     *\n     * If the last instruction is a `closePath`, the method iterates backward through the instructions\n     *  until it finds an actionable instruction that defines a point (e.g., `moveTo`, `lineTo`,\n     * `quadraticCurveTo`, etc.). For compound paths added via `addPath`, it recursively retrieves\n     * the last point from the nested path.\n     * @param out - A `Point` object where the last point's coordinates will be stored.\n     * This object is modified directly to contain the result.\n     * @returns The `Point` object containing the last point's coordinates.\n     */\n    public getLastPoint(out: Point): Point\n    {\n        let index = this.instructions.length - 1;\n\n        let lastInstruction = this.instructions[index];\n\n        if (!lastInstruction)\n        {\n            out.x = 0;\n            out.y = 0;\n\n            return out;\n        }\n\n        while (lastInstruction.action === 'closePath')\n        {\n            index--;\n\n            if (index < 0)\n            {\n                out.x = 0;\n                out.y = 0;\n\n                return out;\n            }\n\n            lastInstruction = this.instructions[index];\n        }\n\n        switch (lastInstruction.action)\n        {\n            case 'moveTo':\n            case 'lineTo':\n                out.x = lastInstruction.data[0];\n                out.y = lastInstruction.data[1];\n                break;\n            case 'quadraticCurveTo':\n                out.x = lastInstruction.data[2];\n                out.y = lastInstruction.data[3];\n                break;\n            case 'bezierCurveTo':\n                out.x = lastInstruction.data[4];\n                out.y = lastInstruction.data[5];\n                break;\n            case 'arc':\n            case 'arcToSvg':\n                out.x = lastInstruction.data[5];\n                out.y = lastInstruction.data[6];\n                break;\n            case 'addPath':\n                // TODO prolly should transform the last point of the path\n                lastInstruction.data[0].getLastPoint(out);\n                break;\n        }\n\n        return out;\n    }\n}\n\nfunction adjustTransform(currentMatrix?: Matrix, transform?: Matrix): Matrix\n{\n    if (currentMatrix)\n    {\n        return currentMatrix.prepend(transform);\n    }\n\n    return transform.clone();\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAoCO,MAAM,YACb,CAAA;IAAA;;;;GAAA,GAkDI,WAAA,CAAY,YAA2C,EAAA,MAAA,GAAS,KAChE,CAAA;QAlDA,IAAA,CAAO,YAAA,GAAkC,EAAC,CAAA;QAG1C,qCAAA,GAAgB,IAAA,CAAA,GAAA,OAAc,yNAAA,EAAI,cAAc,CAAA,CAAA;QAEhD,IAAA,CAAQ,MAAS,GAAA,IAAA,CAAA;QA8Cb,IAAA,CAAK,aAAgB,GAAA,MAAA,CAAA;QAEjB,IAAA,OAAO,iBAAiB,QAC5B,EAAA;gBACI,gQAAA,EAAa,cAAc,IAAI,CAAA,CAAA;QAAA,CAGnC,MAAA;YACI,IAAA,CAAK,YAAe,GAAA,YAAA,EAAc,KAAM,EAAA,IAAK,EAAC,CAAA;QAAA,CAClD;IAAA,CACJ;IAAA;;;GAAA,GAjCA,IAAI,SACJ,GAAA;QACQ,IAAA,CAAC,IAAA,CAAK,UACV,EAAA;YACS,IAAA,CAAA,UAAA,GAAa,IAAI,2PAAA,CAAU,IAAI,CAAA,CAAA;QAAA,CACxC;QAEA,IAAI,IAAA,CAAK,MACT,EAAA;YACI,IAAA,CAAK,MAAS,GAAA,KAAA,CAAA;YACd,IAAA,CAAK,UAAA,CAAW,SAAU,EAAA,CAAA;QAAA,CAC9B;QAEA,OAAO,IAAK,CAAA,UAAA,CAAA;IAAA,CAChB;IAAA;;;;;GAAA,GA2BO,OAAA,CAAQ,IAAA,EAAoB,SACnC,EAAA;QACI,IAAA,GAAO,KAAK,KAAM,EAAA,CAAA;QACb,IAAA,CAAA,YAAA,CAAa,IAAK,CAAA;YAAE,MAAQ,EAAA,SAAA;YAAW,MAAM;gBAAC,IAAA;gBAAM,SAAS;aAAA;QAAA,CAAG,CAAA,CAAA;QAErE,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAcO,IAAA,GAAO,IACd,EAAA;QACI,IAAA,CAAK,YAAA,CAAa,IAAK,CAAA;YAAE,QAAQ,KAAO;YAAA,IAAA,EAAM;QAAA,CAAM,CAAA,CAAA;QAEpD,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAaO,MAAA,GAAS,IAChB,EAAA;QACI,IAAA,CAAK,YAAA,CAAa,IAAK,CAAA;YAAE,QAAQ,OAAS;YAAA,IAAA,EAAM;QAAA,CAAM,CAAA,CAAA;QAEtD,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAgBO,SAAA,GAAY,IACnB,EAAA;QACI,IAAA,CAAK,YAAA,CAAa,IAAK,CAAA;YAAE,QAAQ,UAAY;YAAA,IAAA,EAAM;QAAA,CAAM,CAAA,CAAA;QAEzD,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAoBO,cAAA,GAAiB,IACxB,EAAA;QACI,IAAA,CAAK,YAAA,CAAa,IAAK,CAAA;YAAE,QAAQ,eAAiB;YAAA,IAAA,EAAM;QAAA,CAAM,CAAA,CAAA;QAE9D,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAAA;;;;;;;;;;GAAA,GAaO,kBAAmB,CAAA,IAAA,EAAc,IAAc,EAAA,CAAA,EAAW,CAAA,EAAW,UAC5E,EAAA;QACI,MAAM,OAAO,IAAK,CAAA,YAAA,CAAa,IAAK,CAAA,YAAA,CAAa,MAAA,GAAS,CAAC,CAAA,CAAA;QAE3D,MAAM,SAAY,GAAA,IAAA,CAAK,YAAa,CAAA,8NAAA,CAAM,MAAM,CAAA,CAAA;QAEhD,IAAI,IAAO,GAAA,CAAA,CAAA;QACX,IAAI,IAAO,GAAA,CAAA,CAAA;QAEX,IAAI,CAAC,IAAA,IAAQ,IAAK,CAAA,MAAA,KAAW,eAC7B,EAAA;YACI,IAAA,GAAO,SAAU,CAAA,CAAA,CAAA;YACjB,IAAA,GAAO,SAAU,CAAA,CAAA,CAAA;QAAA,CAGrB,MAAA;YACW,IAAA,GAAA,IAAA,CAAK,IAAA,CAAK,CAAC,CAAA,CAAA;YACX,IAAA,GAAA,IAAA,CAAK,IAAA,CAAK,CAAC,CAAA,CAAA;YAElB,MAAM,WAAW,SAAU,CAAA,CAAA,CAAA;YAC3B,MAAM,WAAW,SAAU,CAAA,CAAA,CAAA;YAE3B,IAAA,GAAO,WAAA,CAAY,QAAW,GAAA,IAAA,CAAA,CAAA;YAC9B,IAAA,GAAO,WAAA,CAAY,QAAW,GAAA,IAAA,CAAA,CAAA;QAAA,CAClC;QAEA,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK;YAAE,MAAA,EAAQ;YAAiB,IAAM,EAAA;gBAAC,IAAM;gBAAA,IAAA;gBAAM;gBAAM,IAAM;gBAAA,CAAA;gBAAG,CAAG;gBAAA,UAAU;aAAA;QAAA,CAAG,CAAA,CAAA;QAEpG,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAAA;;;;GAAA,GAOO,SACP,GAAA;QACS,IAAA,CAAA,YAAA,CAAa,IAAA,CAAK;YAAE,MAAA,EAAQ;YAAa,IAAM,EAAA,EAAA;QAAA,CAAI,CAAA,CAAA;QAExD,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAaO,QAAA,GAAW,IAClB,EAAA;QACI,IAAA,CAAK,YAAA,CAAa,IAAK,CAAA;YAAE,QAAQ,SAAW;YAAA,IAAA,EAAM;QAAA,CAAM,CAAA,CAAA;QAIxD,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IASO,OAAA,GAAU,IACjB,EAAA;QACI,IAAA,CAAK,YAAA,CAAa,IAAK,CAAA;YAAE,QAAQ,QAAU;YAAA,IAAA,EAAM;QAAA,CAAM,CAAA,CAAA;QAEvD,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IASO,OAAA,GAAU,IACjB,EAAA;QACI,IAAA,CAAK,YAAA,CAAa,IAAK,CAAA;YAAE,QAAQ,QAAU;YAAA,IAAA,EAAM;QAAA,CAAM,CAAA,CAAA;QAEhD,OAAA,IAAA,CAAA;IAAA,CACX;IAaO,iBAAA,GAAoB,IAC3B,EAAA;QACI,IAAA,CAAK,YAAA,CAAa,IAAK,CAAA;YAAE,QAAQ,kBAAoB;YAAA,IAAA,EAAM;QAAA,CAAM,CAAA,CAAA;QAEjE,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAAA;;;;;;GAAA,GASO,qBAAA,CAAsB,CAAW,EAAA,CAAA,EAAW,UACnD,EAAA;QAEI,MAAM,OAAO,IAAK,CAAA,YAAA,CAAa,IAAK,CAAA,YAAA,CAAa,MAAA,GAAS,CAAC,CAAA,CAAA;QAE3D,MAAM,SAAY,GAAA,IAAA,CAAK,YAAa,CAAA,8NAAA,CAAM,MAAM,CAAA,CAAA;QAEhD,IAAI,IAAO,GAAA,CAAA,CAAA;QACX,IAAI,IAAO,GAAA,CAAA,CAAA;QAEX,IAAI,CAAC,IAAA,IAAQ,IAAK,CAAA,MAAA,KAAW,kBAC7B,EAAA;YACI,IAAA,GAAO,SAAU,CAAA,CAAA,CAAA;YACjB,IAAA,GAAO,SAAU,CAAA,CAAA,CAAA;QAAA,CAGrB,MAAA;YACW,IAAA,GAAA,IAAA,CAAK,IAAA,CAAK,CAAC,CAAA,CAAA;YACX,IAAA,GAAA,IAAA,CAAK,IAAA,CAAK,CAAC,CAAA,CAAA;YAElB,MAAM,WAAW,SAAU,CAAA,CAAA,CAAA;YAC3B,MAAM,WAAW,SAAU,CAAA,CAAA,CAAA;YAE3B,IAAA,GAAO,WAAA,CAAY,QAAW,GAAA,IAAA,CAAA,CAAA;YAC9B,IAAA,GAAO,WAAA,CAAY,QAAW,GAAA,IAAA,CAAA,CAAA;QAAA,CAClC;QAEA,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK;YAAE,MAAA,EAAQ,kBAAoB;YAAA,IAAA,EAAM;gBAAC,IAAA;gBAAM,IAAM;gBAAA,CAAA;gBAAG,CAAG;gBAAA,UAAU;aAAA;QAAA,CAAG,CAAA,CAAA;QAE3F,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAAA;;;;;;;;GAAA,GAWO,IAAK,CAAA,CAAA,EAAW,CAAW,EAAA,CAAA,EAAW,CAAA,EAAW,SACxD,EAAA;QACI,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK;YAAE,MAAA,EAAQ,MAAQ;YAAA,IAAA,EAAM;gBAAC,CAAA;gBAAG,CAAG;gBAAA,CAAA;gBAAG,CAAG;gBAAA,SAAS;aAAA;QAAA,CAAG,CAAA,CAAA;QAExE,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAAA;;;;;;;GAAA,GAUO,MAAO,CAAA,CAAA,EAAW,CAAW,EAAA,MAAA,EAAgB,SACpD,EAAA;QACI,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK;YAAE,MAAA,EAAQ,QAAU;YAAA,IAAA,EAAM;gBAAC,CAAA;gBAAG,CAAG;gBAAA,MAAA;gBAAQ,SAAS;aAAA;QAAA,CAAG,CAAA,CAAA;QAE5E,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAeO,UAAA,GAAa,IACpB,EAAA;QACI,IAAA,CAAK,YAAA,CAAa,IAAK,CAAA;YAAE,QAAQ,WAAa;YAAA,IAAA,EAAM;QAAA,CAAM,CAAA,CAAA;QAE1D,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAYO,KAAA,GAAQ,IACf,EAAA;QACI,IAAA,CAAK,YAAA,CAAa,IAAK,CAAA;YAAE,QAAQ,MAAQ;YAAA,IAAA,EAAM;QAAA,CAAM,CAAA,CAAA;QAErD,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAaO,YAAA,GAAe,IACtB,EAAA;QACI,IAAA,CAAK,YAAA,CAAa,IAAK,CAAA;YAAE,QAAQ,aAAe;YAAA,IAAA,EAAM;QAAA,CAAM,CAAA,CAAA;QAE5D,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAcO,UAAA,GAAa,IACpB,EAAA;QACI,IAAA,CAAK,YAAA,CAAa,IAAK,CAAA;YAAE,QAAQ,WAAa;YAAA,IAAA,EAAM;QAAA,CAAM,CAAA,CAAA;QAE1D,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAgBO,WAAA,GAAc,IACrB,EAAA;QACI,IAAA,CAAK,YAAA,CAAa,IAAK,CAAA;YAAE,QAAQ,YAAc;YAAA,IAAA,EAAM;QAAA,CAAM,CAAA,CAAA;QAE3D,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAYO,WAAA,GAAc,IACrB,EAAA;QACI,IAAA,CAAK,YAAA,CAAa,IAAK,CAAA;YAAE,QAAQ,YAAc;YAAA,IAAA,EAAM;QAAA,CAAM,CAAA,CAAA;QAE3D,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAYO,YAAA,GAAe,IACtB,EAAA;QACI,IAAA,CAAK,YAAA,CAAa,IAAK,CAAA;YAAE,QAAQ,aAAe;YAAA,IAAA,EAAM;QAAA,CAAM,CAAA,CAAA;QAE5D,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAAA;;;;;;;;;;;;;;;;;GAAA,GAAA,mCAAA;IAqBO,KAAK,CAAW,EAAA,CAAA,EAAW,MAAA,EAAgB,MAAgB,EAAA,WAAA,EAAsB,QAAA,EAAmB,SAC3G,EAAA;QACI,WAAA,IAAA,CAAA,WAAA,GAAgB,MAAS,GAAA,CAAA,CAAA,CAAA;QAEzB,MAAM,UAAc,GAAA,CAAA,CAAA,GAAK,IAAK,CAAA,EAAA,GAAK,CAAK,GAAA,QAAA,CAAA;QACxC,MAAM,MAAM,MAAS,GAAA,CAAA,CAAA;QACf,MAAA,KAAA,GAAS,IAAK,CAAA,EAAA,GAAK,CAAK,GAAA,GAAA,CAAA;QAC9B,MAAM,UAAU,EAAC,CAAA;QAEjB,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,GAAA,EAAK,CACzB,EAAA,CAAA;YACU,MAAA,CAAA,GAAI,CAAI,GAAA,CAAA,GAAI,WAAc,GAAA,MAAA,CAAA;YAC1B,MAAA,KAAA,GAAS,IAAI,KAAS,GAAA,UAAA,CAAA;YAEpB,OAAA,CAAA,IAAA,CACJ,CAAK,GAAA,CAAA,GAAI,IAAK,CAAA,GAAA,CAAI,KAAK,CAAA,EACvB,CAAK,GAAA,CAAA,GAAI,IAAK,CAAA,GAAA,CAAI,KAAK,CAAA;QAC3B,CACJ;QAEK,IAAA,CAAA,IAAA,CAAK,OAAS,EAAA,IAAA,EAAM,SAAS,CAAA,CAAA;QAE3B,OAAA,IAAA,CAAA;IAAA,CACX;IAAA;;;;;;;GAAA,GAUO,KAAA,CAAM,OAAO,KACpB,EAAA;QACU,MAAA,iBAAA,GAAoB,IAAI,YAAa,EAAA,CAAA;QAE3C,iBAAA,CAAkB,aAAA,GAAgB,IAAK,CAAA,aAAA,CAAA;QAEvC,IAAI,CAAC,IACL,EAAA;YACsB,iBAAA,CAAA,YAAA,GAAe,IAAK,CAAA,YAAA,CAAa,KAAM,EAAA,CAAA;QAAA,CAG7D,MAAA;YACI,IAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,YAAA,CAAa,MAAA,EAAQ,CAC9C,EAAA,CAAA;gBACU,MAAA,WAAA,GAAc,IAAK,CAAA,YAAA,CAAa,CAAC,CAAA,CAAA;gBAErB,iBAAA,CAAA,YAAA,CAAa,IAAK,CAAA;oBAAE,MAAQ,EAAA,WAAA,CAAY,MAAQ;oBAAA,IAAA,EAAM,WAAY,CAAA,IAAA,CAAK,KAAM,EAAA;gBAAA,CAAG,CAAA,CAAA;YAAA,CACtG;QAAA,CACJ;QAEO,OAAA,iBAAA,CAAA;IAAA,CACX;IAEO,KACP,GAAA;QACI,IAAA,CAAK,YAAA,CAAa,MAAS,GAAA,CAAA,CAAA;QAC3B,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAAA;;;;;;;;;;;;;GAAA,GAgBO,UAAU,MACjB,EAAA;QACI,IAAI,OAAO,UAAW,EAAA,EAAU,OAAA,IAAA,CAAA;QAEhC,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;QACjB,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;QACjB,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;QACjB,MAAM,IAAI,MAAO,CAAA,CAAA,CAAA;QACjB,MAAM,KAAK,MAAO,CAAA,EAAA,CAAA;QAClB,MAAM,KAAK,MAAO,CAAA,EAAA,CAAA;QAElB,IAAI,CAAI,GAAA,CAAA,CAAA;QACR,IAAI,CAAI,GAAA,CAAA,CAAA;QAER,IAAI,IAAO,GAAA,CAAA,CAAA;QACX,IAAI,IAAO,GAAA,CAAA,CAAA;QACX,IAAI,IAAO,GAAA,CAAA,CAAA;QACX,IAAI,IAAO,GAAA,CAAA,CAAA;QAEX,IAAI,EAAK,GAAA,CAAA,CAAA;QACT,IAAI,EAAK,GAAA,CAAA,CAAA;QAET,IAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,YAAA,CAAa,MAAA,EAAQ,CAC9C,EAAA,CAAA;YACU,MAAA,WAAA,GAAc,IAAK,CAAA,YAAA,CAAa,CAAC,CAAA,CAAA;YACvC,MAAM,OAAO,WAAY,CAAA,IAAA,CAAA;YAEzB,OAAQ,YAAY,MACpB;gBACI,KAAK,QAAA,CAAA;gBACL,KAAK,QAAA;oBAED,CAAA,GAAI,IAAA,CAAK,CAAC,CAAA,CAAA;oBACV,CAAA,GAAI,IAAA,CAAK,CAAC,CAAA,CAAA;oBAEV,IAAA,CAAK,CAAC,CAAA,GAAK,CAAI,GAAA,CAAA,GAAM,IAAI,CAAK,GAAA,EAAA,CAAA;oBAC9B,IAAA,CAAK,CAAC,CAAA,GAAK,CAAI,GAAA,CAAA,GAAM,IAAI,CAAK,GAAA,EAAA,CAAA;oBAC9B,MAAA;gBACJ,KAAK,eAAA;oBAED,IAAA,GAAO,IAAA,CAAK,CAAC,CAAA,CAAA;oBACb,IAAA,GAAO,IAAA,CAAK,CAAC,CAAA,CAAA;oBACb,IAAA,GAAO,IAAA,CAAK,CAAC,CAAA,CAAA;oBACb,IAAA,GAAO,IAAA,CAAK,CAAC,CAAA,CAAA;oBAEb,CAAA,GAAI,IAAA,CAAK,CAAC,CAAA,CAAA;oBACV,CAAA,GAAI,IAAA,CAAK,CAAC,CAAA,CAAA;oBAEV,IAAA,CAAK,CAAC,CAAA,GAAK,CAAI,GAAA,IAAA,GAAS,IAAI,IAAQ,GAAA,EAAA,CAAA;oBACpC,IAAA,CAAK,CAAC,CAAA,GAAK,CAAI,GAAA,IAAA,GAAS,IAAI,IAAQ,GAAA,EAAA,CAAA;oBACpC,IAAA,CAAK,CAAC,CAAA,GAAK,CAAI,GAAA,IAAA,GAAS,IAAI,IAAQ,GAAA,EAAA,CAAA;oBACpC,IAAA,CAAK,CAAC,CAAA,GAAK,CAAI,GAAA,IAAA,GAAS,IAAI,IAAQ,GAAA,EAAA,CAAA;oBACpC,IAAA,CAAK,CAAC,CAAA,GAAK,CAAI,GAAA,CAAA,GAAM,IAAI,CAAK,GAAA,EAAA,CAAA;oBAC9B,IAAA,CAAK,CAAC,CAAA,GAAK,CAAI,GAAA,CAAA,GAAM,IAAI,CAAK,GAAA,EAAA,CAAA;oBAC9B,MAAA;gBAEJ,KAAK,kBAAA;oBAED,IAAA,GAAO,IAAA,CAAK,CAAC,CAAA,CAAA;oBACb,IAAA,GAAO,IAAA,CAAK,CAAC,CAAA,CAAA;oBAEb,CAAA,GAAI,IAAA,CAAK,CAAC,CAAA,CAAA;oBACV,CAAA,GAAI,IAAA,CAAK,CAAC,CAAA,CAAA;oBAEV,IAAA,CAAK,CAAC,CAAA,GAAK,CAAI,GAAA,IAAA,GAAS,IAAI,IAAQ,GAAA,EAAA,CAAA;oBACpC,IAAA,CAAK,CAAC,CAAA,GAAK,CAAI,GAAA,IAAA,GAAS,IAAI,IAAQ,GAAA,EAAA,CAAA;oBAEpC,IAAA,CAAK,CAAC,CAAA,GAAK,CAAI,GAAA,CAAA,GAAM,IAAI,CAAK,GAAA,EAAA,CAAA;oBAC9B,IAAA,CAAK,CAAC,CAAA,GAAK,CAAI,GAAA,CAAA,GAAM,IAAI,CAAK,GAAA,EAAA,CAAA;oBAE9B,MAAA;gBAEJ,KAAK,UAAA;oBAED,CAAA,GAAI,IAAA,CAAK,CAAC,CAAA,CAAA;oBACV,CAAA,GAAI,IAAA,CAAK,CAAC,CAAA,CAAA;oBAEV,EAAA,GAAK,IAAA,CAAK,CAAC,CAAA,CAAA;oBACX,EAAA,GAAK,IAAA,CAAK,CAAC,CAAA,CAAA;oBAIX,IAAA,CAAK,CAAC,CAAA,GAAK,CAAI,GAAA,EAAA,GAAO,CAAI,GAAA,EAAA,CAAA;oBAC1B,IAAA,CAAK,CAAC,CAAA,GAAK,CAAI,GAAA,EAAA,GAAO,CAAI,GAAA,EAAA,CAAA;oBAE1B,IAAA,CAAK,CAAC,CAAA,GAAK,CAAI,GAAA,CAAA,GAAM,IAAI,CAAK,GAAA,EAAA,CAAA;oBAC9B,IAAA,CAAK,CAAC,CAAA,GAAK,CAAI,GAAA,CAAA,GAAM,IAAI,CAAK,GAAA,EAAA,CAAA;oBAE9B,MAAA;gBAEJ,KAAK,QAAA;oBACD,IAAA,CAAK,CAAC,CAAI,GAAA,eAAA,CAAgB,IAAK,CAAA,CAAC,CAAA,EAAG,MAAM,CAAA,CAAA;oBACzC,MAAA;gBACJ,KAAK,MAAA;oBACD,IAAA,CAAK,CAAC,CAAI,GAAA,eAAA,CAAgB,IAAK,CAAA,CAAC,CAAA,EAAG,MAAM,CAAA,CAAA;oBACzC,MAAA;gBACJ,KAAK,SAAA;oBACD,IAAA,CAAK,CAAC,CAAI,GAAA,eAAA,CAAgB,IAAK,CAAA,CAAC,CAAA,EAAG,MAAM,CAAA,CAAA;oBACzC,MAAA;gBACJ,KAAK,WAAA;oBACD,IAAA,CAAK,CAAC,CAAI,GAAA,eAAA,CAAgB,IAAK,CAAA,CAAC,CAAA,EAAG,MAAM,CAAA,CAAA;oBACzC,MAAA;gBACJ,KAAK,SAAA;oBACI,IAAA,CAAA,CAAC,CAAE,CAAA,SAAA,CAAU,MAAM,CAAA,CAAA;oBACxB,MAAA;gBACJ,KAAK,MAAA;oBACD,IAAA,CAAK,CAAC,CAAI,GAAA,eAAA,CAAgB,IAAK,CAAA,CAAC,CAAA,EAAG,MAAM,CAAA,CAAA;oBACzC,MAAA;gBACJ;wBAES,8NAAA,EAAA,0BAAA,EAA4B,YAAY,MAAM,CAAA,CAAA;oBAEnD,MAAA;YAAA,CACR;QAAA,CACJ;QAEA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;QAEP,OAAA,IAAA,CAAA;IAAA,CACX;IAEA,IAAI,MACJ,GAAA;QACI,OAAO,IAAA,CAAK,SAAU,CAAA,MAAA,CAAA;IAAA,CAC1B;IAAA;;;;;;;;;;;;;GAAA,GAgBO,aAAa,GACpB,EAAA;QACQ,IAAA,KAAA,GAAQ,IAAK,CAAA,YAAA,CAAa,MAAS,GAAA,CAAA,CAAA;QAEnC,IAAA,eAAA,GAAkB,IAAK,CAAA,YAAA,CAAa,KAAK,CAAA,CAAA;QAE7C,IAAI,CAAC,eACL,EAAA;YACI,GAAA,CAAI,CAAI,GAAA,CAAA,CAAA;YACR,GAAA,CAAI,CAAI,GAAA,CAAA,CAAA;YAED,OAAA,GAAA,CAAA;QAAA,CACX;QAEO,MAAA,eAAA,CAAgB,MAAA,KAAW,WAClC,CAAA;YACI,KAAA,EAAA,CAAA;YAEA,IAAI,QAAQ,CACZ,EAAA;gBACI,GAAA,CAAI,CAAI,GAAA,CAAA,CAAA;gBACR,GAAA,CAAI,CAAI,GAAA,CAAA,CAAA;gBAED,OAAA,GAAA,CAAA;YAAA,CACX;YAEkB,eAAA,GAAA,IAAA,CAAK,YAAA,CAAa,KAAK,CAAA,CAAA;QAAA,CAC7C;QAEA,OAAQ,gBAAgB,MACxB;YACI,KAAK,QAAA,CAAA;YACL,KAAK,QAAA;gBACG,GAAA,CAAA,CAAA,GAAI,eAAgB,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;gBAC1B,GAAA,CAAA,CAAA,GAAI,eAAgB,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;gBAC9B,MAAA;YACJ,KAAK,kBAAA;gBACG,GAAA,CAAA,CAAA,GAAI,eAAgB,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;gBAC1B,GAAA,CAAA,CAAA,GAAI,eAAgB,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;gBAC9B,MAAA;YACJ,KAAK,eAAA;gBACG,GAAA,CAAA,CAAA,GAAI,eAAgB,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;gBAC1B,GAAA,CAAA,CAAA,GAAI,eAAgB,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;gBAC9B,MAAA;YACJ,KAAK,KAAA,CAAA;YACL,KAAK,UAAA;gBACG,GAAA,CAAA,CAAA,GAAI,eAAgB,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;gBAC1B,GAAA,CAAA,CAAA,GAAI,eAAgB,CAAA,IAAA,CAAK,CAAC,CAAA,CAAA;gBAC9B,MAAA;YACJ,KAAK,SAAA;gBAED,eAAA,CAAgB,IAAK,CAAA,CAAC,CAAE,CAAA,YAAA,CAAa,GAAG,CAAA,CAAA;gBACxC,MAAA;QAAA,CACR;QAEO,OAAA,GAAA,CAAA;IAAA,CACX;AACJ,CAAA;AAEA,SAAS,eAAA,CAAgB,aAAA,EAAwB,SACjD,EAAA;IACI,IAAI,aACJ,EAAA;QACW,OAAA,aAAA,CAAc,OAAA,CAAQ,SAAS,CAAA,CAAA;IAAA,CAC1C;IAEA,OAAO,UAAU,KAAM,EAAA,CAAA;AAC3B","debugId":null}},
    {"offset": {"line": 7593, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/svg/parseSVGFloatAttribute.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/svg/parseSVGFloatAttribute.ts"],"sourcesContent":["/**\n * Parses a float value from an SVG element's attribute.\n * This is commonly used for parsing numeric attributes like coordinates, dimensions,\n * and other measurements from SVG elements.\n * @param svg - The SVG element to get the attribute from\n * @param id - The name of the attribute to parse (e.g. 'x', 'y', 'width', etc)\n * @param defaultValue - The value to return if the attribute doesn't exist or can't be parsed\n * @returns The parsed float value, or the default value if parsing fails\n * @example\n * // For SVG: <rect x=\"10.5\" width=\"20\"/>\n * parseSVGFloatAttribute(rectElement, 'x', 0) // Returns 10.5\n * parseSVGFloatAttribute(rectElement, 'y', 0) // Returns 0 since y is not specified\n * @internal\n */\nexport function parseSVGFloatAttribute(svg: SVGElement, id: string, defaultValue: number): number\n{\n    const value = svg.getAttribute(id) as string;\n\n    return value ? Number(value) : defaultValue;\n}\n"],"names":[],"mappings":";;;;;AAcgB,SAAA,sBAAA,CAAuB,GAAiB,EAAA,EAAA,EAAY,YACpE,EAAA;IACU,MAAA,KAAA,GAAQ,GAAI,CAAA,YAAA,CAAa,EAAE,CAAA,CAAA;IAE1B,OAAA,KAAA,GAAQ,MAAO,CAAA,KAAK,CAAI,GAAA,YAAA,CAAA;AACnC","debugId":null}},
    {"offset": {"line": 7608, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/svg/parseSVGDefinitions.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/svg/parseSVGDefinitions.ts"],"sourcesContent":["import { Color } from '../../../../color/Color';\nimport { warn } from '../../../../utils/logging/warn';\nimport { FillGradient } from '../fill/FillGradient';\nimport { parseSVGFloatAttribute } from './parseSVGFloatAttribute';\n\nimport type { Session } from './SVGParser';\n\n/**\n * Parses SVG gradient definitions and stores them in the session for later use.\n * Currently supports linear gradients and has placeholder support for radial gradients.\n * @param svg - The root SVG element to parse definitions from\n * @param session - The parsing session to store definitions in\n * @internal\n */\nexport function parseSVGDefinitions(svg: SVGElement, session: Session): void\n{\n    // Find all <defs> elements in the SVG\n    const definitions = svg.querySelectorAll('defs');\n\n    // Process each <defs> element\n    for (let i = 0; i < definitions.length; i++)\n    {\n        const definition = definitions[i];\n\n        // Process each child element in the <defs>\n        for (let j = 0; j < definition.children.length; j++)\n        {\n            const child = definition.children[j];\n\n            // Handle different types of gradient definitions\n            switch (child.nodeName.toLowerCase())\n            {\n                case 'lineargradient':\n                    // Store the parsed linear gradient in the session defs using the gradient's ID\n                    session.defs[child.id] = parseLinearGradient(child as SVGElement);\n                    break;\n                case 'radialgradient':\n                    session.defs[child.id] = parseRadialGradient(child as SVGElement);\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n}\n\n/**\n * Parses an SVG linear gradient element into a FillGradient.\n * @param child - The SVG linear gradient element to parse\n * @returns A FillGradient configured based on the SVG element\n */\nfunction parseLinearGradient(child: SVGElement): FillGradient\n{\n    // Parse the gradient vector coordinates (defaults: horizontal line from 0 to 1)\n    const x0 = parseSVGFloatAttribute(child, 'x1', 0);\n    const y0 = parseSVGFloatAttribute(child, 'y1', 0);\n    const x1 = parseSVGFloatAttribute(child, 'x2', 1);\n    const y1 = parseSVGFloatAttribute(child, 'y2', 0);\n\n    // Get the gradient coordinate system\n    const gradientUnit = child.getAttribute('gradientUnits') || 'objectBoundingBox';\n\n    // Create gradient with coordinates and space mapping\n    const gradient = new FillGradient(\n        x0,\n        y0,\n        x1,\n        y1,\n        gradientUnit === 'objectBoundingBox' ? 'local' : 'global'\n    );\n\n    // Process each gradient stop\n    for (let k = 0; k < child.children.length; k++)\n    {\n        const stop = child.children[k] as SVGElement;\n\n        // Get stop position (0-1) and color\n        const offset = parseSVGFloatAttribute(stop, 'offset', 0);\n        const color = Color.shared.setValue(stop.getAttribute('stop-color')).toNumber();\n\n        gradient.addColorStop(offset, color);\n    }\n\n    return gradient;\n}\n\n/**\n * Placeholder function for parsing SVG radial gradients.\n * Currently returns a simple horizontal linear gradient and logs a warning.\n * @param _child - The SVG radial gradient element (currently unused)\n * @returns A default linear gradient\n */\nfunction parseRadialGradient(_child: SVGElement): FillGradient\n{\n    // #if _DEBUG\n    warn('[SVG Parser] Radial gradients are not yet supported');\n    // #endif\n\n    return new FillGradient(0, 0, 1, 0);\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAcgB,SAAA,mBAAA,CAAoB,GAAA,EAAiB,OACrD,EAAA;IAEU,MAAA,WAAA,GAAc,GAAI,CAAA,gBAAA,CAAiB,MAAM,CAAA,CAAA;IAG/C,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,WAAA,CAAY,MAAA,EAAQ,CACxC,EAAA,CAAA;QACU,MAAA,UAAA,GAAa,WAAA,CAAY,CAAC,CAAA,CAAA;QAGhC,IAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,UAAW,CAAA,QAAA,CAAS,MAAA,EAAQ,CAChD,EAAA,CAAA;YACU,MAAA,KAAA,GAAQ,UAAW,CAAA,QAAA,CAAS,CAAC,CAAA,CAAA;YAG3B,OAAA,KAAA,CAAM,QAAS,CAAA,WAAA,EACvB;gBACI,KAAK,gBAAA;oBAED,OAAA,CAAQ,IAAK,CAAA,KAAA,CAAM,EAAE,CAAA,GAAI,oBAAoB,KAAmB,CAAA,CAAA;oBAChE,MAAA;gBACJ,KAAK,gBAAA;oBACD,OAAA,CAAQ,IAAK,CAAA,KAAA,CAAM,EAAE,CAAA,GAAI,oBAAoB,KAAmB,CAAA,CAAA;oBAChE,MAAA;gBACJ;oBACI,MAAA;YAAA,CACR;QAAA,CACJ;IAAA,CACJ;AACJ,CAAA;AAOA,SAAS,oBAAoB,KAC7B,EAAA;IAEI,MAAM,EAAK,OAAA,oRAAA,EAAuB,KAAO,EAAA,IAAA,EAAM,CAAC,CAAA,CAAA;IAChD,MAAM,EAAK,OAAA,oRAAA,EAAuB,KAAO,EAAA,IAAA,EAAM,CAAC,CAAA,CAAA;IAChD,MAAM,EAAK,OAAA,oRAAA,EAAuB,KAAO,EAAA,IAAA,EAAM,CAAC,CAAA,CAAA;IAChD,MAAM,EAAK,OAAA,oRAAA,EAAuB,KAAO,EAAA,IAAA,EAAM,CAAC,CAAA,CAAA;IAGhD,MAAM,YAAe,GAAA,KAAA,CAAM,YAAa,CAAA,eAAe,CAAK,IAAA,mBAAA,CAAA;IAG5D,MAAM,WAAW,IAAI,iQAAA,CACjB,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EACA,YAAA,KAAiB,sBAAsB,OAAU,GAAA,QAAA;IAIrD,IAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,KAAM,CAAA,QAAA,CAAS,MAAA,EAAQ,CAC3C,EAAA,CAAA;QACU,MAAA,IAAA,GAAO,KAAM,CAAA,QAAA,CAAS,CAAC,CAAA,CAAA;QAG7B,MAAM,MAAS,OAAA,oRAAA,EAAuB,IAAM,EAAA,QAAA,EAAU,CAAC,CAAA,CAAA;QACjD,MAAA,KAAA,GAAQ,qNAAA,CAAM,MAAO,CAAA,QAAA,CAAS,KAAK,YAAa,CAAA,YAAY,CAAC,CAAA,CAAE,QAAS,EAAA,CAAA;QAErE,QAAA,CAAA,YAAA,CAAa,QAAQ,KAAK,CAAA,CAAA;IAAA,CACvC;IAEO,OAAA,QAAA,CAAA;AACX,CAAA;AAQA,SAAS,oBAAoB,MAC7B,EAAA;QAEI,8NAAA,EAAK,qDAAqD,CAAA,CAAA;IAG1D,OAAO,IAAI,iQAAA,CAAa,CAAG,EAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;AACtC","debugId":null}},
    {"offset": {"line": 7665, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/svg/utils/extractSvgUrlId.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/svg/utils/extractSvgUrlId.ts"],"sourcesContent":["/**\n * Extracts the ID from an SVG url() reference.\n *\n * This function handles all valid SVG url() formats including:\n * - url(#id)\n * - url('#id')\n * - url(\"#id\")\n * - url( #id )\n * - url( '#id' )\n * - url( \"#id\" )\n *\n * The regex pattern matches:\n * - url followed by optional whitespace\n * - opening parenthesis followed by optional whitespace\n * - optional single or double quotes with optional whitespace\n * - # followed by the ID (any chars except quotes, whitespace, or closing paren)\n * - optional single or double quotes with optional whitespace\n * - closing parenthesis\n * @param url - The SVG url() string to parse\n * @returns The extracted ID string, or empty string if no valid ID found\n * @internal\n */\nexport function extractSvgUrlId(url: string): string\n{\n    // Handle all valid SVG url() formats\n    const match = url.match(/url\\s*\\(\\s*['\"]?\\s*#([^'\"\\s)]+)\\s*['\"]?\\s*\\)/i);\n\n    return match ? match[1] : '';\n}\n"],"names":[],"mappings":";;;;;AAsBO,SAAS,gBAAgB,GAChC,EAAA;IAEU,MAAA,KAAA,GAAQ,GAAI,CAAA,KAAA,CAAM,+CAA+C,CAAA,CAAA;IAEhE,OAAA,KAAA,GAAQ,KAAM,CAAA,CAAC,CAAI,GAAA,EAAA,CAAA;AAC9B","debugId":null}},
    {"offset": {"line": 7680, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/svg/parseSVGStyle.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/svg/parseSVGStyle.ts"],"sourcesContent":["import { Color } from '../../../../color/Color';\nimport { extractSvgUrlId } from './utils/extractSvgUrlId';\n\nimport type { ConvertedFillStyle, ConvertedStrokeStyle, FillStyle, StrokeStyle } from '../FillTypes';\nimport type { Session } from './SVGParser';\n\n/**\n * A map of SVG style attributes and their default values.\n * Each attribute has a type and default value used for SVG parsing.\n * - 'paint' type can be a color or gradient\n * - 'number' type is a numeric value\n * - 'string' type is a text value\n * @category scene\n * @advanced\n */\nexport const styleAttributes = {\n    // Fill properties\n    fill: { type: 'paint', default: 0 }, // Fill color/gradient\n    'fill-opacity': { type: 'number', default: 1 }, // Fill transparency\n\n    // Stroke properties\n    stroke: { type: 'paint', default: 0 }, // Stroke color/gradient\n    'stroke-width': { type: 'number', default: 1 }, // Width of stroke\n    'stroke-opacity': { type: 'number', default: 1 }, // Stroke transparency\n    'stroke-linecap': { type: 'string', default: 'butt' }, // End cap style: butt, round, square\n    'stroke-linejoin': { type: 'string', default: 'miter' }, // Join style: miter, round, bevel\n    'stroke-miterlimit': { type: 'number', default: 10 }, // Limit on miter join sharpness\n    'stroke-dasharray': { type: 'string', default: 'none' }, // Dash pattern\n    'stroke-dashoffset': { type: 'number', default: 0 }, // Offset for dash pattern\n\n    // Global properties\n    opacity: { type: 'number', default: 1 }, // Overall opacity\n};\n\n/**\n * Represents the result of parsing SVG style attributes\n * @internal\n */\nexport type StyleResult = {\n    /** The stroke style properties */\n    strokeStyle: StrokeStyle;\n    /** The fill style properties */\n    fillStyle: FillStyle;\n    /** Whether fill should be applied */\n    useFill: boolean;\n    /** Whether stroke should be applied */\n    useStroke: boolean;\n};\n\n/**\n * Parses SVG style attributes and inline styles to determine fill and stroke properties.\n * Handles both direct attributes and CSS-style declarations in the style attribute.\n * @param svg - The SVG element to parse styles from\n * @param session - The current SVG parsing session containing definitions\n * @returns An object containing the parsed fill and stroke styles\n * @internal\n */\nexport function parseSVGStyle(svg: SVGElement, session: Session): StyleResult\n{\n    const style = svg.getAttribute('style');\n\n    const strokeStyle: StrokeStyle = {};\n\n    const fillStyle: FillStyle = {};\n\n    const result: StyleResult = {\n        strokeStyle,\n        fillStyle,\n        useFill: false,\n        useStroke: false,\n    };\n\n    // First parse direct style attributes\n    for (const key in styleAttributes)\n    {\n        const attribute = svg.getAttribute(key);\n\n        if (attribute)\n        {\n            parseAttribute(session, result, key, attribute.trim());\n        }\n    }\n\n    // Then parse inline styles which override direct attributes\n    if (style)\n    {\n        const styleParts = style.split(';');\n\n        for (let i = 0; i < styleParts.length; i++)\n        {\n            const stylePart = styleParts[i].trim();\n\n            const [key, value] = stylePart.split(':');\n\n            if (styleAttributes[key as keyof typeof styleAttributes])\n            {\n                parseAttribute(session, result, key, value.trim());\n            }\n        }\n    }\n\n    return {\n        strokeStyle: result.useStroke ? (strokeStyle as ConvertedStrokeStyle) : null,\n        fillStyle: result.useFill ? (fillStyle as ConvertedFillStyle) : null,\n        useFill: result.useFill,\n        useStroke: result.useStroke,\n    };\n}\n\n/**\n * Parses a single SVG style attribute and updates the style result accordingly.\n * Handles color values, gradients, opacities and other style properties.\n * @param session - The current SVG parsing session containing definitions\n * @param result - The style result object to update\n * @param id - The attribute name/id to parse\n * @param value - The attribute value to parse\n */\nfunction parseAttribute(\n    session: Session,\n    result: StyleResult,\n    id: string,\n    value: string\n): void\n{\n    switch (id)\n    {\n        case 'stroke':\n            if (value !== 'none')\n            {\n                if (value.startsWith('url('))\n                {\n                    // Extract gradient/pattern id from url reference\n                    const id = extractSvgUrlId(value);\n\n                    result.strokeStyle.fill = session.defs[id];\n                }\n                else\n                {\n                    // Parse as color value\n                    result.strokeStyle.color = Color.shared.setValue(value).toNumber();\n                }\n\n                result.useStroke = true;\n            }\n\n            break;\n        case 'stroke-width':\n            result.strokeStyle.width = Number(value);\n            break;\n        case 'fill':\n            if (value !== 'none')\n            {\n                if (value.startsWith('url('))\n                {\n                    // Extract gradient/pattern id from url reference\n                    const id = extractSvgUrlId(value);\n\n                    result.fillStyle.fill = session.defs[id];\n                }\n                else\n                {\n                    // Parse as color value\n                    result.fillStyle.color = Color.shared.setValue(value).toNumber();\n                }\n\n                result.useFill = true;\n            }\n            break;\n        case 'fill-opacity':\n            result.fillStyle.alpha = Number(value);\n            break;\n        case 'stroke-opacity':\n            result.strokeStyle.alpha = Number(value);\n            break;\n        case 'opacity':\n            // Global opacity affects both fill and stroke\n            result.fillStyle.alpha = Number(value);\n            result.strokeStyle.alpha = Number(value);\n            break;\n    }\n}\n"],"names":["id"],"mappings":"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","debugId":null}},
    {"offset": {"line": 7828, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/svg/utils/fillOperations.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/svg/utils/fillOperations.ts"],"sourcesContent":["import type {\n    FillInstruction,\n    GraphicsContext,\n} from '../../GraphicsContext';\n\n/**\n * Determines if subpaths represent nested shapes or multiple holes pattern.\n * @param subpathsWithArea - Array of subpaths with their calculated areas\n * @returns True if nested pattern, false if multiple holes pattern\n * @internal\n */\nexport function checkForNestedPattern(subpathsWithArea: Array<{path: string, area: number}>): boolean\n{\n    if (subpathsWithArea.length <= 2)\n    {\n        return true;\n    }\n\n    const areas = subpathsWithArea.map((s) => s.area).sort((a, b) => b - a);\n\n    const [largestArea, secondArea] = areas;\n    const smallestArea = areas[areas.length - 1];\n\n    const largestToSecondRatio = largestArea / secondArea;\n    const secondToSmallestRatio = secondArea / smallestArea;\n\n    // If the largest shape is significantly bigger than the second (3x+)\n    // AND the smaller shapes are similar in size (2x or less difference),\n    // it suggests multiple holes pattern rather than nested shapes\n    if (largestToSecondRatio > 3 && secondToSmallestRatio < 2)\n    {\n        return false; // Multiple holes\n    }\n\n    return true; // Default to nested\n}\n\n/**\n * Gets fill instruction data from a graphics context.\n * @param context - The graphics context\n * @param index - Index of the fill instruction (default: 0)\n * @returns The fill instruction data\n * @throws Error if instruction at index is not a fill instruction\n * @internal\n */\nexport function getFillInstructionData(context: GraphicsContext, index: number = 0)\n{\n    const instruction = context.instructions[index];\n\n    if (!instruction || instruction.action !== 'fill')\n    {\n        throw new Error(`Expected fill instruction at index ${index}, got ${instruction?.action || 'undefined'}`);\n    }\n\n    return (instruction as FillInstruction).data;\n}\n"],"names":[],"mappings":";;;;;;;AAWO,SAAS,sBAAsB,gBACtC,EAAA;IACQ,IAAA,gBAAA,CAAiB,MAAA,IAAU,CAC/B,EAAA;QACW,OAAA,IAAA,CAAA;IAAA,CACX;IAEA,MAAM,KAAQ,GAAA,gBAAA,CAAiB,GAAI,CAAA,CAAC,CAAM,GAAA,CAAA,CAAE,IAAI,CAAA,CAAE,IAAK,CAAA,CAAC,CAAG,EAAA,CAAA,GAAM,IAAI,CAAC,CAAA,CAAA;IAEhE,MAAA,CAAC,WAAa,EAAA,UAAU,CAAI,GAAA,KAAA,CAAA;IAClC,MAAM,YAAe,GAAA,KAAA,CAAM,KAAM,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;IAE3C,MAAM,uBAAuB,WAAc,GAAA,UAAA,CAAA;IAC3C,MAAM,wBAAwB,UAAa,GAAA,YAAA,CAAA;IAKvC,IAAA,oBAAA,GAAuB,CAAK,IAAA,qBAAA,GAAwB,CACxD,EAAA;QACW,OAAA,KAAA,CAAA;IAAA,CACX;IAEO,OAAA,IAAA,CAAA;AACX,CAAA;AAUgB,SAAA,sBAAA,CAAuB,OAA0B,EAAA,KAAA,GAAgB,CACjF,EAAA;IACU,MAAA,WAAA,GAAc,OAAQ,CAAA,YAAA,CAAa,KAAK,CAAA,CAAA;IAE9C,IAAI,CAAC,WAAA,IAAe,WAAY,CAAA,MAAA,KAAW,MAC3C,EAAA;QACU,MAAA,IAAI,MAAM,CAAsC,mCAAA,EAAA,KAAK,CAAA,MAAA,EAAS,WAAa,EAAA,MAAA,IAAU,WAAW,CAAE,CAAA,CAAA,CAAA;IAAA,CAC5G;IAEA,OAAQ,WAAgC,CAAA,IAAA,CAAA;AAC5C","debugId":null}},
    {"offset": {"line": 7862, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/svg/utils/pathOperations.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/svg/utils/pathOperations.ts"],"sourcesContent":["import { GraphicsPath } from '../../path/GraphicsPath';\n\n/**\n * Extracts individual subpaths from SVG path data by splitting on Move commands.\n * @param pathData - The SVG path data string\n * @returns Array of subpath strings\n * @internal\n */\nexport function extractSubpaths(pathData: string): string[]\n{\n    // Split on Move commands (M or m) to get individual subpaths\n    const parts = pathData.split(/(?=[Mm])/);\n    const subpaths = parts.filter((part) => part.trim().length > 0);\n\n    return subpaths;\n}\n\n/**\n * Calculates the area of a path using bounding box estimation.\n * @param pathData - The SVG path data string\n * @returns The estimated area of the path\n * @internal\n */\nexport function calculatePathArea(pathData: string): number\n{\n    const coords = pathData.match(/[-+]?[0-9]*\\.?[0-9]+/g);\n\n    if (!coords || coords.length < 4) return 0;\n\n    const numbers = coords.map(Number);\n    const xs = [];\n    const ys = [];\n\n    for (let i = 0; i < numbers.length; i += 2)\n    {\n        if (i + 1 < numbers.length)\n        {\n            xs.push(numbers[i]);\n            ys.push(numbers[i + 1]);\n        }\n    }\n\n    if (xs.length === 0 || ys.length === 0) return 0;\n\n    const minX = Math.min(...xs);\n    const maxX = Math.max(...xs);\n    const minY = Math.min(...ys);\n    const maxY = Math.max(...ys);\n\n    const area = (maxX - minX) * (maxY - minY);\n\n    return area;\n}\n\n/**\n * Parses SVG path data and appends instructions to a GraphicsPath.\n * @param pathData - The SVG path data string\n * @param graphicsPath - The GraphicsPath to append instructions to\n * @internal\n */\nexport function appendSVGPath(pathData: string, graphicsPath: GraphicsPath): void\n{\n    const tempPath = new GraphicsPath(pathData, false);\n\n    for (const instruction of tempPath.instructions)\n    {\n        graphicsPath.instructions.push(instruction);\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAQO,SAAS,gBAAgB,QAChC,EAAA;IAEU,MAAA,KAAA,GAAQ,QAAS,CAAA,KAAA,CAAM,UAAU,CAAA,CAAA;IACjC,MAAA,QAAA,GAAW,MAAM,MAAO,CAAA,CAAC,OAAS,IAAK,CAAA,IAAA,EAAO,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;IAEvD,OAAA,QAAA,CAAA;AACX,CAAA;AAQO,SAAS,kBAAkB,QAClC,EAAA;IACU,MAAA,MAAA,GAAS,QAAS,CAAA,KAAA,CAAM,uBAAuB,CAAA,CAAA;IAEjD,IAAA,CAAC,MAAU,IAAA,MAAA,CAAO,MAAS,GAAA,CAAA,EAAU,OAAA,CAAA,CAAA;IAEnC,MAAA,OAAA,GAAU,MAAO,CAAA,GAAA,CAAI,MAAM,CAAA,CAAA;IACjC,MAAM,KAAK,EAAC,CAAA;IACZ,MAAM,KAAK,EAAC,CAAA;IAEZ,IAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,OAAQ,CAAA,MAAA,EAAQ,KAAK,CACzC,CAAA;QACQ,IAAA,CAAA,GAAI,CAAI,GAAA,OAAA,CAAQ,MACpB,EAAA;YACO,EAAA,CAAA,IAAA,CAAK,OAAQ,CAAA,CAAC,CAAC,CAAA,CAAA;YAClB,EAAA,CAAG,IAAK,CAAA,OAAA,CAAQ,CAAI,GAAA,CAAC,CAAC,CAAA,CAAA;QAAA,CAC1B;IAAA,CACJ;IAEA,IAAI,EAAG,CAAA,MAAA,KAAW,CAAK,IAAA,EAAA,CAAG,MAAW,KAAA,CAAA,EAAU,OAAA,CAAA,CAAA;IAE/C,MAAM,IAAO,GAAA,IAAA,CAAK,GAAI,CAAA,GAAG,EAAE,CAAA,CAAA;IAC3B,MAAM,IAAO,GAAA,IAAA,CAAK,GAAI,CAAA,GAAG,EAAE,CAAA,CAAA;IAC3B,MAAM,IAAO,GAAA,IAAA,CAAK,GAAI,CAAA,GAAG,EAAE,CAAA,CAAA;IAC3B,MAAM,IAAO,GAAA,IAAA,CAAK,GAAI,CAAA,GAAG,EAAE,CAAA,CAAA;IAErB,MAAA,IAAA,GAAA,CAAQ,IAAO,GAAA,IAAA,IAAA,CAAS,IAAO,GAAA,IAAA,CAAA,CAAA;IAE9B,OAAA,IAAA,CAAA;AACX,CAAA;AAQgB,SAAA,aAAA,CAAc,QAAA,EAAkB,YAChD,EAAA;IACI,MAAM,QAAW,GAAA,IAAI,iQAAa,CAAA,QAAA,EAAU,KAAK,CAAA,CAAA;IAEtC,KAAA,MAAA,WAAA,IAAe,SAAS,YACnC,CAAA;QACiB,YAAA,CAAA,YAAA,CAAa,IAAA,CAAK,WAAW,CAAA,CAAA;IAAA,CAC9C;AACJ","debugId":null}},
    {"offset": {"line": 7910, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/svg/SVGParser.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/svg/SVGParser.ts"],"sourcesContent":["import { warn } from '../../../../utils/logging/warn';\nimport { GraphicsPath } from '../path/GraphicsPath';\nimport { parseSVGDefinitions } from './parseSVGDefinitions';\nimport { parseSVGFloatAttribute } from './parseSVGFloatAttribute';\nimport { parseSVGStyle } from './parseSVGStyle';\nimport { checkForNestedPattern } from './utils/fillOperations';\nimport { appendSVGPath, calculatePathArea, extractSubpaths } from './utils/pathOperations';\n\nimport type { FillGradient } from '../fill/FillGradient';\nimport type { FillStyle, StrokeStyle } from '../FillTypes';\nimport type {\n    GraphicsContext,\n} from '../GraphicsContext';\n\n/**\n * Represents a session for SVG parsing. Contains the current state and resources needed during parsing.\n * @internal\n */\nexport interface Session\n{\n    /** The graphics context to render to */\n    context: GraphicsContext;\n    /** The current path being constructed */\n    path: GraphicsPath;\n    /** Map of definitions by id */\n    defs: Record<string, FillGradient>;\n}\n\n/**\n * Parses an SVG element or string and renders it to a graphics context.\n * Handles both SVG strings and SVG DOM elements as input.\n * @param svg - The SVG content to parse, either as a string or element\n * @param graphicsContext - Optional graphics context to render to\n * @returns The graphics context with the SVG rendered into it\n * @internal\n */\nexport function SVGParser(\n    svg: string | SVGElement | SVGSVGElement,\n    graphicsContext?: GraphicsContext\n): GraphicsContext\n{\n    // Convert string input to SVG element\n    if (typeof svg === 'string')\n    {\n        // eslint-disable-next-line no-restricted-globals\n        const div = document.createElement('div');\n\n        div.innerHTML = svg.trim();\n        svg = div.querySelector('svg') as SVGElement;\n    }\n\n    // Initialize parsing session\n    const session = {\n        context: graphicsContext,\n        defs: {},\n        path: new GraphicsPath(),\n    };\n\n    // Parse definitions (gradients, etc) first\n    parseSVGDefinitions(svg, session);\n\n    // Process all child elements except defs\n    const children = svg.children;\n\n    const { fillStyle, strokeStyle } = parseSVGStyle(svg, session);\n\n    for (let i = 0; i < children.length; i++)\n    {\n        const child = children[i] as SVGElement;\n\n        if (child.nodeName.toLowerCase() === 'defs') continue;\n        renderChildren(child, session, fillStyle, strokeStyle);\n    }\n\n    return graphicsContext;\n}\n\n/**\n * Recursively renders SVG elements and their children.\n * Handles styling inheritance and different SVG shape types.\n * @param svg - The SVG element to render\n * @param session - The current parsing session\n * @param fillStyle - The inherited fill style\n * @param strokeStyle - The inherited stroke style\n */\nfunction renderChildren(svg: SVGElement, session: Session, fillStyle: FillStyle, strokeStyle: StrokeStyle): void\n{\n    const children = svg.children;\n\n    // Parse element's style and merge with inherited styles\n    const { fillStyle: f1, strokeStyle: s1 } = parseSVGStyle(svg, session);\n\n    if (f1 && fillStyle)\n    {\n        fillStyle = { ...fillStyle, ...f1 };\n    }\n    else if (f1)\n    {\n        fillStyle = f1;\n    }\n\n    if (s1 && strokeStyle)\n    {\n        strokeStyle = { ...strokeStyle, ...s1 };\n    }\n    else if (s1)\n    {\n        strokeStyle = s1;\n    }\n\n    const noStyle = !fillStyle && !strokeStyle;\n\n    // Default to black fill if no styles specified\n    if (noStyle)\n    {\n        fillStyle = { color: 0 };\n    }\n\n    // Variables for shape attributes\n    let x;\n    let y;\n    let x1;\n    let y1;\n    let x2;\n    let y2;\n    let cx;\n    let cy;\n    let r;\n    let rx;\n    let ry;\n    let points;\n    let pointsString;\n    let d;\n    let graphicsPath;\n    let width;\n    let height;\n\n    // Handle different SVG element types\n    switch (svg.nodeName.toLowerCase())\n    {\n        case 'path':\n        {\n            d = svg.getAttribute('d') as string;\n\n            const fillRule = svg.getAttribute('fill-rule') as string;\n\n            const subpaths = extractSubpaths(d);\n            const hasExplicitEvenodd = fillRule === 'evenodd';\n            const hasMultipleSubpaths = subpaths.length > 1;\n\n            const shouldProcessHoles = hasExplicitEvenodd && hasMultipleSubpaths;\n\n            if (shouldProcessHoles)\n            {\n                const subpathsWithArea = subpaths.map((subpath) => ({\n                    path: subpath,\n                    area: calculatePathArea(subpath)\n                }));\n\n                subpathsWithArea.sort((a, b) => b.area - a.area);\n\n                // For complex cases, prefer multiple holes approach\n                const useMultipleHolesApproach = subpaths.length > 3 || !checkForNestedPattern(subpathsWithArea);\n\n                if (useMultipleHolesApproach)\n                {\n                    // Multiple holes approach: first (largest) is fill, rest are holes\n                    for (let i = 0; i < subpathsWithArea.length; i++)\n                    {\n                        const subpath = subpathsWithArea[i];\n                        const isMainShape = i === 0;\n\n                        session.context.beginPath();\n                        const newPath = new GraphicsPath(undefined, true); // Always use evenodd for hole processing\n\n                        appendSVGPath(subpath.path, newPath);\n                        session.context.path(newPath);\n\n                        if (isMainShape)\n                        {\n                            if (fillStyle) session.context.fill(fillStyle);\n                            if (strokeStyle) session.context.stroke(strokeStyle);\n                        }\n                        else\n                        {\n                            session.context.cut();\n                        }\n                    }\n                }\n                else\n                {\n                    // Nested holes approach: alternate between fill and cut\n                    for (let i = 0; i < subpathsWithArea.length; i++)\n                    {\n                        const subpath = subpathsWithArea[i];\n                        const isHole = i % 2 === 1; // Odd indices are holes\n\n                        session.context.beginPath();\n                        const newPath = new GraphicsPath(undefined, true); // Always use evenodd for hole processing\n\n                        appendSVGPath(subpath.path, newPath);\n                        session.context.path(newPath);\n\n                        if (isHole)\n                        {\n                            session.context.cut();\n                        }\n                        else\n                        {\n                            if (fillStyle) session.context.fill(fillStyle);\n                            if (strokeStyle) session.context.stroke(strokeStyle);\n                        }\n                    }\n                }\n            }\n            else\n            {\n                const useEvenoddForGraphicsPath = fillRule ? (fillRule === 'evenodd') : true;\n\n                graphicsPath = new GraphicsPath(d, useEvenoddForGraphicsPath);\n                session.context.path(graphicsPath);\n                if (fillStyle) session.context.fill(fillStyle);\n                if (strokeStyle) session.context.stroke(strokeStyle);\n            }\n            break;\n        }\n\n        case 'circle':\n            cx = parseSVGFloatAttribute(svg, 'cx', 0);\n            cy = parseSVGFloatAttribute(svg, 'cy', 0);\n            r = parseSVGFloatAttribute(svg, 'r', 0);\n            session.context.ellipse(cx, cy, r, r);\n            if (fillStyle) session.context.fill(fillStyle);\n            if (strokeStyle) session.context.stroke(strokeStyle);\n            break;\n\n        case 'rect':\n            x = parseSVGFloatAttribute(svg, 'x', 0);\n            y = parseSVGFloatAttribute(svg, 'y', 0);\n            width = parseSVGFloatAttribute(svg, 'width', 0);\n            height = parseSVGFloatAttribute(svg, 'height', 0);\n            rx = parseSVGFloatAttribute(svg, 'rx', 0);\n            ry = parseSVGFloatAttribute(svg, 'ry', 0);\n\n            if (rx || ry)\n            {\n                session.context.roundRect(x, y, width, height, rx || ry);\n            }\n            else\n            {\n                session.context.rect(x, y, width, height);\n            }\n\n            if (fillStyle) session.context.fill(fillStyle);\n            if (strokeStyle) session.context.stroke(strokeStyle);\n            break;\n\n        case 'ellipse':\n            cx = parseSVGFloatAttribute(svg, 'cx', 0);\n            cy = parseSVGFloatAttribute(svg, 'cy', 0);\n            rx = parseSVGFloatAttribute(svg, 'rx', 0);\n            ry = parseSVGFloatAttribute(svg, 'ry', 0);\n\n            session.context.beginPath();\n            session.context.ellipse(cx, cy, rx, ry);\n\n            if (fillStyle) session.context.fill(fillStyle);\n            if (strokeStyle) session.context.stroke(strokeStyle);\n            break;\n\n        case 'line':\n            x1 = parseSVGFloatAttribute(svg, 'x1', 0);\n            y1 = parseSVGFloatAttribute(svg, 'y1', 0);\n            x2 = parseSVGFloatAttribute(svg, 'x2', 0);\n            y2 = parseSVGFloatAttribute(svg, 'y2', 0);\n\n            session.context.beginPath();\n            session.context.moveTo(x1, y1);\n            session.context.lineTo(x2, y2);\n\n            if (strokeStyle) session.context.stroke(strokeStyle);\n            break;\n\n        case 'polygon':\n            pointsString = svg.getAttribute('points') as string;\n            points = pointsString.match(/\\d+/g).map((n) => parseInt(n, 10));\n            session.context.poly(points, true);\n            if (fillStyle) session.context.fill(fillStyle);\n            if (strokeStyle) session.context.stroke(strokeStyle);\n            break;\n\n        case 'polyline':\n            pointsString = svg.getAttribute('points') as string;\n            points = pointsString.match(/\\d+/g).map((n) => parseInt(n, 10));\n            session.context.poly(points, false);\n            if (strokeStyle) session.context.stroke(strokeStyle);\n            break;\n\n        // Group elements - just process children\n        case 'g':\n        case 'svg':\n            break;\n\n        default: {\n            // Log unsupported elements\n            warn(`[SVG parser] <${svg.nodeName}> elements unsupported`);\n            break;\n        }\n    }\n\n    if (noStyle)\n    {\n        fillStyle = null;\n    }\n\n    // Recursively process child elements\n    for (let i = 0; i < children.length; i++)\n    {\n        renderChildren(children[i] as SVGElement, session, fillStyle, strokeStyle);\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 8126, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/utils/convertFillInputToFillStyle.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/utils/convertFillInputToFillStyle.ts"],"sourcesContent":["import { Color } from '../../../../color/Color';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { FillGradient } from '../fill/FillGradient';\nimport { FillPattern } from '../fill/FillPattern';\n\nimport type { ColorSource } from '../../../../color/Color';\nimport type {\n    ConvertedFillStyle,\n    ConvertedStrokeStyle,\n    FillInput,\n    FillStyle,\n    StrokeInput,\n} from '../FillTypes';\n\nfunction isColorLike(value: unknown): value is ColorSource\n{\n    return Color.isColorLike(value as ColorSource);\n}\n\nfunction isFillPattern(value: unknown): value is FillPattern\n{\n    return value instanceof FillPattern;\n}\n\nfunction isFillGradient(value: unknown): value is FillGradient\n{\n    return value instanceof FillGradient;\n}\n\nfunction isTexture(value: unknown): value is Texture\n{\n    return value instanceof Texture;\n}\n\n/**\n * Handles the case where the value is a ColorLike\n * @param fill\n * @param value\n * @param defaultStyle\n * @example\n * graphics.fill(0xff0000)\n * graphics.fill(new Color(0xff0000))\n * graphics.fill({ r: 255, g: 0, b: 0 })\n */\nfunction handleColorLike(\n    fill: FillStyle,\n    value: ColorSource,\n    defaultStyle: ConvertedFillStyle\n): ConvertedFillStyle\n{\n    const temp = Color.shared.setValue(value ?? 0);\n\n    fill.color = temp.toNumber();\n    fill.alpha = temp.alpha === 1 ? defaultStyle.alpha : temp.alpha;\n    fill.texture = Texture.WHITE;\n\n    return { ...defaultStyle, ...fill } as ConvertedFillStyle;\n}\n\n/**\n * Handles the case where the value is a Texture\n * @param fill\n * @param value\n * @param defaultStyle\n * @example\n * graphics.fill(new Texture(0xff0000))\n */\nfunction handleTexture(fill: FillStyle, value: Texture, defaultStyle: ConvertedFillStyle): ConvertedFillStyle\n{\n    fill.texture = value;\n\n    return { ...defaultStyle, ...fill } as ConvertedFillStyle;\n}\n\n/**\n * Handles the case where the value is a FillPattern\n * @param fill\n * @param value\n * @param defaultStyle\n * @example\n * graphics.fill(new FillPattern(0xff0000))\n */\nfunction handleFillPattern(\n    fill: FillStyle,\n    value: FillPattern,\n    defaultStyle: ConvertedFillStyle\n): ConvertedFillStyle\n{\n    fill.fill = value;\n    fill.color = 0xffffff;\n    fill.texture = value.texture;\n    fill.matrix = value.transform;\n\n    return { ...defaultStyle, ...fill } as ConvertedFillStyle;\n}\n\n/**\n * Handles the case where the value is a FillGradient\n * @param fill\n * @param value\n * @param defaultStyle\n * @example\n * graphics.fill(new FillGradient(0, 0, 200, 0))\n */\nfunction handleFillGradient(\n    fill: FillStyle,\n    value: FillGradient,\n    defaultStyle: ConvertedFillStyle\n): ConvertedFillStyle\n{\n    value.buildGradient();\n    fill.fill = value;\n    fill.color = 0xffffff;\n    fill.texture = value.texture;\n    fill.matrix = value.transform;\n    fill.textureSpace = value.textureSpace;\n\n    return { ...defaultStyle, ...fill } as ConvertedFillStyle;\n}\n\n/**\n * Handles the case where the value is not a direct Pixi Color, PatternFill, or GradientFill but instead\n * an object with potentially `color`\n * @example\n * {\n *   color: new Color(0xff0000)\n *   alpha: 0.5,\n *   texture?: null,\n *   matrix?: null,\n * }\n * @param value\n * @param defaultStyle\n */\nfunction handleFillObject(value: FillStyle, defaultStyle: ConvertedFillStyle): ConvertedFillStyle\n{\n    const style = { ...defaultStyle, ...(value as FillStyle) };\n\n    const color = Color.shared.setValue(style.color);\n\n    style.alpha *= color.alpha;\n    style.color = color.toNumber();\n\n    return style as ConvertedFillStyle;\n}\n\n/**\n * Converts a value to a fill style, we do this as PixiJS has a number of ways to define a fill style\n * They can be a direct color, a texture, a gradient, or an object with these values in them\n * This function will take any of these input types and convert them into a single object\n * that PixiJS can understand and use internally.\n * @param value - The value to convert to a fill style\n * @param defaultStyle - The default fill style to use\n * @private\n */\nexport function toFillStyle<T extends FillInput>(\n    value: T,\n    defaultStyle: ConvertedFillStyle\n): ConvertedFillStyle\n{\n    if (value === undefined || value === null)\n    {\n        return null;\n    }\n\n    const fill: ConvertedFillStyle = {} as ConvertedFillStyle;\n    const objectStyle = value as FillStyle;\n\n    if (isColorLike(value))\n    {\n        return handleColorLike(fill, value, defaultStyle);\n    }\n    else if (isTexture(value))\n    {\n        return handleTexture(fill, value, defaultStyle);\n    }\n    else if (isFillPattern(value))\n    {\n        return handleFillPattern(fill, value, defaultStyle);\n    }\n    else if (isFillGradient(value))\n    {\n        return handleFillGradient(fill, value, defaultStyle);\n    }\n    else if (objectStyle.fill && isFillPattern(objectStyle.fill))\n    {\n        return handleFillPattern(objectStyle, objectStyle.fill, defaultStyle);\n    }\n    else if (objectStyle.fill && isFillGradient(objectStyle.fill))\n    {\n        return handleFillGradient(objectStyle, objectStyle.fill, defaultStyle);\n    }\n\n    return handleFillObject(objectStyle, defaultStyle);\n}\n\n/**\n * Converts a value to a stroke style, similar to `toFillStyle` but for strokes\n * @param value - The value to convert to a stroke style\n * @param defaultStyle - The default stroke style to use\n * @private\n */\nexport function toStrokeStyle(value: StrokeInput, defaultStyle: ConvertedStrokeStyle): ConvertedStrokeStyle\n{\n    const { width, alignment, miterLimit, cap, join, pixelLine, ...rest } = defaultStyle;\n    const fill = toFillStyle(value, rest);\n\n    if (!fill)\n    {\n        return null;\n    }\n\n    return {\n        width,\n        alignment,\n        miterLimit,\n        cap,\n        join,\n        pixelLine,\n        ...fill,\n    };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 8245, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/graphics/shared/GraphicsContext.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/graphics/shared/GraphicsContext.ts"],"sourcesContent":["/* eslint-disable max-len */\nimport EventEmitter from 'eventemitter3';\nimport { Color, type ColorSource } from '../../../color/Color';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { Point } from '../../../maths/point/Point';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { uid } from '../../../utils/data/uid';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\nimport { Bounds } from '../../container/bounds/Bounds';\nimport { GraphicsPath } from './path/GraphicsPath';\nimport { SVGParser } from './svg/SVGParser';\nimport { toFillStyle, toStrokeStyle } from './utils/convertFillInputToFillStyle';\n\nimport type { PointData } from '../../../maths/point/PointData';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { TextureDestroyOptions, TypeOrBool } from '../../container/destroyTypes';\nimport type { ConvertedFillStyle, ConvertedStrokeStyle, FillInput, StrokeInput } from './FillTypes';\nimport type { RoundedPoint } from './path/roundShape';\n\nconst tmpPoint = new Point();\n\n/**\n * The mode for batching graphics instructions.\n *\n * It can be:\n * - 'auto': Automatically determines whether to batch based on the number of instructions.\n * - 'batch': Forces batching of all instructions.\n * - 'no-batch': Disables batching, processing each instruction individually.\n * @category scene\n * @advanced\n */\nexport type BatchMode = 'auto' | 'batch' | 'no-batch';\n\n/** @internal */\nexport interface FillInstruction\n{\n    action: 'fill' | 'cut'\n    data: { style: ConvertedFillStyle, path: GraphicsPath, hole?: GraphicsPath }\n}\n\n/** @internal */\nexport interface StrokeInstruction\n{\n    action: 'stroke'\n    data: { style: ConvertedStrokeStyle, path: GraphicsPath, hole?: GraphicsPath }\n}\n\n/** @internal */\nexport interface TextureInstruction\n{\n    action: 'texture'\n    data: {\n        image: Texture,\n\n        dx: number\n        dy: number\n\n        dw: number\n        dh: number\n\n        transform: Matrix\n        alpha: number\n        style: number,\n    }\n}\n\n/** @internal */\nexport type GraphicsInstructions = FillInstruction | StrokeInstruction | TextureInstruction;\n\nconst tempMatrix = new Matrix();\n\n/**\n * The GraphicsContext class allows for the creation of lightweight objects that contain instructions for drawing shapes and paths.\n * It is used internally by the Graphics class to draw shapes and paths, and can be used directly and shared between Graphics objects,\n *\n * This sharing of a `GraphicsContext` means that the intensive task of converting graphics instructions into GPU-ready geometry is done once, and the results are reused,\n * much like sprites reusing textures.\n * @category scene\n * @standard\n */\nexport class GraphicsContext extends EventEmitter<{\n    update: GraphicsContext\n    destroy: GraphicsContext\n}>\n{\n    /** The default fill style to use when none is provided. */\n    public static defaultFillStyle: ConvertedFillStyle = {\n        /** The color to use for the fill. */\n        color: 0xffffff,\n        /** The alpha value to use for the fill. */\n        alpha: 1,\n        /** The texture to use for the fill. */\n        texture: Texture.WHITE,\n        /** The matrix to apply. */\n        matrix: null,\n        /** The fill pattern to use. */\n        fill: null,\n        /** Whether coordinates are 'global' or 'local' */\n        textureSpace: 'local',\n    };\n\n    /** The default stroke style to use when none is provided. */\n    public static defaultStrokeStyle: ConvertedStrokeStyle = {\n        /** The width of the stroke. */\n        width: 1,\n        /** The color to use for the stroke. */\n        color: 0xffffff,\n        /** The alpha value to use for the stroke. */\n        alpha: 1,\n        /** The alignment of the stroke. */\n        alignment: 0.5,\n        /** The miter limit to use. */\n        miterLimit: 10,\n        /** The line cap style to use. */\n        cap: 'butt',\n        /** The line join style to use. */\n        join: 'miter',\n        /** The texture to use for the fill. */\n        texture: Texture.WHITE,\n        /** The matrix to apply. */\n        matrix: null,\n        /** The fill pattern to use. */\n        fill: null,\n        /** Whether coordinates are 'global' or 'local' */\n        textureSpace: 'local',\n        /** If the stroke is a pixel line. */\n        pixelLine: false,\n    };\n\n    /**\n     * unique id for this graphics context\n     * @internal\n     */\n    public readonly uid: number = uid('graphicsContext');\n    /** @internal */\n    public dirty = true;\n    /** The batch mode for this graphics context. It can be 'auto', 'batch', or 'no-batch'. */\n    public batchMode: BatchMode = 'auto';\n    /** @internal */\n    public instructions: GraphicsInstructions[] = [];\n    /**\n     * Custom shader to apply to the graphics when rendering.\n     * @advanced\n     */\n    public customShader?: Shader;\n\n    private _activePath: GraphicsPath = new GraphicsPath();\n    private _transform: Matrix = new Matrix();\n\n    private _fillStyle: ConvertedFillStyle = { ...GraphicsContext.defaultFillStyle };\n    private _strokeStyle: ConvertedStrokeStyle = { ...GraphicsContext.defaultStrokeStyle };\n    private _stateStack: { fillStyle: ConvertedFillStyle; strokeStyle: ConvertedStrokeStyle, transform: Matrix }[] = [];\n\n    private _tick = 0;\n\n    private _bounds = new Bounds();\n    private _boundsDirty = true;\n\n    /**\n     * Creates a new GraphicsContext object that is a clone of this instance, copying all properties,\n     * including the current drawing state, transformations, styles, and instructions.\n     * @returns A new GraphicsContext instance with the same properties and state as this one.\n     */\n    public clone(): GraphicsContext\n    {\n        const clone = new GraphicsContext();\n\n        clone.batchMode = this.batchMode;\n        clone.instructions = this.instructions.slice();\n        clone._activePath = this._activePath.clone();\n        clone._transform = this._transform.clone();\n        clone._fillStyle = { ...this._fillStyle };\n        clone._strokeStyle = { ...this._strokeStyle };\n        clone._stateStack = this._stateStack.slice();\n        clone._bounds = this._bounds.clone();\n        clone._boundsDirty = true;\n\n        return clone;\n    }\n\n    /**\n     * The current fill style of the graphics context. This can be a color, gradient, pattern, or a more complex style defined by a FillStyle object.\n     */\n    get fillStyle(): ConvertedFillStyle\n    {\n        return this._fillStyle;\n    }\n\n    set fillStyle(value: FillInput)\n    {\n        this._fillStyle = toFillStyle(value, GraphicsContext.defaultFillStyle);\n    }\n\n    /**\n     * The current stroke style of the graphics context. Similar to fill styles, stroke styles can encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n     */\n    get strokeStyle(): ConvertedStrokeStyle\n    {\n        return this._strokeStyle;\n    }\n\n    set strokeStyle(value: FillInput)\n    {\n        this._strokeStyle = toStrokeStyle(value, GraphicsContext.defaultStrokeStyle);\n    }\n\n    /**\n     * Sets the current fill style of the graphics context. The fill style can be a color, gradient,\n     * pattern, or a more complex style defined by a FillStyle object.\n     * @param style - The fill style to apply. This can be a simple color, a gradient or pattern object,\n     *                or a FillStyle or ConvertedFillStyle object.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setFillStyle(style: FillInput): this\n    {\n        this._fillStyle = toFillStyle(style, GraphicsContext.defaultFillStyle);\n\n        return this;\n    }\n\n    /**\n     * Sets the current stroke style of the graphics context. Similar to fill styles, stroke styles can\n     * encompass colors, gradients, patterns, or more detailed configurations via a StrokeStyle object.\n     * @param style - The stroke style to apply. Can be defined as a color, a gradient or pattern,\n     *                or a StrokeStyle or ConvertedStrokeStyle object.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setStrokeStyle(style: StrokeInput): this\n    {\n        this._strokeStyle = toFillStyle(style, GraphicsContext.defaultStrokeStyle) as ConvertedStrokeStyle;\n\n        return this;\n    }\n\n    /**\n     * Adds a texture to the graphics context. This method supports multiple overloads for specifying the texture.\n     * If only a texture is provided, it uses the texture's width and height for drawing.\n     * @param texture - The Texture object to use.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public texture(texture: Texture): this;\n    /**\n     * Adds a texture to the graphics context. This method supports multiple overloads for specifying the texture,\n     * tint, and dimensions. If only a texture is provided, it uses the texture's width and height for drawing.\n     * Additional parameters allow for specifying a tint color, and custom dimensions for the texture drawing area.\n     * @param texture - The Texture object to use.\n     * @param tint - (Optional) A ColorSource to tint the texture. If not provided, defaults to white (0xFFFFFF).\n     * @param dx - (Optional) The x-coordinate in the destination canvas at which to place the top-left corner of\n     * the source image.\n     * @param dy - (Optional) The y-coordinate in the destination canvas at which to place the top-left corner of\n     * the source image.\n     * @param dw - (Optional) The width of the rectangle within the source image to draw onto the destination canvas.\n     * If not provided, uses the texture's frame width.\n     * @param dh - (Optional) The height of the rectangle within the source image to draw onto the destination canvas.\n     * If not provided, uses the texture's frame height.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public texture(texture: Texture, tint?: ColorSource, dx?: number, dy?: number, dw?: number, dh?: number): this;\n    public texture(texture: Texture, tint?: ColorSource, dx?: number, dy?: number, dw?: number, dh?: number): this\n    {\n        this.instructions.push({\n            action: 'texture',\n            data: {\n                image: texture,\n\n                dx: dx || 0,\n                dy: dy || 0,\n\n                dw: dw || texture.frame.width,\n                dh: dh || texture.frame.height,\n\n                transform: this._transform.clone(),\n                alpha: this._fillStyle.alpha,\n                style: tint ? Color.shared.setValue(tint).toNumber() : 0xFFFFFF,\n            }\n        });\n\n        this.onUpdate();\n\n        return this;\n    }\n\n    /**\n     * Resets the current path. Any previous path and its commands are discarded and a new path is\n     * started. This is typically called before beginning a new shape or series of drawing commands.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public beginPath(): this\n    {\n        this._activePath = new GraphicsPath();\n\n        return this;\n    }\n\n    /**\n     * Fills the current or given path with the current fill style. This method can optionally take\n     * a color and alpha for a simple fill, or a more complex FillInput object for advanced fills.\n     * @param style - (Optional) The style to fill the path with. Can be a color, gradient, pattern, or a complex style object. If omitted, uses the current fill style.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public fill(style?: FillInput): this;\n    /** @deprecated 8.0.0 */\n    public fill(color: ColorSource, alpha: number): this;\n    public fill(style?: FillInput, alpha?: number): this\n    {\n        let path: GraphicsPath;\n\n        const lastInstruction = this.instructions[this.instructions.length - 1];\n\n        if (this._tick === 0 && lastInstruction && lastInstruction.action === 'stroke')\n        {\n            path = lastInstruction.data.path;\n        }\n        else\n        {\n            path = this._activePath.clone();\n        }\n\n        if (!path) return this;\n\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        if (style != null)\n        {\n            if (alpha !== undefined && typeof style === 'number')\n            {\n                // #if _DEBUG\n                deprecation(v8_0_0, 'GraphicsContext.fill(color, alpha) is deprecated, use GraphicsContext.fill({ color, alpha }) instead');\n                // #endif\n\n                style = { color: style, alpha };\n            }\n            this._fillStyle = toFillStyle(style, GraphicsContext.defaultFillStyle);\n        }\n\n        // TODO not a fan of the clone!!\n        this.instructions.push({\n            action: 'fill',\n            // TODO copy fill style!\n            data: { style: this.fillStyle, path }\n        });\n\n        this.onUpdate();\n\n        this._initNextPathLocation();\n        this._tick = 0;\n\n        return this;\n    }\n\n    private _initNextPathLocation()\n    {\n        // Reset the _activePath with the last point of the current path\n        const { x, y } = this._activePath.getLastPoint(Point.shared);\n\n        this._activePath.clear();\n        this._activePath.moveTo(x, y);\n    }\n\n    /**\n     * Strokes the current path with the current stroke style. This method can take an optional\n     * FillInput parameter to define the stroke's appearance, including its color, width, and other properties.\n     * @param style - (Optional) The stroke style to apply. Can be defined as a simple color or a more complex style object. If omitted, uses the current stroke style.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public stroke(style?: StrokeInput): this\n    {\n        let path: GraphicsPath;\n\n        const lastInstruction = this.instructions[this.instructions.length - 1];\n\n        if (this._tick === 0 && lastInstruction && lastInstruction.action === 'fill')\n        {\n            path = lastInstruction.data.path;\n        }\n        else\n        {\n            path = this._activePath.clone();\n        }\n\n        if (!path) return this;\n\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        if (style != null)\n        {\n            this._strokeStyle = toStrokeStyle(style, GraphicsContext.defaultStrokeStyle);\n        }\n\n        // TODO not a fan of the clone!!\n        this.instructions.push({\n            action: 'stroke',\n            // TODO copy fill style!\n            data: { style: this.strokeStyle, path }\n        });\n\n        this.onUpdate();\n\n        this._initNextPathLocation();\n        this._tick = 0;\n\n        return this;\n    }\n\n    /**\n     * Applies a cutout to the last drawn shape. This is used to create holes or complex shapes by\n     * subtracting a path from the previously drawn path. If a hole is not completely in a shape, it will\n     * fail to cut correctly!\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public cut(): this\n    {\n        for (let i = 0; i < 2; i++)\n        {\n            const lastInstruction = this.instructions[this.instructions.length - 1 - i];\n\n            const holePath = this._activePath.clone();\n\n            if (lastInstruction)\n            {\n                if (lastInstruction.action === 'stroke' || lastInstruction.action === 'fill')\n                {\n                    if (lastInstruction.data.hole)\n                    {\n                        lastInstruction.data.hole.addPath(holePath);\n                    }\n                    else\n                    {\n                        lastInstruction.data.hole = holePath;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this._initNextPathLocation();\n\n        return this;\n    }\n\n    /**\n     * Adds an arc to the current path, which is centered at (x, y) with the specified radius,\n     * starting and ending angles, and direction.\n     * @param x - The x-coordinate of the arc's center.\n     * @param y - The y-coordinate of the arc's center.\n     * @param radius - The arc's radius.\n     * @param startAngle - The starting angle, in radians.\n     * @param endAngle - The ending angle, in radians.\n     * @param counterclockwise - (Optional) Specifies whether the arc is drawn counterclockwise (true) or clockwise (false). Defaults to false.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this._activePath.arc(\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty,\n            radius,\n            startAngle,\n            endAngle,\n            counterclockwise,\n        );\n\n        return this;\n    }\n\n    /**\n     * Adds an arc to the current path with the given control points and radius, connected to the previous point\n     * by a straight line if necessary.\n     * @param x1 - The x-coordinate of the first control point.\n     * @param y1 - The y-coordinate of the first control point.\n     * @param x2 - The x-coordinate of the second control point.\n     * @param y2 - The y-coordinate of the second control point.\n     * @param radius - The arc's radius.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this._activePath.arcTo(\n            (t.a * x1) + (t.c * y1) + t.tx,\n            (t.b * x1) + (t.d * y1) + t.ty,\n            (t.a * x2) + (t.c * y2) + t.tx,\n            (t.b * x2) + (t.d * y2) + t.ty,\n            radius,\n        );\n\n        return this;\n    }\n\n    /**\n     * Adds an SVG-style arc to the path, allowing for elliptical arcs based on the SVG spec.\n     * @param rx - The x-radius of the ellipse.\n     * @param ry - The y-radius of the ellipse.\n     * @param xAxisRotation - The rotation of the ellipse's x-axis relative\n     * to the x-axis of the coordinate system, in degrees.\n     * @param largeArcFlag - Determines if the arc should be greater than or less than 180 degrees.\n     * @param sweepFlag - Determines if the arc should be swept in a positive angle direction.\n     * @param x - The x-coordinate of the arc's end point.\n     * @param y - The y-coordinate of the arc's end point.\n     * @returns The instance of the current object for chaining.\n     */\n    public arcToSvg(\n        rx: number, ry: number,\n        xAxisRotation: number,\n        largeArcFlag: number,\n        sweepFlag: number,\n        x: number, y: number\n    ): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this._activePath.arcToSvg(\n            rx, ry,\n            xAxisRotation, // should we rotate this with transform??\n            largeArcFlag,\n            sweepFlag,\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty,\n        );\n\n        return this;\n    }\n\n    /**\n     * Adds a cubic Bezier curve to the path.\n     * It requires three points: the first two are control points and the third one is the end point.\n     * The starting point is the last point in the current path.\n     * @param cp1x - The x-coordinate of the first control point.\n     * @param cp1y - The y-coordinate of the first control point.\n     * @param cp2x - The x-coordinate of the second control point.\n     * @param cp2y - The y-coordinate of the second control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number, smoothness?: number): this\n    {\n        this._tick++;\n\n        // TODO optimize for no transform\n        const t = this._transform;\n\n        this._activePath.bezierCurveTo(\n            (t.a * cp1x) + (t.c * cp1y) + t.tx,\n            (t.b * cp1x) + (t.d * cp1y) + t.ty,\n            (t.a * cp2x) + (t.c * cp2y) + t.tx,\n            (t.b * cp2x) + (t.d * cp2y) + t.ty,\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty,\n            smoothness,\n        );\n\n        return this;\n    }\n\n    /**\n     * Closes the current path by drawing a straight line back to the start.\n     * If the shape is already closed or there are no points in the path, this method does nothing.\n     * @returns The instance of the current object for chaining.\n     */\n    public closePath(): this\n    {\n        this._tick++;\n\n        this._activePath?.closePath();\n\n        return this;\n    }\n\n    /**\n     * Draws an ellipse at the specified location and with the given x and y radii.\n     * An optional transformation can be applied, allowing for rotation, scaling, and translation.\n     * @param x - The x-coordinate of the center of the ellipse.\n     * @param y - The y-coordinate of the center of the ellipse.\n     * @param radiusX - The horizontal radius of the ellipse.\n     * @param radiusY - The vertical radius of the ellipse.\n     * @returns The instance of the current object for chaining.\n     */\n    public ellipse(x: number, y: number, radiusX: number, radiusY: number): this\n    {\n        this._tick++;\n\n        this._activePath.ellipse(x, y, radiusX, radiusY, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Draws a circle shape. This method adds a new circle path to the current drawing.\n     * @param x - The x-coordinate of the center of the circle.\n     * @param y - The y-coordinate of the center of the circle.\n     * @param radius - The radius of the circle.\n     * @returns The instance of the current object for chaining.\n     */\n    public circle(x: number, y: number, radius: number): this\n    {\n        this._tick++;\n\n        this._activePath.circle(x, y, radius, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Adds another `GraphicsPath` to this path, optionally applying a transformation.\n     * @param path - The `GraphicsPath` to add.\n     * @returns The instance of the current object for chaining.\n     */\n    public path(path: GraphicsPath): this\n    {\n        this._tick++;\n\n        this._activePath.addPath(path, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Connects the current point to a new point with a straight line. This method updates the current path.\n     * @param x - The x-coordinate of the new point to connect to.\n     * @param y - The y-coordinate of the new point to connect to.\n     * @returns The instance of the current object for chaining.\n     */\n    public lineTo(x: number, y: number): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this._activePath.lineTo(\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty\n        );\n\n        return this;\n    }\n\n    /**\n     * Sets the starting point for a new sub-path. Any subsequent drawing commands are considered part of this path.\n     * @param x - The x-coordinate for the starting point.\n     * @param y - The y-coordinate for the starting point.\n     * @returns The instance of the current object for chaining.\n     */\n    public moveTo(x: number, y: number): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        const instructions = this._activePath.instructions;\n\n        const transformedX = (t.a * x) + (t.c * y) + t.tx;\n        const transformedY = (t.b * x) + (t.d * y) + t.ty;\n\n        if (instructions.length === 1 && instructions[0].action === 'moveTo')\n        {\n            instructions[0].data[0] = transformedX;\n            instructions[0].data[1] = transformedY;\n\n            return this;\n        }\n        this._activePath.moveTo(\n            transformedX,\n            transformedY\n        );\n\n        return this;\n    }\n\n    /**\n     * Adds a quadratic curve to the path. It requires two points: the control point and the end point.\n     * The starting point is the last point in the current path.\n     * @param cpx - The x-coordinate of the control point.\n     * @param cpy - The y-coordinate of the control point.\n     * @param x - The x-coordinate of the end point.\n     * @param y - The y-coordinate of the end point.\n     * @param smoothness - Optional parameter to adjust the smoothness of the curve.\n     * @returns The instance of the current object for chaining.\n     */\n    public quadraticCurveTo(cpx: number, cpy: number, x: number, y: number, smoothness?: number): this\n    {\n        this._tick++;\n\n        const t = this._transform;\n\n        this._activePath.quadraticCurveTo(\n            (t.a * cpx) + (t.c * cpy) + t.tx,\n            (t.b * cpx) + (t.d * cpy) + t.ty,\n            (t.a * x) + (t.c * y) + t.tx,\n            (t.b * x) + (t.d * y) + t.ty,\n            smoothness,\n        );\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle shape. This method adds a new rectangle path to the current drawing.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @returns The instance of the current object for chaining.\n     */\n    public rect(x: number, y: number, w: number, h: number): this\n    {\n        this._tick++;\n\n        this._activePath.rect(x, y, w, h, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle with rounded corners.\n     * The corner radius can be specified to determine how rounded the corners should be.\n     * An optional transformation can be applied, which allows for rotation, scaling, and translation of the rectangle.\n     * @param x - The x-coordinate of the top-left corner of the rectangle.\n     * @param y - The y-coordinate of the top-left corner of the rectangle.\n     * @param w - The width of the rectangle.\n     * @param h - The height of the rectangle.\n     * @param radius - The radius of the rectangle's corners. If not specified, corners will be sharp.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundRect(x: number, y: number, w: number, h: number, radius?: number): this\n    {\n        this._tick++;\n\n        this._activePath.roundRect(x, y, w, h, radius, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon shape by specifying a sequence of points. This method allows for the creation of complex polygons,\n     * which can be both open and closed. An optional transformation can be applied, enabling the polygon to be scaled,\n     * rotated, or translated as needed.\n     * @param points - An array of numbers, or an array of PointData objects eg [{x,y}, {x,y}, {x,y}]\n     * representing the x and y coordinates, of the polygon's vertices, in sequence.\n     * @param close - A boolean indicating whether to close the polygon path. True by default.\n     */\n    public poly(points: number[] | PointData[], close?: boolean): this\n    {\n        this._tick++;\n\n        this._activePath.poly(points, close, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Draws a regular polygon with a specified number of sides. All sides and angles are equal.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @param transform - An optional `Matrix` object to apply a transformation to the polygon.\n     * @returns The instance of the current object for chaining.\n     */\n    public regularPoly(x: number, y: number, radius: number, sides: number, rotation = 0, transform?: Matrix): this\n    {\n        this._tick++;\n        this._activePath.regularPoly(x, y, radius, sides, rotation, transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a polygon with rounded corners.\n     * Similar to `regularPoly` but with the ability to round the corners of the polygon.\n     * @param x - The x-coordinate of the center of the polygon.\n     * @param y - The y-coordinate of the center of the polygon.\n     * @param radius - The radius of the circumscribed circle of the polygon.\n     * @param sides - The number of sides of the polygon. Must be 3 or more.\n     * @param corner - The radius of the rounding of the corners.\n     * @param rotation - The rotation angle of the polygon, in radians. Zero by default.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundPoly(x: number, y: number, radius: number, sides: number, corner: number, rotation?: number): this\n    {\n        this._tick++;\n        this._activePath.roundPoly(x, y, radius, sides, corner, rotation);\n\n        return this;\n    }\n\n    /**\n     * Draws a shape with rounded corners. This function supports custom radius for each corner of the shape.\n     * Optionally, corners can be rounded using a quadratic curve instead of an arc, providing a different aesthetic.\n     * @param points - An array of `RoundedPoint` representing the corners of the shape to draw.\n     * A minimum of 3 points is required.\n     * @param radius - The default radius for the corners.\n     * This radius is applied to all corners unless overridden in `points`.\n     * @param useQuadratic - If set to true, rounded corners are drawn using a quadraticCurve\n     *  method instead of an arc method. Defaults to false.\n     * @param smoothness - Specifies the smoothness of the curve when `useQuadratic` is true.\n     * Higher values make the curve smoother.\n     * @returns The instance of the current object for chaining.\n     */\n    public roundShape(points: RoundedPoint[], radius: number, useQuadratic?: boolean, smoothness?: number): this\n    {\n        this._tick++;\n        this._activePath.roundShape(points, radius, useQuadratic, smoothness);\n\n        return this;\n    }\n\n    /**\n     * Draw Rectangle with fillet corners. This is much like rounded rectangle\n     * however it support negative numbers as well for the corner radius.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param fillet - accept negative or positive values\n     */\n    public filletRect(x: number, y: number, width: number, height: number, fillet: number): this\n    {\n        this._tick++;\n        this._activePath.filletRect(x, y, width, height, fillet);\n\n        return this;\n    }\n\n    /**\n     * Draw Rectangle with chamfer corners. These are angled corners.\n     * @param x - Upper left corner of rect\n     * @param y - Upper right corner of rect\n     * @param width - Width of rect\n     * @param height - Height of rect\n     * @param chamfer - non-zero real number, size of corner cutout\n     * @param transform\n     */\n    public chamferRect(x: number, y: number, width: number, height: number, chamfer: number, transform?: Matrix): this\n    {\n        this._tick++;\n        this._activePath.chamferRect(x, y, width, height, chamfer, transform);\n\n        return this;\n    }\n\n    /**\n     * Draws a star shape centered at a specified location. This method allows for the creation\n     *  of stars with a variable number of points, outer radius, optional inner radius, and rotation.\n     * The star is drawn as a closed polygon with alternating outer and inner vertices to create the star's points.\n     * An optional transformation can be applied to scale, rotate, or translate the star as needed.\n     * @param x - The x-coordinate of the center of the star.\n     * @param y - The y-coordinate of the center of the star.\n     * @param points - The number of points of the star.\n     * @param radius - The outer radius of the star (distance from the center to the outer points).\n     * @param innerRadius - Optional. The inner radius of the star\n     * (distance from the center to the inner points between the outer points).\n     * If not provided, defaults to half of the `radius`.\n     * @param rotation - Optional. The rotation of the star in radians, where 0 is aligned with the y-axis.\n     * Defaults to 0, meaning one point is directly upward.\n     * @returns The instance of the current object for chaining further drawing commands.\n     */\n    public star(x: number, y: number, points: number, radius: number, innerRadius = 0, rotation = 0): this\n    {\n        this._tick++;\n\n        this._activePath.star(x, y, points, radius, innerRadius, rotation, this._transform.clone());\n\n        return this;\n    }\n\n    /**\n     * Parses and renders an SVG string into the graphics context. This allows for complex shapes and paths\n     * defined in SVG format to be drawn within the graphics context.\n     * @param svg - The SVG string to be parsed and rendered.\n     */\n    public svg(svg: string): this\n    {\n        this._tick++;\n\n        SVGParser(svg, this);\n\n        return this;\n    }\n\n    /**\n     * Restores the most recently saved graphics state by popping the top of the graphics state stack.\n     * This includes transformations, fill styles, and stroke styles.\n     */\n    public restore(): this\n    {\n        const state = this._stateStack.pop();\n\n        if (state)\n        {\n            this._transform = state.transform;\n            this._fillStyle = state.fillStyle;\n            this._strokeStyle = state.strokeStyle;\n        }\n\n        return this;\n    }\n\n    /** Saves the current graphics state, including transformations, fill styles, and stroke styles, onto a stack. */\n    public save(): this\n    {\n        this._stateStack.push({\n            transform: this._transform.clone(),\n            fillStyle: { ...this._fillStyle },\n            strokeStyle: { ...this._strokeStyle },\n        });\n\n        return this;\n    }\n\n    /**\n     * Returns the current transformation matrix of the graphics context.\n     * @returns The current transformation matrix.\n     */\n    public getTransform(): Matrix\n    {\n        return this._transform;\n    }\n\n    /**\n     * Resets the current transformation matrix to the identity matrix, effectively removing any transformations (rotation, scaling, translation) previously applied.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public resetTransform(): this\n    {\n        this._transform.identity();\n\n        return this;\n    }\n\n    /**\n     * Applies a rotation transformation to the graphics context around the current origin.\n     * @param angle - The angle of rotation in radians.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public rotate(angle: number): this\n    {\n        this._transform.rotate(angle);\n\n        return this;\n    }\n\n    /**\n     * Applies a scaling transformation to the graphics context, scaling drawings by x horizontally and by y vertically.\n     * @param x - The scale factor in the horizontal direction.\n     * @param y - (Optional) The scale factor in the vertical direction. If not specified, the x value is used for both directions.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public scale(x: number, y: number = x): this\n    {\n        this._transform.scale(x, y);\n\n        return this;\n    }\n\n    /**\n     * Sets the current transformation matrix of the graphics context to the specified matrix or values.\n     * This replaces the current transformation matrix.\n     * @param transform - The matrix to set as the current transformation matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setTransform(transform: Matrix): this;\n    /**\n     * Sets the current transformation matrix of the graphics context to the specified matrix or values.\n     * This replaces the current transformation matrix.\n     * @param a - The value for the a property of the matrix, or a Matrix object to use directly.\n     * @param b - The value for the b property of the matrix.\n     * @param c - The value for the c property of the matrix.\n     * @param d - The value for the d property of the matrix.\n     * @param dx - The value for the tx (translate x) property of the matrix.\n     * @param dy - The value for the ty (translate y) property of the matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public setTransform(a: number, b: number, c: number, d: number, dx: number, dy: number): this;\n    public setTransform(a: number | Matrix, b?: number, c?: number, d?: number, dx?: number, dy?: number): this\n    {\n        if (a instanceof Matrix)\n        {\n            this._transform.set(a.a, a.b, a.c, a.d, a.tx, a.ty);\n\n            return this;\n        }\n\n        this._transform.set(a, b, c, d, dx, dy);\n\n        return this;\n    }\n\n    /**\n     * Applies the specified transformation matrix to the current graphics context by multiplying\n     * the current matrix with the specified matrix.\n     * @param transform - The matrix to apply to the current transformation.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public transform(transform: Matrix): this;\n    /**\n     * Applies the specified transformation matrix to the current graphics context by multiplying\n     * the current matrix with the specified matrix.\n     * @param a - The value for the a property of the matrix, or a Matrix object to use directly.\n     * @param b - The value for the b property of the matrix.\n     * @param c - The value for the c property of the matrix.\n     * @param d - The value for the d property of the matrix.\n     * @param dx - The value for the tx (translate x) property of the matrix.\n     * @param dy - The value for the ty (translate y) property of the matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public transform(a: number, b: number, c: number, d: number, dx: number, dy: number): this;\n    public transform(a: number | Matrix, b?: number, c?: number, d?: number, dx?: number, dy?: number): this\n    {\n        if (a instanceof Matrix)\n        {\n            this._transform.append(a);\n\n            return this;\n        }\n\n        tempMatrix.set(a, b, c, d, dx, dy);\n        this._transform.append(tempMatrix);\n\n        return this;\n    }\n\n    /**\n     * Applies a translation transformation to the graphics context, moving the origin by the specified amounts.\n     * @param x - The amount to translate in the horizontal direction.\n     * @param y - (Optional) The amount to translate in the vertical direction. If not specified, the x value is used for both directions.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public translate(x: number, y: number = x): this\n    {\n        this._transform.translate(x, y);\n\n        return this;\n    }\n\n    /**\n     * Clears all drawing commands from the graphics context, effectively resetting it. This includes clearing the path,\n     * and optionally resetting transformations to the identity matrix.\n     * @returns The instance of the current GraphicsContext for method chaining.\n     */\n    public clear(): this\n    {\n        this._activePath.clear();\n        this.instructions.length = 0;\n        this.resetTransform();\n\n        this.onUpdate();\n\n        return this;\n    }\n\n    protected onUpdate(): void\n    {\n        if (this.dirty) return;\n\n        this.emit('update', this, 0x10);\n        this.dirty = true;\n        this._boundsDirty = true;\n    }\n\n    /** The bounds of the graphic shape. */\n    get bounds(): Bounds\n    {\n        if (!this._boundsDirty) return this._bounds;\n\n        this._boundsDirty = false;\n\n        // TODO switch to idy dirty with tick..\n        const bounds = this._bounds;\n\n        bounds.clear();\n\n        for (let i = 0; i < this.instructions.length; i++)\n        {\n            const instruction = this.instructions[i];\n            const action = instruction.action;\n\n            if (action === 'fill')\n            {\n                const data = instruction.data as FillInstruction['data'];\n\n                bounds.addBounds(data.path.bounds);\n            }\n            else if (action === 'texture')\n            {\n                const data = instruction.data as TextureInstruction['data'];\n\n                bounds.addFrame(data.dx, data.dy, data.dx + data.dw, data.dy + data.dh, data.transform);\n            }\n            if (action === 'stroke')\n            {\n                const data = instruction.data as StrokeInstruction['data'];\n\n                const alignment = data.style.alignment;\n\n                const outerPadding = (data.style.width * (1 - alignment));\n\n                const _bounds = data.path.bounds;\n\n                bounds.addFrame(\n                    _bounds.minX - outerPadding,\n                    _bounds.minY - outerPadding,\n                    _bounds.maxX + outerPadding,\n                    _bounds.maxY + outerPadding\n                );\n            }\n        }\n\n        return bounds;\n    }\n\n    /**\n     * Check to see if a point is contained within this geometry.\n     * @param point - Point to check if it's contained.\n     * @returns {boolean} `true` if the point is contained within geometry.\n     */\n    public containsPoint(point: PointData): boolean\n    {\n        // early out if the bounding box is not hit\n        if (!this.bounds.containsPoint(point.x, point.y)) return false;\n\n        const instructions = this.instructions;\n        let hasHit = false;\n\n        for (let k = 0; k < instructions.length; k++)\n        {\n            const instruction = instructions[k];\n\n            const data = instruction.data as FillInstruction['data'];\n            const path = data.path;\n\n            if (!instruction.action || !path) continue;\n\n            const style = data.style;\n            const shapes = path.shapePath.shapePrimitives;\n\n            for (let i = 0; i < shapes.length; i++)\n            {\n                const shape = shapes[i].shape;\n\n                if (!style || !shape) continue;\n\n                const transform = shapes[i].transform;\n\n                const transformedPoint = transform ? transform.applyInverse(point, tmpPoint) : point;\n\n                if (instruction.action === 'fill')\n                {\n                    hasHit = shape.contains(transformedPoint.x, transformedPoint.y);\n                }\n                else\n                {\n                    const strokeStyle = (style as ConvertedStrokeStyle);\n\n                    hasHit = shape.strokeContains(transformedPoint.x, transformedPoint.y, strokeStyle.width, strokeStyle.alignment);\n                }\n\n                const holes = data.hole;\n\n                if (holes)\n                {\n                    const holeShapes = holes.shapePath?.shapePrimitives;\n\n                    if (holeShapes)\n                    {\n                        for (let j = 0; j < holeShapes.length; j++)\n                        {\n                            if (holeShapes[j].shape.contains(transformedPoint.x, transformedPoint.y))\n                            {\n                                hasHit = false;\n                            }\n                        }\n                    }\n                }\n\n                if (hasHit)\n                {\n                    return true;\n                }\n            }\n        }\n\n        return hasHit;\n    }\n\n    /**\n     * Destroys the GraphicsData object.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @example\n     * context.destroy();\n     * context.destroy(true);\n     * context.destroy({ texture: true, textureSource: true });\n     */\n    public destroy(options: TypeOrBool<TextureDestroyOptions> = false): void\n    {\n        this._stateStack.length = 0;\n        this._transform = null;\n\n        this.emit('destroy', this);\n        this.removeAllListeners();\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyTextureSource = typeof options === 'boolean' ? options : options?.textureSource;\n\n            if (this._fillStyle.texture)\n            {\n                this._fillStyle.fill && 'uid' in this._fillStyle.fill\n                    ? this._fillStyle.fill.destroy()\n                    : this._fillStyle.texture.destroy(destroyTextureSource);\n            }\n\n            if (this._strokeStyle.texture)\n            {\n                this._strokeStyle.fill && 'uid' in this._strokeStyle.fill\n                    ? this._strokeStyle.fill.destroy()\n                    : this._strokeStyle.texture.destroy(destroyTextureSource);\n            }\n        }\n\n        this._fillStyle = null;\n        this._strokeStyle = null;\n\n        this.instructions = null;\n        this._activePath = null;\n        this._bounds = null;\n        this._stateStack = null;\n        this.customShader = null;\n        this._transform = null;\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 8991, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/text/TextStyle.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/text/TextStyle.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { Color, type ColorSource } from '../../color/Color';\nimport { type Filter } from '../../filters/Filter';\nimport { uid } from '../../utils/data/uid';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { warn } from '../../utils/logging/warn';\nimport { FillGradient } from '../graphics/shared/fill/FillGradient';\nimport { FillPattern } from '../graphics/shared/fill/FillPattern';\nimport { GraphicsContext } from '../graphics/shared/GraphicsContext';\nimport {\n    toFillStyle,\n    toStrokeStyle\n} from '../graphics/shared/utils/convertFillInputToFillStyle';\n\nimport type { TextureDestroyOptions, TypeOrBool } from '../container/destroyTypes';\nimport type {\n    ConvertedFillStyle,\n    ConvertedStrokeStyle,\n    FillInput,\n    FillStyle,\n    StrokeInput,\n    StrokeStyle\n} from '../graphics/shared/FillTypes';\n\n/**\n * The alignment of the text.\n *\n * - 'left': Aligns text to the left edge.\n * - 'center': Centers text horizontally.\n * - 'right': Aligns text to the right edge.\n * - 'justify': Justifies text, aligning both left and right edges.\n * @example\n * ```ts\n * import { TextStyle } from 'pixi.js';\n * const style = new TextStyle({\n *   align: 'center', // or 'left', 'right', 'justify'\n * });\n * ```\n * @category text\n * @standard\n */\nexport type TextStyleAlign = 'left' | 'center' | 'right' | 'justify';\n/**\n * The fill style input for text styles.\n *\n * This can be:\n * - A color string like 'red', '#00FF00', or 'rgba(255,0,0,0.5)'\n * - A hex number like 0xff0000 for red\n * - A FillStyle object with properties like { color: 0xff0000, alpha: 0.5 }\n * - A FillGradient for gradient fills\n * - A FillPattern for pattern/texture fills\n * @example\n * ```ts\n * // Simple Fills\n * new TextStyle({ fill: 'red' }); // Color string\n * new TextStyle({ fill: 0x00ff00 }); // Hex color\n * new TextStyle({ fill: 'rgb(255,0,0)' }); // RGB string\n * // Gradients\n * new TextStyle({\n *     fill: new FillGradient({\n *         end: { x: 1, y: 1 },\n *         stops: [\n *             { color: 0xff0000, offset: 0 }, // Red at start\n *             { color: 0x0000ff, offset: 1 }, // Blue at end\n *         ]\n *     }),\n * });\n * // Patterns\n * new TextStyle({\n *    fill: new FillPattern(Assets.get('pattern.png'))\n * });\n * ```\n * @category text\n * @standard\n */\nexport type TextStyleFill = string | string[] | number | number[] | CanvasGradient | CanvasPattern;\n/**\n * The font style input for text styles. Controls the slant or italicization of the text.\n * @example\n * ```ts\n * // Create text with normal font style\n * const normalText = new Text({\n *     text: 'Normal Style Text',\n *     style: {\n *         fontStyle: 'normal',\n *         fontSize: 24\n *     }\n * });\n *\n * // Create italic text\n * const italicText = new Text({\n *     text: 'Italic Style Text',\n *     style: {\n *         fontStyle: 'italic',\n *         fontSize: 24,\n *         fontFamily: 'Arial'\n *     }\n * });\n *\n * // Create oblique text\n * const obliqueText = new Text({\n *     text: 'Oblique Style Text',\n *     style: {\n *         fontStyle: 'oblique',\n *         fontSize: 24,\n *         fontFamily: 'Times New Roman'\n *     }\n * });\n *\n * // Dynamic style changes\n * let isItalic = false;\n * text.style = {\n *     ...text.style,\n *     fontStyle: isItalic ? 'italic' : 'normal'\n * };\n * ```\n *\n * Supported values:\n * - 'normal': Regular upright text with no slant\n * - 'italic': True italics using specifically designed italic glyphs\n * - 'oblique': Slanted version of the regular glyphs\n * @remarks\n * - 'italic' uses specially designed glyphs with cursive characteristics\n * - 'oblique' is a mechanical slant of the normal glyphs\n * - Not all fonts include true italic designs; some may fall back to oblique\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/font-style | MDN font-style}\n * @category text\n * @standard\n */\nexport type TextStyleFontStyle = 'normal' | 'italic' | 'oblique';\n/**\n * The font variant input for text styles. Controls the capitalization and presentation of letters.\n * Used to enable special rendering like small caps.\n * @example\n * ```ts\n * // Create text with normal font variant\n * const normalText = new Text({\n *     text: 'Normal Text',\n *     style: {\n *         fontVariant: 'normal',\n *         fontSize: 24\n *     }\n * });\n *\n * // Create text with small-caps variant\n * const smallCapsText = new Text({\n *     text: 'Small Caps Text',\n *     style: {\n *         fontVariant: 'small-caps',\n *         fontSize: 24,\n *         fontFamily: 'Arial'\n *     }\n * });\n *\n * // Use in a TextStyle instance\n * const style = new TextStyle({\n *     fontVariant: 'small-caps',\n *     fontSize: 32,\n *     fill: 0x4a4a4a\n * });\n *\n * // Update variant dynamically\n * text.style = {\n *     ...text.style,\n *     fontVariant: text.style.fontVariant === 'normal' ? 'small-caps' : 'normal'\n * };\n * ```\n *\n * Supported values:\n * - 'normal': Regular text rendering with standard capitalization\n * - 'small-caps': Renders lowercase letters as smaller versions of capital letters\n * @remarks\n * Small caps are only available if the font supports them.\n * Not all fonts include true small caps glyphs.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant | MDN font-variant}\n * @category text\n * @standard\n */\nexport type TextStyleFontVariant = 'normal' | 'small-caps';\n/**\n * The font weight input for text styles. Controls the thickness or boldness of the text.\n * @example\n * ```ts\n * // Create text with different font weights\n * const normalText = new Text({\n *     text: 'Normal Weight',\n *     style: { fontWeight: 'normal' }\n * });\n *\n * const boldText = new Text({\n *     text: 'Bold Weight',\n *     style: { fontWeight: 'bold' }\n * });\n *\n * // Using numeric weights\n * const lightText = new Text({\n *     text: 'Light Weight',\n *     style: { fontWeight: '300' }\n * });\n *\n * const mediumText = new Text({\n *     text: 'Medium Weight',\n *     style: { fontWeight: '500' }\n * });\n *\n * const heavyText = new Text({\n *     text: 'Heavy Weight',\n *     style: { fontWeight: '900' }\n * });\n *\n * // Responsive weight changes\n * const adaptiveText = new Text({\n *     text: 'Adaptive Weight',\n *     style: { fontWeight: window.innerWidth > 600 ? 'bold' : 'normal' }\n * });\n * ```\n *\n * Supported values:\n * - 'normal': Standard weight (equivalent to 400)\n * - 'bold': Bold weight (equivalent to 700)\n * - 'bolder': One weight darker than the parent element\n * - 'lighter': One weight lighter than the parent element\n * - '100': Thin (Hairline)\n * - '200': Extra Light (Ultra Light)\n * - '300': Light\n * - '400': Normal\n * - '500': Medium\n * - '600': Semi Bold (Demi Bold)\n * - '700': Bold\n * - '800': Extra Bold (Ultra Bold)\n * - '900': Heavy (Black)\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight | MDN font-weight}\n * @category text\n * @standard\n */\nexport type TextStyleFontWeight =\n    | 'normal' // Standard weight (400)\n    | 'bold' // Bold weight (700)\n    | 'bolder' // Relative weight increase\n    | 'lighter' // Relative weight decrease\n    | '100' // Thin\n    | '200' // Extra Light\n    | '300' // Light\n    | '400' // Normal\n    | '500' // Medium\n    | '600' // Semi Bold\n    | '700' // Bold\n    | '800' // Extra Bold\n    | '900'; // Heavy\n/**\n * The line join style for text strokes. Determines how lines connect at corners.\n * @example\n * ```ts\n * // Create text with miter joins (sharp corners)\n * const sharpText = new Text({\n *     text: 'Sharp Corners',\n *     style: {\n *         fontSize: 36,\n *         stroke: {\n *             color: '#4a1850',\n *             width: 4,\n *             lineJoin: 'miter'  // Sharp corners\n *         }\n *     }\n * });\n *\n * // Create text with round joins\n * const roundText = new Text({\n *     text: 'Rounded Corners',\n *     style: {\n *         fontSize: 36,\n *         stroke: {\n *             color: '#4a1850',\n *             width: 4,\n *             lineJoin: 'round'  // Smooth rounded corners\n *         }\n *     }\n * });\n *\n * // Create text with beveled joins\n * const bevelText = new Text({\n *     text: 'Beveled Corners',\n *     style: {\n *         fontSize: 36,\n *         stroke: {\n *             color: '#4a1850',\n *             width: 4,\n *             lineJoin: 'bevel'  // Flattened corners\n *         }\n *     }\n * });\n * ```\n * Available values:\n * - 'miter': Creates sharp corners by extending the outer edges until they meet\n * - 'round': Creates smooth, rounded corners using a circular arc\n * - 'bevel': Creates flattened corners by filling an additional triangle between the outer edges\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin | MDN lineJoin}\n * @category text\n * @standard\n */\nexport type TextStyleLineJoin = 'miter' | 'round' | 'bevel';\n/**\n * The text baseline for text styles.\n *\n * This can be:\n * - 'alphabetic': The alphabetic baseline\n * - 'top': The top of the text\n * - 'hanging': The hanging baseline\n * - 'middle': The middle of the text\n * - 'ideographic': The ideographic baseline\n * - 'bottom': The bottom of the text\n * @category text\n * @standard\n */\nexport type TextStyleTextBaseline = 'alphabetic' | 'top' | 'hanging' | 'middle' | 'ideographic' | 'bottom';\n/**\n * Controls how whitespace (spaces, tabs, and line breaks) is handled within the text.\n * This affects text wrapping and spacing behavior.\n * @example\n * ```ts\n * // Normal mode (collapse spaces and newlines)\n * const normalText = new Text({\n *     text: 'Hello    World\\n\\nNew Line',\n *     style: {\n *         whiteSpace: 'normal',\n *         fontSize: 24\n *     }\n * }); // Renders as: \"Hello World New Line\"\n *\n * // Pre mode (preserve all whitespace)\n * const preText = new Text({\n *     text: 'Hello    World\\n\\nNew Line',\n *     style: {\n *         whiteSpace: 'pre',\n *         fontSize: 24\n *     }\n * }); // Preserves spaces and line breaks exactly\n *\n * // Pre-line mode (preserve newlines, collapse spaces)\n * const preLineText = new Text({\n *     text: 'Hello    World\\n\\nNew Line',\n *     style: {\n *         whiteSpace: 'pre-line',\n *         fontSize: 24\n *     }\n * }); // Preserves line breaks, collapses multiple spaces\n *\n * // With word wrap enabled\n * const wrappedText = new Text({\n *     text: 'A long text with    multiple spaces\\nand line breaks',\n *     style: {\n *         whiteSpace: 'pre-line',\n *         wordWrap: true,\n *         wordWrapWidth: 200,\n *         fontSize: 24\n *     }\n * });\n * ```\n *\n * Supported values:\n * - 'normal': Collapses all whitespace (spaces, tabs, line breaks) into a single space\n * - 'pre': Preserves all whitespace characters exactly as written\n * - 'pre-line': Preserves line breaks but collapses multiple spaces into a single space\n * @remarks\n * - 'normal' is best for single-line text or when you want to ignore formatting\n * - 'pre' is useful for code blocks or when exact spacing is important\n * - 'pre-line' is good for formatted text where you want to keep line breaks but clean up spaces\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/CSS/white-space | MDN white-space}\n * @see {@link TextStyle#wordWrap} For controlling text wrapping\n * @category text\n * @standard\n */\nexport type TextStyleWhiteSpace = 'normal' | 'pre' | 'pre-line';\n\n/**\n * Defines a drop shadow effect for text rendering.\n * Drop shadows add depth and emphasis to text by creating a shadow offset from the text.\n * @example\n * ```ts\n * // Create text with basic drop shadow\n * const text = new Text({\n *     text: 'Shadow Text',\n *     style: {\n *         fontSize: 48,\n *         dropShadow: {\n *             alpha: 0.5,         // 50% opacity shadow\n *             angle: Math.PI / 6, // 30 degrees\n *             blur: 4,            // Soft shadow edge\n *             color: '#000000',   // Black shadow\n *             distance: 6         // Shadow offset\n *         }\n *     }\n * });\n *\n * // Dynamic shadow updates\n * text.style.dropShadow = {\n *     alpha: Math.sin(Date.now() / 1000) * 0.5 + 0.5, // Pulsing opacity\n *     angle: Date.now() / 1000,                        // Rotating angle\n *     blur: 4,\n *     color: '#000000',\n *     distance: 6\n * };\n * ```\n * @category text\n * @standard\n */\nexport type TextDropShadow = {\n    /**\n     * The opacity of the drop shadow.\n     * - Range: 0 to 1\n     * - 0 = fully transparent\n     * - 1 = fully opaque\n     * @example\n     * ```ts\n     * // Set drop shadow opacity to 50%\n     * dropShadow: {\n     *    alpha: 0.5\n     * }\n     * ```\n     * @default 1\n     */\n    alpha: number;\n\n    /**\n     * The angle of the drop shadow in radians.\n     * - 0 = right\n     * - Math.PI/2 = down\n     * - Math.PI = left\n     * - Math.PI*1.5 = up\n     * @example\n     * ```ts\n     * // Set drop shadow angle to 30 degrees\n     * dropShadow: {\n     *    angle: Math.PI / 6 // 30 degrees\n     * }\n     * ```\n     * @default Math.PI/6 (30 degrees)\n     */\n    angle: number;\n\n    /**\n     * The blur radius of the shadow.\n     * - 0 = sharp shadow\n     * - Higher values = softer shadow\n     * @example\n     * ```ts\n     * // Set drop shadow blur radius to 10 pixels\n     * dropShadow: {\n     *   blur: 10\n     * }\n     * ```\n     * @default 0\n     */\n    blur: number;\n\n    /**\n     * The color of the drop shadow.\n     * Accepts any valid CSS color string, hex number, or RGB/RGBA values.\n     * @example '#000000', 'rgba(0,0,0,0.5)', 0x000000\n     * @default 'black'\n     */\n    color: ColorSource;\n\n    /**\n     * The distance of the drop shadow from the text.\n     * Measured in pixels.\n     * @example\n     * ```ts\n     * // Set drop shadow distance to 5 pixels\n     * dropShadow: {\n     *   distance: 5\n     * }\n     * ```\n     * @default 5\n     */\n    distance: number;\n};\n\n/**\n * Constructor options used for `TextStyle` instances. Defines the visual appearance and layout of text.\n * @example\n * ```ts\n * // Basic text style\n * const basicStyle = new TextStyle({\n *     fontSize: 24,\n *     fill: 'black',\n *     fontFamily: 'Arial'\n * });\n *\n * // Rich text style with multiple features\n * const richStyle = new TextStyle({\n *     fontFamily: ['Arial', 'Helvetica', 'sans-serif'],\n *     fontSize: 36,\n *     fontWeight: 'bold',\n *     fill: 'red',\n *     stroke: { color: '#4a1850', width: 5 },\n *     align: 'center',\n *     dropShadow: {\n *         color: '#000000',\n *         blur: 4,\n *         distance: 6,\n *         angle: Math.PI / 6\n *     },\n *     wordWrap: true,\n *     wordWrapWidth: 440,\n *     lineHeight: 40,\n *     textBaseline: 'middle'\n * });\n * ```\n * @see {@link TextStyle} For the main style class\n * @category text\n * @standard\n */\nexport interface TextStyleOptions\n{\n    /**\n     * Alignment for multiline text, does not affect single line text\n     * @default 'left'\n     */\n    align?: TextStyleAlign;\n    /**\n     * Whether to allow line breaks within words.\n     * Requires wordWrap to be true.\n     * @example\n     * ```ts\n     * // Enable word breaking\n     * const style = new TextStyle({\n     *    breakWords: true,\n     *    wordWrap: true,\n     *    wordWrapWidth: 200\n     * });\n     * ```\n     * @default false\n     */\n    breakWords?: boolean;\n    /**\n     * Drop shadow configuration for the text.\n     * Can be boolean or a TextDropShadow object.\n     * @default null\n     */\n    dropShadow?: boolean | Partial<TextDropShadow>;\n    /**\n     * Fill style for the text.\n     * Can be a color, gradient, or pattern.\n     * @default 'black'\n     */\n    fill?: FillInput;\n    /**\n     * Font family or families to use.\n     * Can be single name or array of fallbacks.\n     * @example\n     * ```ts\n     * // Single font family\n     * fontFamily: 'Arial'\n     * // Multiple font families\n     * fontFamily: ['Helvetica', 'Arial', 'sans-serif']\n     * ```\n     * @default 'Arial'\n     */\n    fontFamily?: string | string[];\n    /**\n     * Font size in pixels or as string.\n     *\n     * Equivalents are '26px','20pt','160%' or '1.6em')\n     * @example\n     * ```ts\n     * // Numeric size\n     * fontSize: 26\n     * // String size\n     * fontSize: '26px'\n     * // Percentage size\n     * fontSize: '160%' // 1.6 times the parent element's font size\n     * // Em size\n     * fontSize: '1.6em' // 1.6 times the parent element's font size\n     * @default 26\n     */\n    fontSize?: number | string;\n    /**\n     * Font style (normal, italic, oblique).\n     * @default 'normal'\n     */\n    fontStyle?: TextStyleFontStyle;\n    /**\n     * Font variant (normal, small-caps).\n     * @default 'normal'\n     */\n    fontVariant?: TextStyleFontVariant;\n    /**\n     * Font weight (normal, bold, bolder, lighter, 100-900).\n     * @default 'normal'\n     */\n    fontWeight?: TextStyleFontWeight;\n    /** The height of the line, a number that represents the vertical space that a letter uses. */\n    leading?: number;\n    /** The amount of spacing between letters, default is 0 */\n    letterSpacing?: number;\n    /** The line height, a number that represents the vertical space that a letter uses */\n    lineHeight?: number;\n    /**\n     * Padding around the text.\n     *\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from\n     * happening by adding padding to all sides of the text.\n     */\n    padding?: number;\n    /**\n     * Stroke style for text outline.\n     * @default null\n     */\n    stroke?: StrokeInput;\n    /**\n     * Vertical alignment baseline.\n     * @default 'alphabetic'\n     */\n    textBaseline?: TextStyleTextBaseline;\n    /**\n     * Whether to trim transparent edges.\n     * > [!NOTE] This is an expensive operation and should only be used when necessary.\n     * @default false\n     */\n    trim?: boolean;\n    /**\n     * How to handle whitespace.\n     *\n     * It needs wordWrap to be set to true for this to have an effect.\n     * @default 'pre'\n     */\n    whiteSpace?: TextStyleWhiteSpace;\n    /** Indicates if word wrap should be used */\n    wordWrap?: boolean;\n    /** The width at which text will wrap, it needs wordWrap to be set to true */\n    wordWrapWidth?: number;\n    /**\n     * Array of filters to apply to the text.\n     *\n     * These filters will be applied to the text as it is created, resulting in faster rendering for static text\n     * compared to applying the filter directly to the text object (which would be applied at run time).\n     * @default undefined\n     */\n    filters?: Filter[] | readonly Filter[];\n}\n\n/**\n * A TextStyle Object contains information to decorate Text objects.\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n * @example\n * ```ts\n * // Create a basic text style\n * const style = new TextStyle({\n *     fontFamily: ['Helvetica', 'Arial', 'sans-serif'],\n *     fontSize: 36,\n *     fill: 0xff1010,\n *     align: 'center'\n * });\n *\n * // Create a rich text style with multiple features\n * const richStyle = new TextStyle({\n *     fontFamily: 'Arial',\n *     fontSize: 32,\n *     fill: 'white',\n *     stroke: {\n *         color: '#4a1850',\n *         width: 5\n *     },\n *     dropShadow: {\n *         color: '#000000',\n *         blur: 4,\n *         distance: 6,\n *         angle: Math.PI / 6\n *     },\n *     wordWrap: true,\n *     wordWrapWidth: 440,\n *     lineHeight: 40,\n *     align: 'center'\n * });\n *\n * // Share style between multiple text objects\n * const text1 = new Text({\n *     text: 'Hello',\n *     style: richStyle\n * });\n *\n * const text2 = new Text({\n *     text: 'World',\n *     style: richStyle\n * });\n *\n * // Update style dynamically - affects all text objects\n * richStyle.fontSize = 48;\n * richStyle.fill = 0x00ff00;\n * ```\n *\n * Key Features:\n * - Shared styling between multiple text objects\n * - Rich text formatting options\n * - Gradient and pattern fills\n * - Drop shadows and strokes\n * - Word wrapping and alignment\n * - Dynamic updates\n * @category text\n * @standard\n */\nexport class TextStyle extends EventEmitter<{\n    update: TextDropShadow\n}>\n{\n    /**\n     * Default drop shadow settings used when enabling drop shadows on text.\n     * These values are used as the base configuration when drop shadows are enabled without specific settings.\n     * @example\n     * ```ts\n     * // Customize default settings globally\n     * TextStyle.defaultDropShadow.alpha = 0.5;    // 50% opacity for all shadows\n     * TextStyle.defaultDropShadow.blur = 2;       // 2px blur for all shadows\n     * TextStyle.defaultDropShadow.color = 'blue'; // Blue shadows by default\n     * ```\n     */\n    public static defaultDropShadow: TextDropShadow = {\n        alpha: 1,\n        angle: Math.PI / 6,\n        blur: 0,\n        color: 'black',\n        distance: 5,\n    };\n\n    /**\n     * Unique identifier for the TextStyle class.\n     * This is used to track instances and ensure uniqueness.\n     * @internal\n     */\n    public uid = uid('textStyle');\n    /**\n     * Internal tick counter used to track updates and changes.\n     * This is incremented whenever the style is modified, allowing for efficient change detection.\n     * @internal\n     */\n    public _tick = 0;\n\n    /**\n     * Default text style settings used when creating new text objects.\n     * These values serve as the base configuration and can be customized globally.\n     * @example\n     * ```ts\n     * // Customize default text style globally\n     * TextStyle.defaultTextStyle.fontSize = 16;\n     * TextStyle.defaultTextStyle.fill = 0x333333;\n     * TextStyle.defaultTextStyle.fontFamily = ['Arial', 'Helvetica', 'sans-serif'];\n     * ```\n     */\n    public static defaultTextStyle: TextStyleOptions = {\n        align: 'left',\n        breakWords: false,\n        dropShadow:  null,\n        fill: 'black',\n        fontFamily: 'Arial',\n        fontSize: 26,\n        fontStyle: 'normal',\n        fontVariant: 'normal',\n        fontWeight: 'normal',\n        leading: 0,\n        letterSpacing: 0,\n        lineHeight: 0,\n        padding: 0,\n        stroke: null,\n        textBaseline: 'alphabetic',\n        trim: false,\n        whiteSpace: 'pre',\n        wordWrap: false,\n        wordWrapWidth: 100,\n    };\n\n    // colors!!\n    /** @internal */\n    public _fill: ConvertedFillStyle;\n    private _originalFill: FillInput;\n\n    /** @internal */\n    public _stroke: ConvertedStrokeStyle;\n    private _originalStroke: StrokeInput;\n\n    private _dropShadow: TextDropShadow;\n\n    private _fontFamily: string | string[];\n    private _fontSize: number;\n    private _fontStyle: TextStyleFontStyle;\n    private _fontVariant: TextStyleFontVariant;\n    private _fontWeight: TextStyleFontWeight;\n\n    private _breakWords: boolean;\n    private _align: TextStyleAlign;\n    private _leading: number;\n    private _letterSpacing: number;\n    private _lineHeight: number;\n\n    private _textBaseline: TextStyleTextBaseline;\n    private _whiteSpace: TextStyleWhiteSpace;\n    private _wordWrap: boolean;\n    private _wordWrapWidth: number;\n    private _filters: readonly Filter[];\n\n    private _padding: number;\n\n    private _trim: boolean;\n\n    constructor(style: Partial<TextStyleOptions> = {})\n    {\n        super();\n\n        convertV7Tov8Style(style);\n\n        const fullStyle = { ...TextStyle.defaultTextStyle, ...style };\n\n        for (const key in fullStyle)\n        {\n            const thisKey = key as keyof typeof this;\n\n            this[thisKey] = fullStyle[key as keyof TextStyleOptions] as any;\n        }\n\n        this.update();\n        this._tick = 0;\n    }\n\n    /**\n     * Alignment for multiline text, does not affect single line text.\n     * @type {'left'|'center'|'right'|'justify'}\n     */\n    get align(): TextStyleAlign { return this._align; }\n    set align(value: TextStyleAlign) { this._align = value; this.update(); }\n    /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n    get breakWords(): boolean { return this._breakWords; }\n    set breakWords(value: boolean) { this._breakWords = value; this.update(); }\n    /** Set a drop shadow for the text. */\n    get dropShadow(): TextDropShadow { return this._dropShadow; }\n    set dropShadow(value: boolean | TextDropShadow)\n    {\n        if (value !== null && typeof value === 'object')\n        {\n            this._dropShadow = this._createProxy({ ...TextStyle.defaultDropShadow, ...value });\n        }\n        else\n        {\n            this._dropShadow = value ? this._createProxy({ ...TextStyle.defaultDropShadow }) : null;\n        }\n\n        this.update();\n    }\n    /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n    get fontFamily(): string | string[] { return this._fontFamily; }\n    set fontFamily(value: string | string[]) { this._fontFamily = value; this.update(); }\n    /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n    get fontSize(): number { return this._fontSize; }\n    set fontSize(value: string | number)\n    {\n        if (typeof value === 'string')\n        {\n            // eg '34px' to number\n            this._fontSize = parseInt(value as string, 10);\n        }\n        else\n        {\n            this._fontSize = value as number;\n        }\n        this.update();\n    }\n    /**\n     * The font style.\n     * @type {'normal'|'italic'|'oblique'}\n     */\n    get fontStyle(): TextStyleFontStyle { return this._fontStyle; }\n    set fontStyle(value: TextStyleFontStyle)\n    {\n        this._fontStyle = value.toLowerCase() as TextStyleFontStyle;\n        this.update();\n    }\n    /**\n     * The font variant.\n     * @type {'normal'|'small-caps'}\n     */\n    get fontVariant(): TextStyleFontVariant { return this._fontVariant; }\n    set fontVariant(value: TextStyleFontVariant) { this._fontVariant = value; this.update(); }\n    /**\n     * The font weight.\n     * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n     */\n    get fontWeight(): TextStyleFontWeight { return this._fontWeight; }\n    set fontWeight(value: TextStyleFontWeight) { this._fontWeight = value; this.update(); }\n    /** The space between lines. */\n    get leading(): number { return this._leading; }\n    set leading(value: number) { this._leading = value; this.update(); }\n    /** The amount of spacing between letters, default is 0. */\n    get letterSpacing(): number { return this._letterSpacing; }\n    set letterSpacing(value: number) { this._letterSpacing = value; this.update(); }\n    /** The line height, a number that represents the vertical space that a letter uses. */\n    get lineHeight(): number { return this._lineHeight; }\n    set lineHeight(value: number) { this._lineHeight = value; this.update(); }\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     * > [!NOTE] This will NOT affect the positioning or bounds of the text.\n     */\n    get padding(): number { return this._padding; }\n    set padding(value: number) { this._padding = value; this.update(); }\n    /**\n     * An optional filter or array of filters to apply to the text, allowing for advanced visual effects.\n     * These filters will be applied to the text as it is created, resulting in faster rendering for static text\n     * compared to applying the filter directly to the text object (which would be applied at run time).\n     * @default null\n     */\n    get filters(): readonly Filter[] { return this._filters; }\n    set filters(value: Filter[]) { this._filters = Object.freeze(value); this.update(); }\n\n    /**\n     * Trim transparent borders from the text texture.\n     * > [!IMPORTANT] PERFORMANCE WARNING:\n     * > This is a costly operation as it requires scanning pixel alpha values.\n     * > Avoid using `trim: true` for dynamic text, as it could significantly impact performance.\n     */\n    get trim(): boolean { return this._trim; }\n    set trim(value: boolean) { this._trim = value; this.update(); }\n    /**\n     * The baseline of the text that is rendered.\n     * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n     */\n    get textBaseline(): TextStyleTextBaseline { return this._textBaseline; }\n    set textBaseline(value: TextStyleTextBaseline) { this._textBaseline = value; this.update(); }\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     * @type {'normal'|'pre'|'pre-line'}\n     */\n    get whiteSpace(): TextStyleWhiteSpace { return this._whiteSpace; }\n    set whiteSpace(value: TextStyleWhiteSpace) { this._whiteSpace = value; this.update(); }\n    /** Indicates if word wrap should be used. */\n    get wordWrap(): boolean { return this._wordWrap; }\n    set wordWrap(value: boolean) { this._wordWrap = value; this.update(); }\n    /** The width at which text will wrap, it needs wordWrap to be set to true. */\n    get wordWrapWidth(): number { return this._wordWrapWidth; }\n    set wordWrapWidth(value: number) { this._wordWrapWidth = value; this.update(); }\n\n    /**\n     * The fill style that will be used to color the text.\n     * This can be:\n     * - A color string like 'red', '#00FF00', or 'rgba(255,0,0,0.5)'\n     * - A hex number like 0xff0000 for red\n     * - A FillStyle object with properties like { color: 0xff0000, alpha: 0.5 }\n     * - A FillGradient for gradient fills\n     * - A FillPattern for pattern/texture fills\n     *\n     * When using a FillGradient, vertical gradients (angle of 90 degrees) are applied per line of text,\n     * while gradients at any other angle are spread across the entire text body as a whole.\n     * @example\n     * // Vertical gradient applied per line\n     * const verticalGradient = new FillGradient(0, 0, 0, 1)\n     *     .addColorStop(0, 0xff0000)\n     *     .addColorStop(1, 0x0000ff);\n     *\n     * const text = new Text({\n     *     text: 'Line 1\\nLine 2',\n     *     style: { fill: verticalGradient }\n     * });\n     *\n     * To manage the gradient in a global scope, set the textureSpace property of the FillGradient to 'global'.\n     * @type {string|number|FillStyle|FillGradient|FillPattern}\n     */\n    get fill(): FillInput\n    {\n        return this._originalFill;\n    }\n\n    set fill(value: FillInput)\n    {\n        if (value === this._originalFill) return;\n\n        this._originalFill = value;\n\n        if (this._isFillStyle(value))\n        {\n            this._originalFill = this._createProxy({ ...GraphicsContext.defaultFillStyle, ...value }, () =>\n            {\n                this._fill = toFillStyle(\n                    { ...this._originalFill as FillStyle },\n                    GraphicsContext.defaultFillStyle\n                );\n            });\n        }\n\n        this._fill = toFillStyle(\n            value === 0x0 ? 'black' : value,\n            GraphicsContext.defaultFillStyle\n        );\n        this.update();\n    }\n\n    /** A fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00'. */\n    get stroke(): StrokeInput\n    {\n        return this._originalStroke;\n    }\n\n    set stroke(value: StrokeInput)\n    {\n        if (value === this._originalStroke) return;\n\n        this._originalStroke = value;\n\n        if (this._isFillStyle(value))\n        {\n            this._originalStroke = this._createProxy({ ...GraphicsContext.defaultStrokeStyle, ...value }, () =>\n            {\n                this._stroke = toStrokeStyle(\n                    { ...this._originalStroke as StrokeStyle },\n                    GraphicsContext.defaultStrokeStyle\n                );\n            });\n        }\n\n        this._stroke = toStrokeStyle(value, GraphicsContext.defaultStrokeStyle);\n        this.update();\n    }\n\n    public update()\n    {\n        this._tick++;\n        this.emit('update', this);\n    }\n\n    /** Resets all properties to the default values */\n    public reset()\n    {\n        const defaultStyle = TextStyle.defaultTextStyle;\n\n        for (const key in defaultStyle)\n        {\n            this[key as keyof typeof this] = defaultStyle[key as keyof TextStyleOptions] as any;\n        }\n    }\n\n    /**\n     * Returns a unique key for this instance.\n     * This key is used for caching.\n     * @returns {string} Unique key for the instance\n     */\n    public get styleKey(): string\n    {\n        return `${this.uid}-${this._tick}`;\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * @returns New cloned TextStyle object\n     */\n    public clone(): TextStyle\n    {\n        return new TextStyle({\n            align: this.align,\n            breakWords: this.breakWords,\n            dropShadow: this._dropShadow ? { ...this._dropShadow } : null,\n            fill: this._fill,\n            fontFamily: this.fontFamily,\n            fontSize: this.fontSize,\n            fontStyle: this.fontStyle,\n            fontVariant: this.fontVariant,\n            fontWeight: this.fontWeight,\n            leading: this.leading,\n            letterSpacing: this.letterSpacing,\n            lineHeight: this.lineHeight,\n            padding: this.padding,\n            stroke: this._stroke,\n            textBaseline: this.textBaseline,\n            whiteSpace: this.whiteSpace,\n            wordWrap: this.wordWrap,\n            wordWrapWidth: this.wordWrapWidth,\n            filters: this._filters ? [...this._filters] : undefined,\n        });\n    }\n\n    /**\n     * Returns the final padding for the text style, taking into account any filters applied.\n     * Used internally for correct measurements\n     * @internal\n     * @returns {number} The final padding for the text style.\n     */\n    public _getFinalPadding(): number\n    {\n        let filterPadding = 0;\n\n        if (this._filters)\n        {\n            for (let i = 0; i < this._filters.length; i++)\n            {\n                filterPadding += this._filters[i].padding;\n            }\n        }\n\n        return Math.max(this._padding, filterPadding);\n    }\n\n    /**\n     * Destroys this text style.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @example\n     * // Destroy the text style and its textures\n     * textStyle.destroy({ texture: true, textureSource: true });\n     * textStyle.destroy(true);\n     */\n    public destroy(options: TypeOrBool<TextureDestroyOptions> = false)\n    {\n        this.removeAllListeners();\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyTextureSource = typeof options === 'boolean' ? options : options?.textureSource;\n\n            if (this._fill?.texture)\n            {\n                this._fill.texture.destroy(destroyTextureSource);\n            }\n\n            if ((this._originalFill as FillStyle)?.texture)\n            {\n                (this._originalFill as FillStyle).texture.destroy(destroyTextureSource);\n            }\n\n            if (this._stroke?.texture)\n            {\n                this._stroke.texture.destroy(destroyTextureSource);\n            }\n\n            if ((this._originalStroke as FillStyle)?.texture)\n            {\n                (this._originalStroke as FillStyle).texture.destroy(destroyTextureSource);\n            }\n        }\n\n        this._fill = null;\n        this._stroke = null;\n        this.dropShadow = null;\n        this._originalStroke = null;\n        this._originalFill = null;\n    }\n\n    private _createProxy<T extends object>(value: T, cb?: (property: string, newValue: any) => void): T\n    {\n        return new Proxy<T>(value, {\n            set: (target, property, newValue) =>\n            {\n                target[property as keyof T] = newValue;\n                cb?.(property as string, newValue);\n                this.update();\n\n                return true;\n            }\n        });\n    }\n\n    private _isFillStyle(value: FillInput): value is FillStyle\n    {\n        return ((value ?? null) !== null\n            && !(Color.isColorLike(value) || value instanceof FillGradient || value instanceof FillPattern));\n    }\n}\n\nfunction convertV7Tov8Style(style: TextStyleOptions)\n{\n    const oldStyle = style as TextStyleOptions & {\n        dropShadowAlpha?: number;\n        dropShadowAngle?: number;\n        dropShadowBlur?: number;\n        dropShadowColor?: number;\n        dropShadowDistance?: number;\n        fillGradientStops?: number[];\n        strokeThickness?: number;\n    };\n\n    if (typeof oldStyle.dropShadow === 'boolean' && oldStyle.dropShadow)\n    {\n        const defaults = TextStyle.defaultDropShadow;\n\n        style.dropShadow = {\n            alpha: oldStyle.dropShadowAlpha ?? defaults.alpha,\n            angle: oldStyle.dropShadowAngle ?? defaults.angle,\n            blur: oldStyle.dropShadowBlur ?? defaults.blur,\n            color: oldStyle.dropShadowColor ?? defaults.color,\n            distance:   oldStyle.dropShadowDistance ?? defaults.distance,\n        };\n    }\n\n    if (oldStyle.strokeThickness !== undefined)\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'strokeThickness is now a part of stroke');\n        // #endif\n\n        const color = oldStyle.stroke;\n        let obj: FillStyle = {};\n\n        // handles stroke: 0x0, stroke: { r: 0, g: 0, b: 0, a: 0 } stroke: new Color(0x0)\n        if (Color.isColorLike(color as ColorSource))\n        {\n            obj.color = color as ColorSource;\n        }\n        // handles stroke: new FillGradient()\n        else if (color instanceof FillGradient || color instanceof FillPattern)\n        {\n            obj.fill = color as FillGradient | FillPattern;\n        }\n        // handles stroke: { color: 0x0 } or stroke: { fill: new FillGradient() }\n        else if (Object.hasOwnProperty.call(color, 'color') || Object.hasOwnProperty.call(color, 'fill'))\n        {\n            obj = color as FillStyle;\n        }\n        else\n        {\n            throw new Error('Invalid stroke value.');\n        }\n\n        style.stroke = {\n            ...obj,\n            width: oldStyle.strokeThickness\n        };\n    }\n\n    if (Array.isArray(oldStyle.fillGradientStops))\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'gradient fill is now a fill pattern: `new FillGradient(...)`');\n        // #endif\n\n        if (!Array.isArray(oldStyle.fill) || oldStyle.fill.length === 0)\n        {\n            throw new Error('Invalid fill value. Expected an array of colors for gradient fill.');\n        }\n\n        if (oldStyle.fill.length !== oldStyle.fillGradientStops.length)\n        {\n            // #if _DEBUG\n            warn('The number of fill colors must match the number of fill gradient stops.');\n            // #endif\n        }\n\n        const gradientFill = new FillGradient({\n            start: { x: 0, y: 0 },\n            end: { x: 0, y: 1 },\n            textureSpace: 'local',\n        });\n\n        const fillGradientStops = oldStyle.fillGradientStops.slice();\n        const fills: number[] = oldStyle.fill\n            .map((color: ColorSource) => Color.shared.setValue(color).toNumber());\n\n        fillGradientStops.forEach((stop, index) =>\n        {\n            gradientFill.addColorStop(stop, fills[index]);\n        });\n\n        style.fill = {\n            fill: gradientFill\n        };\n    }\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 9500, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/text/canvas/utils/getCanvasFillStyle.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/text/canvas/utils/getCanvasFillStyle.ts"],"sourcesContent":["import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { warn } from '../../../../utils/logging/warn';\nimport { FillGradient } from '../../../graphics/shared/fill/FillGradient';\nimport { FillPattern } from '../../../graphics/shared/fill/FillPattern';\n\nimport type { ICanvasRenderingContext2D } from '../../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { ConvertedFillStyle } from '../../../graphics/shared/FillTypes';\nimport type { CanvasTextMetrics } from '../CanvasTextMetrics';\n\n// 5 decimal places\nconst PRECISION = 100000;\n\n/**\n * Converts a PixiJS fill style into a Canvas-compatible fill style.\n * Handles solid colors, textures, patterns, and gradients.\n * @param fillStyle - The PixiJS fill style to convert\n * @param context - The canvas rendering context\n * @param textMetrics - Metrics about the text being rendered\n * @param padding - Padding to add to the text metrics (used to ensure that the gradient accommodates the stroke width)\n * @returns Canvas-compatible fill style (string, CanvasGradient, or CanvasPattern)\n * @internal\n */\nexport function getCanvasFillStyle(\n    fillStyle: ConvertedFillStyle,\n    context: ICanvasRenderingContext2D,\n    textMetrics?: CanvasTextMetrics,\n    padding = 0\n): string | CanvasGradient | CanvasPattern\n{\n    // Solid color fill\n    if (fillStyle.texture === Texture.WHITE && !fillStyle.fill)\n    {\n        return Color.shared.setValue(fillStyle.color).setAlpha(fillStyle.alpha ?? 1).toHexa();\n    }\n    // Basic texture fill\n    else if (!fillStyle.fill)\n    {\n        const pattern = context.createPattern(fillStyle.texture.source.resource, 'repeat');\n        const tempMatrix = fillStyle.matrix.copyTo(Matrix.shared);\n\n        tempMatrix.scale(fillStyle.texture.frame.width, fillStyle.texture.frame.height);\n        pattern.setTransform(tempMatrix);\n\n        return pattern;\n    }\n    // Pattern fill\n    else if (fillStyle.fill instanceof FillPattern)\n    {\n        const fillPattern = fillStyle.fill;\n        const pattern = context.createPattern(fillPattern.texture.source.resource, 'repeat');\n        const tempMatrix = fillPattern.transform.copyTo(Matrix.shared);\n\n        tempMatrix.scale(\n            fillPattern.texture.frame.width,\n            fillPattern.texture.frame.height\n        );\n\n        pattern.setTransform(tempMatrix);\n\n        return pattern;\n    }\n    // Gradient fill\n    else if (fillStyle.fill instanceof FillGradient)\n    {\n        const fillGradient = fillStyle.fill;\n\n        const isLinear = fillGradient.type === 'linear';\n        const isLocal = fillGradient.textureSpace === 'local';\n\n        let width = 1;\n        let height = 1;\n\n        // Use text dimensions if in local space\n        if (isLocal && textMetrics)\n        {\n            width = textMetrics.width + padding;\n            height = textMetrics.height + padding;\n        }\n\n        let gradient: CanvasGradient;\n        let isNearlyVertical = false;\n\n        if (isLinear)\n        {\n            const { start, end } = fillGradient;\n\n            gradient = context.createLinearGradient(\n                start.x * width,\n                start.y * height,\n                end.x * width,\n                end.y * height\n            );\n\n            // Check if gradient is nearly vertical (10% threshold)\n            isNearlyVertical = Math.abs(end.x - start.x) < Math.abs((end.y - start.y) * 0.1);\n        }\n        else\n        {\n            const { center, innerRadius, outerCenter, outerRadius } = fillGradient;\n\n            gradient = context.createRadialGradient(\n                center.x * width,\n                center.y * height,\n                innerRadius * width,\n                outerCenter.x * width,\n                outerCenter.y * height,\n                outerRadius * width\n            );\n        }\n\n        // For vertical gradients in local space, repeat gradient per text line\n        if (isNearlyVertical && isLocal && textMetrics)\n        {\n            const ratio = (textMetrics.lineHeight) / height;\n\n            for (let i = 0; i < textMetrics.lines.length; i++)\n            {\n                const start = ((i * textMetrics.lineHeight) + (padding / 2)) / height;\n\n                fillGradient.colorStops.forEach((stop) =>\n                {\n                    // Convert to global space\n                    const globalStop = start + (stop.offset * ratio);\n\n                    gradient.addColorStop(\n                        // fix to 5 decimal places to avoid floating point precision issues\n                        Math.floor(globalStop * PRECISION) / PRECISION,\n                        Color.shared.setValue(stop.color).toHex()\n                    );\n                });\n            }\n        }\n        else\n        {\n            // Standard global space gradient handling\n            fillGradient.colorStops.forEach((stop) =>\n            {\n                gradient.addColorStop(stop.offset, Color.shared.setValue(stop.color).toHex());\n            });\n        }\n\n        return gradient;\n    }\n\n    // #if _DEBUG\n    warn('FillStyle not recognised', fillStyle);\n    // #endif\n\n    return 'red';\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 9580, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/text-bitmap/DynamicBitmapFont.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/text-bitmap/DynamicBitmapFont.ts"],"sourcesContent":["import { Color } from '../../color/Color';\nimport { Rectangle } from '../../maths/shapes/Rectangle';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport { ImageSource } from '../../rendering/renderers/shared/texture/sources/ImageSource';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { TextureStyle, type TextureStyleOptions } from '../../rendering/renderers/shared/texture/TextureStyle';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics';\nimport { fontStringFromTextStyle } from '../text/canvas/utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from '../text/canvas/utils/getCanvasFillStyle';\nimport { TextStyle } from '../text/TextStyle';\nimport { AbstractBitmapFont } from './AbstractBitmapFont';\n\nimport type { ICanvasRenderingContext2D } from '../../environment/canvas/ICanvasRenderingContext2D';\nimport type { CanvasAndContext } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\n\n/** @internal */\nexport interface DynamicBitmapFontOptions\n{\n    style: TextStyle\n    skipKerning?: boolean\n    resolution?: number\n    padding?: number\n    overrideFill?: boolean\n    overrideSize?: boolean\n    textureSize?: number\n    mipmap?: boolean\n    textureStyle?: TextureStyle | TextureStyleOptions\n}\n\n/**\n * A BitmapFont that generates its glyphs dynamically.\n * @category text\n * @internal\n */\nexport class DynamicBitmapFont extends AbstractBitmapFont<DynamicBitmapFont>\n{\n    public static defaultOptions: DynamicBitmapFontOptions = {\n        textureSize: 512,\n        style: new TextStyle(),\n        mipmap: true,\n    };\n    /**\n     * this is a resolution modifier for the font size..\n     * texture resolution will also be used to scale texture according to its font size also\n     */\n    public resolution = 1;\n    /** The pages of the font. */\n    public override readonly pages: {canvasAndContext?: CanvasAndContext, texture: Texture}[] = [];\n\n    private readonly _padding: number = 0;\n    private readonly _measureCache: Record<string, number> = Object.create(null);\n    private _currentChars: string[] = [];\n    private _currentX = 0;\n    private _currentY = 0;\n    private _currentMaxCharHeight = 0;\n    private _currentPageIndex = -1;\n    private readonly _style: TextStyle;\n    private readonly _skipKerning: boolean = false;\n    private readonly _textureSize: number;\n    private readonly _mipmap: boolean;\n    private readonly _textureStyle?: TextureStyle;\n\n    /**\n     * @param options - The options for the dynamic bitmap font.\n     */\n    constructor(options: DynamicBitmapFontOptions)\n    {\n        super();\n\n        const dynamicOptions = { ...DynamicBitmapFont.defaultOptions, ...options };\n\n        this._textureSize = dynamicOptions.textureSize;\n        this._mipmap = dynamicOptions.mipmap;\n\n        const style = dynamicOptions.style.clone();\n\n        if (dynamicOptions.overrideFill)\n        {\n            // assuming no shape fill..\n            style._fill.color = 0xffffff;\n            style._fill.alpha = 1;\n            style._fill.texture = Texture.WHITE;\n            style._fill.fill = null;\n        }\n\n        this.applyFillAsTint = dynamicOptions.overrideFill;\n\n        const requestedFontSize = style.fontSize;\n\n        // adjust font size to match the base measurement size\n        style.fontSize = this.baseMeasurementFontSize;\n\n        const font = fontStringFromTextStyle(style);\n\n        if (dynamicOptions.overrideSize)\n        {\n            if (style._stroke)\n            {\n                // we want the stroke to fit the size of the requested text, so we need to scale it\n                // accordingly (eg font size 20, with stroke 10 - stroke is 50% of size,\n                // as dynamic font is size 100, the stroke should be adjusted to 50 to make it look right)\n                style._stroke.width *= this.baseRenderedFontSize / requestedFontSize;\n            }\n        }\n        else\n        {\n            style.fontSize = this.baseRenderedFontSize = requestedFontSize;\n        }\n\n        this._style = style;\n        this._skipKerning = dynamicOptions.skipKerning ?? false;\n        this.resolution = dynamicOptions.resolution ?? 1;\n        this._padding = dynamicOptions.padding ?? 4;\n\n        if (dynamicOptions.textureStyle)\n        {\n            this._textureStyle = dynamicOptions.textureStyle instanceof TextureStyle\n                ? dynamicOptions.textureStyle\n                : new TextureStyle(dynamicOptions.textureStyle);\n        }\n\n        (this.fontMetrics as FontMetrics) = CanvasTextMetrics.measureFont(font);\n        (this.lineHeight as number) = style.lineHeight || this.fontMetrics.fontSize || style.fontSize;\n    }\n\n    public ensureCharacters(chars: string): void\n    {\n        const charList = CanvasTextMetrics.graphemeSegmenter(chars)\n            .filter((char) => !this._currentChars.includes(char))\n            .filter((char, index, self) => self.indexOf(char) === index);\n        // filter returns..\n\n        if (!charList.length) return;\n\n        this._currentChars = [...this._currentChars, ...charList];\n\n        let pageData;\n\n        if (this._currentPageIndex === -1)\n        {\n            pageData = this._nextPage();\n        }\n        else\n        {\n            pageData = this.pages[this._currentPageIndex];\n        }\n\n        let { canvas, context } = pageData.canvasAndContext;\n        let textureSource = pageData.texture.source;\n\n        const style = this._style;\n\n        let currentX = this._currentX;\n        let currentY = this._currentY;\n        let currentMaxCharHeight = this._currentMaxCharHeight;\n\n        const fontScale = this.baseRenderedFontSize / this.baseMeasurementFontSize;\n        const padding = this._padding * fontScale;\n\n        let skipTexture = false;\n\n        const maxTextureWidth = canvas.width / this.resolution;\n        const maxTextureHeight = canvas.height / this.resolution;\n\n        for (let i = 0; i < charList.length; i++)\n        {\n            const char = charList[i];\n\n            const metrics = CanvasTextMetrics.measureText(char, style, canvas, false);\n\n            // override the line height.. we want this to be the glyps height\n            // not the user specified one.\n            metrics.lineHeight = metrics.height;\n\n            const width = metrics.width * fontScale;\n            // This is ugly - but italics are given more space so they don't overlap\n            const textureGlyphWidth = Math.ceil((style.fontStyle === 'italic' ? 2 : 1) * width);\n\n            const height = (metrics.height) * fontScale;\n\n            const paddedWidth = textureGlyphWidth + (padding * 2);\n            const paddedHeight = height + (padding * 2);\n\n            skipTexture = false;\n            // don't let empty characters count towards the maxCharHeight\n            if (char !== '\\n' && char !== '\\r' && char !== '\\t' && char !== ' ')\n            {\n                skipTexture = true;\n                currentMaxCharHeight = Math.ceil(Math.max(paddedHeight, currentMaxCharHeight));\n            }\n\n            if (currentX + paddedWidth > maxTextureWidth)\n            {\n                currentY += currentMaxCharHeight;\n\n                // reset the line x and height..\n                currentMaxCharHeight = paddedHeight;\n                currentX = 0;\n\n                if (currentY + currentMaxCharHeight > maxTextureHeight)\n                {\n                    textureSource.update();\n\n                    const pageData = this._nextPage();\n\n                    canvas = pageData.canvasAndContext.canvas;\n                    context = pageData.canvasAndContext.context;\n                    textureSource = pageData.texture.source;\n\n                    currentX = 0;\n                    currentY = 0;\n                    currentMaxCharHeight = 0;\n                }\n            }\n\n            const xAdvance = (width / fontScale)\n                - (style.dropShadow?.distance ?? 0)\n                - (style._stroke?.width ?? 0);\n\n            // This is in coord space of the measurements.. not the texture\n            this.chars[char] = {\n                id: char.codePointAt(0),\n                xOffset: -this._padding,\n                yOffset: -this._padding,\n                xAdvance,\n                kerning: {},\n            };\n\n            if (skipTexture)\n            {\n                this._drawGlyph(\n                    context,\n                    metrics,\n                    currentX + padding,\n                    currentY + padding,\n                    fontScale,\n                    style,\n                );\n\n                const px = textureSource.width * fontScale;\n                const py = textureSource.height * fontScale;\n\n                const frame = new Rectangle(\n                    ((currentX) / px) * textureSource.width,\n                    ((currentY) / py) * textureSource.height,\n                    ((paddedWidth) / px) * textureSource.width,\n                    ((paddedHeight) / py) * textureSource.height,\n                );\n\n                this.chars[char].texture = new Texture({\n                    source: textureSource,\n                    frame,\n                });\n\n                currentX += Math.ceil(paddedWidth);\n            }\n        }\n\n        textureSource.update();\n\n        this._currentX = currentX;\n        this._currentY = currentY;\n        this._currentMaxCharHeight = currentMaxCharHeight;\n\n        // now apply kerning..\n        this._skipKerning && this._applyKerning(charList, context);\n    }\n\n    /**\n     * @deprecated since 8.0.0\n     * The map of base page textures (i.e., sheets of glyphs).\n     */\n    public override get pageTextures(): DynamicBitmapFont['pages']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.');\n        // #endif\n\n        return this.pages;\n    }\n\n    private _applyKerning(newChars: string[], context: ICanvasRenderingContext2D): void\n    {\n        const measureCache = this._measureCache;\n\n        for (let i = 0; i < newChars.length; i++)\n        {\n            const first = newChars[i];\n\n            for (let j = 0; j < this._currentChars.length; j++)\n            {\n                // first go through new char being first\n                const second = this._currentChars[j];\n\n                let c1 = measureCache[first];\n\n                if (!c1) c1 = measureCache[first] = context.measureText(first).width;\n\n                let c2 = measureCache[second];\n\n                if (!c2) c2 = measureCache[second] = context.measureText(second).width;\n\n                let total = context.measureText(first + second).width;\n                let amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    this.chars[first].kerning[second] = amount;\n                }\n\n                // then go through new char being second\n                total = context.measureText(first + second).width;\n                amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    this.chars[second].kerning[first] = amount;\n                }\n            }\n        }\n    }\n\n    private _nextPage(): {canvasAndContext: CanvasAndContext, texture: Texture}\n    {\n        this._currentPageIndex++;\n\n        const textureResolution = this.resolution;\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n            this._textureSize,\n            this._textureSize,\n            textureResolution\n        );\n\n        this._setupContext(canvasAndContext.context, this._style, textureResolution);\n\n        const resolution = textureResolution * (this.baseRenderedFontSize / this.baseMeasurementFontSize);\n        const texture = new Texture({\n            source: new ImageSource({\n                resource: canvasAndContext.canvas,\n                resolution,\n                alphaMode: 'premultiply-alpha-on-upload',\n                autoGenerateMipmaps: this._mipmap,\n            }),\n\n        });\n\n        if (this._textureStyle)\n        {\n            texture.source.style = this._textureStyle;\n        }\n\n        const pageData = {\n            canvasAndContext,\n            texture,\n        };\n\n        this.pages[this._currentPageIndex] = pageData;\n\n        return pageData;\n    }\n\n    // canvas style!\n    private _setupContext(context: ICanvasRenderingContext2D, style: TextStyle, resolution: number): void\n    {\n        style.fontSize = this.baseRenderedFontSize;\n        context.scale(resolution, resolution);\n        context.font = fontStringFromTextStyle(style);\n        style.fontSize = this.baseMeasurementFontSize;\n        context.textBaseline = style.textBaseline;\n\n        const stroke = style._stroke;\n        const strokeThickness = stroke?.width ?? 0;\n\n        if (stroke)\n        {\n            context.lineWidth = strokeThickness;\n            context.lineJoin = stroke.join;\n            context.miterLimit = stroke.miterLimit;\n\n            // TODO prolly cache this??\n            context.strokeStyle = getCanvasFillStyle(stroke, context);\n        }\n\n        if (style._fill)\n        {\n            // set canvas text styles\n            context.fillStyle = getCanvasFillStyle(style._fill, context);\n        }\n\n        if (style.dropShadow)\n        {\n            const shadowOptions = style.dropShadow;\n            const rgb = Color.shared.setValue(shadowOptions.color).toArray();\n\n            const dropShadowBlur = shadowOptions.blur * resolution;\n            const dropShadowDistance = shadowOptions.distance * resolution;\n\n            context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${shadowOptions.alpha})`;\n            context.shadowBlur = dropShadowBlur;\n            context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n            context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance;\n        }\n        else\n        {\n            context.shadowColor = 'black';\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n    }\n\n    private _drawGlyph(\n        context: ICanvasRenderingContext2D,\n        metrics: CanvasTextMetrics,\n        x: number,\n        y: number,\n        fontScale: number,\n        style: TextStyle\n    ): void\n    {\n        const char = metrics.text;\n        const fontProperties = metrics.fontProperties;\n        const stroke = style._stroke;\n\n        const strokeThickness = (stroke?.width ?? 0) * fontScale;\n\n        const tx = x + (strokeThickness / 2);\n        const ty = y - (strokeThickness / 2);\n\n        const descent = fontProperties.descent * fontScale;\n        const lineHeight = metrics.lineHeight * fontScale;\n\n        let removeShadow = false;\n\n        if (style.stroke && strokeThickness)\n        {\n            removeShadow = true;\n            context.strokeText(char, tx, ty + lineHeight - descent);\n        }\n\n        const { shadowBlur, shadowOffsetX, shadowOffsetY } = context;\n\n        if (style._fill)\n        {\n            if (removeShadow)\n            {\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n            context.fillText(char, tx, ty + lineHeight - descent);\n        }\n\n        if (removeShadow)\n        {\n            context.shadowBlur = shadowBlur;\n            context.shadowOffsetX = shadowOffsetX;\n            context.shadowOffsetY = shadowOffsetY;\n        }\n    }\n\n    public override destroy(): void\n    {\n        super.destroy();\n\n        for (let i = 0; i < this.pages.length; i++)\n        {\n            const { canvasAndContext, texture } = this.pages[i];\n\n            CanvasPool.returnCanvasAndContext(canvasAndContext);\n            texture.destroy(true);\n        }\n\n        (this.pages as null) = null;\n    }\n}\n"],"names":["pageData"],"mappings":"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","debugId":null}},
    {"offset": {"line": 9879, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/text-bitmap/utils/getBitmapTextLayout.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/text-bitmap/utils/getBitmapTextLayout.ts"],"sourcesContent":["import type { TextStyle } from '../../text/TextStyle';\nimport type { AbstractBitmapFont } from '../AbstractBitmapFont';\n\n/**\n * The layout data for a bitmap text.\n * This contains the width, height, scale, offsetY and lines of text.\n * Each line contains its width, character positions, characters, space width and spaces index.\n * @category text\n * @internal\n */\nexport interface BitmapTextLayoutData\n{\n    width: number;\n    height: number;\n    scale: number;\n    offsetY: number;\n    lines: {\n        width: number\n        charPositions: number[],\n        chars: string[],\n        // / spaces: number\n        spaceWidth: number\n        spacesIndex: number[]\n    }[];\n}\n\n/**\n * @param chars\n * @param style\n * @param font\n * @param trimEnd\n * @internal\n */\nexport function getBitmapTextLayout(\n    chars: string[],\n    style: TextStyle,\n    font: AbstractBitmapFont<any>,\n    trimEnd: boolean\n): BitmapTextLayoutData\n{\n    const layoutData: BitmapTextLayoutData = {\n        width: 0,\n        height: 0,\n        offsetY: 0,\n        scale: style.fontSize / font.baseMeasurementFontSize,\n        lines: [{\n            width: 0,\n            charPositions: [] as number[],\n            spaceWidth: 0,\n            spacesIndex: [],\n            chars: [],\n        }]\n    };\n\n    layoutData.offsetY = font.baseLineOffset;\n\n    let currentLine = layoutData.lines[0];\n\n    let previousChar: string = null;\n    let firstWord = true;\n    //    let spaceCount = 0;\n\n    const currentWord = {\n        spaceWord: false,\n        width: 0,\n        start: 0,\n        index: 0, // use index to not modify the array as we use it a lot!\n        positions: [] as number[],\n        chars: [] as string[],\n    };\n\n    const scale = font.baseMeasurementFontSize / style.fontSize;\n\n    const adjustedLetterSpacing = style.letterSpacing * scale;\n    const adjustedWordWrapWidth = style.wordWrapWidth * scale;\n    const adjustedLineHeight = style.lineHeight ? style.lineHeight * scale : font.lineHeight;\n\n    const breakWords = style.wordWrap && style.breakWords;\n\n    const nextWord = (word: typeof currentWord) =>\n    {\n        const start = currentLine.width;\n\n        for (let j = 0; j < currentWord.index; j++)\n        {\n            const position = word.positions[j];\n\n            currentLine.chars.push(word.chars[j]);\n            currentLine.charPositions.push(position + start);\n        }\n\n        currentLine.width += word.width;\n\n        firstWord = false;\n\n        // reset the word..\n        currentWord.width = 0;\n        currentWord.index = 0;\n        currentWord.chars.length = 0;\n\n        // spaceCount = 0;\n    };\n\n    const nextLine = () =>\n    {\n        let index = currentLine.chars.length - 1;\n\n        if (trimEnd)\n        {\n            let lastChar = currentLine.chars[index];\n\n            while (lastChar === ' ')\n            {\n                currentLine.width -= font.chars[lastChar].xAdvance;\n                lastChar = currentLine.chars[--index];\n            }\n        }\n\n        layoutData.width = Math.max(layoutData.width, currentLine.width);\n\n        currentLine = {\n            width: 0,\n            charPositions: [],\n            chars: [],\n            spaceWidth: 0,\n            spacesIndex: [],\n        };\n\n        firstWord = true;\n        layoutData.lines.push(currentLine);\n        layoutData.height += adjustedLineHeight;\n    };\n\n    const checkIsOverflow = (lineWidth: number) =>\n        lineWidth - adjustedLetterSpacing > adjustedWordWrapWidth;\n\n    // loop an extra time to force a line break..\n    for (let i = 0; i < chars.length + 1; i++)\n    {\n        let char: string;\n\n        const isEnd = i === chars.length;\n\n        if (!isEnd)\n        {\n            char = chars[i];\n        }\n\n        const charData = font.chars[char] || font.chars[' '];\n\n        const isSpace = (/(?:\\s)/).test(char);\n        const isWordBreak = isSpace || char === '\\r' || char === '\\n' || isEnd;\n\n        // spaceCount++;\n        // wasSpace = isSpace;\n\n        if (isWordBreak)\n        {\n            const addWordToNextLine = !firstWord && style.wordWrap && checkIsOverflow(currentLine.width + currentWord.width);\n\n            if (addWordToNextLine)\n            {\n                nextLine();\n\n                nextWord(currentWord);\n\n                if (!isEnd)\n                {\n                    currentLine.charPositions.push(0);\n                }\n            }\n            else\n            {\n                currentWord.start = currentLine.width;\n\n                nextWord(currentWord);\n\n                if (!isEnd)\n                {\n                    currentLine.charPositions.push(0);\n                }\n            }\n\n            if (char === '\\r' || char === '\\n')\n            {\n                nextLine();\n            }\n            else if (!isEnd)\n            {\n                const spaceWidth = charData.xAdvance + (charData.kerning[previousChar] || 0) + adjustedLetterSpacing;\n\n                currentLine.width += spaceWidth;\n\n                currentLine.spaceWidth = spaceWidth;\n                currentLine.spacesIndex.push(currentLine.charPositions.length);\n                currentLine.chars.push(char);\n\n                // spaceCount++;\n            }\n        }\n        else\n        {\n            const kerning = charData.kerning[previousChar] || 0;\n\n            const nextCharWidth = charData.xAdvance + kerning + adjustedLetterSpacing;\n\n            const addWordToNextLine = breakWords && checkIsOverflow(currentLine.width + currentWord.width + nextCharWidth);\n\n            if (addWordToNextLine)\n            {\n                nextWord(currentWord);\n                nextLine();\n            }\n\n            currentWord.positions[currentWord.index++] = currentWord.width + kerning;\n            currentWord.chars.push(char);\n\n            currentWord.width += nextCharWidth;\n        }\n\n        previousChar = char;\n        // lastChar = char;\n    }\n\n    nextLine();\n\n    if (style.align === 'center')\n    {\n        alignCenter(layoutData);\n    }\n    else if (style.align === 'right')\n    {\n        alignRight(layoutData);\n    }\n    else if (style.align === 'justify')\n    {\n        alignJustify(layoutData);\n    }\n\n    return layoutData;\n}\n\nfunction alignCenter(measurementData: BitmapTextLayoutData)\n{\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n        const offset = ((measurementData.width / 2) - (line.width / 2));\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            line.charPositions[j] += offset;\n        }\n    }\n}\n\nfunction alignRight(measurementData: BitmapTextLayoutData)\n{\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n        const offset = ((measurementData.width) - (line.width));\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            line.charPositions[j] += offset;\n        }\n    }\n}\n\nfunction alignJustify(measurementData: BitmapTextLayoutData)\n{\n    const width = measurementData.width;\n\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n\n        let indy = 0;\n        let spaceIndex = line.spacesIndex[indy++];\n\n        let offset = 0;\n\n        const totalSpaces = line.spacesIndex.length;\n\n        const newSpaceWidth = (width - line.width) / totalSpaces;\n\n        const spaceWidth = newSpaceWidth;\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            if (j === spaceIndex)\n            {\n                spaceIndex = line.spacesIndex[indy++];\n\n                offset += spaceWidth;\n            }\n\n            line.charPositions[j] += offset;\n        }\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 10053, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/text-bitmap/utils/resolveCharacters.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/text-bitmap/utils/resolveCharacters.ts"],"sourcesContent":["/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]} the flattened array of characters\n */\nexport function resolveCharacters(chars: string | (string | string[])[]): string[]\n{\n    // Skip unexpected 'empty set' check at end\n    if (chars === '')\n    {\n        return [];\n    }\n\n    // Split the chars string into individual characters\n    if (typeof chars === 'string')\n    {\n        chars = [chars];\n    }\n\n    // Handle an array of characters+ranges\n    const result: string[] = [];\n\n    for (let i = 0, j = chars.length; i < j; i++)\n    {\n        const item = chars[i];\n\n        // Handle range delimited by start/end chars\n        if (Array.isArray(item))\n        {\n            if (item.length !== 2)\n            {\n                throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n            }\n            if (item[0].length === 0 || item[1].length === 0)\n            {\n                throw new Error('[BitmapFont]: Invalid character delimiter.');\n            }\n\n            const startCode = item[0].charCodeAt(0);\n            const endCode = item[1].charCodeAt(0);\n\n            if (endCode < startCode)\n            {\n                throw new Error('[BitmapFont]: Invalid character range.');\n            }\n\n            for (let i = startCode, j = endCode; i <= j; i++)\n            {\n                result.push(String.fromCharCode(i));\n            }\n        }\n        else\n        {\n            result.push(...Array.from(item));\n        }\n    }\n\n    if (result.length === 0)\n    {\n        throw new Error('[BitmapFont]: Empty set when resolving characters.');\n    }\n\n    return result;\n}\n"],"names":["i","j"],"mappings":";;;;;AAQO,SAAS,kBAAkB,KAClC,EAAA;IAEI,IAAI,UAAU,EACd,EAAA;QACI,OAAO,EAAC,CAAA;IAAA,CACZ;IAGI,IAAA,OAAO,UAAU,QACrB,EAAA;QACI,KAAA,GAAQ;YAAC,KAAK;SAAA,CAAA;IAAA,CAClB;IAGA,MAAM,SAAmB,EAAC,CAAA;IAE1B,IAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,MAAM,MAAQ,EAAA,CAAA,GAAI,GAAG,CACzC,EAAA,CAAA;QACU,MAAA,IAAA,GAAO,KAAA,CAAM,CAAC,CAAA,CAAA;QAGhB,IAAA,KAAA,CAAM,OAAQ,CAAA,IAAI,CACtB,EAAA;YACQ,IAAA,IAAA,CAAK,MAAA,KAAW,CACpB,EAAA;gBACI,MAAM,IAAI,KAAA,CAAM,CAAiE,8DAAA,EAAA,IAAA,CAAK,MAAM,CAAG,CAAA,CAAA,CAAA,CAAA;YAAA,CACnG;YACI,IAAA,IAAA,CAAK,CAAC,CAAE,CAAA,MAAA,KAAW,KAAK,IAAK,CAAA,CAAC,CAAE,CAAA,MAAA,KAAW,CAC/C,EAAA;gBACU,MAAA,IAAI,MAAM,4CAA4C,CAAA,CAAA;YAAA,CAChE;YAEA,MAAM,SAAY,GAAA,IAAA,CAAK,CAAC,CAAA,CAAE,UAAA,CAAW,CAAC,CAAA,CAAA;YACtC,MAAM,OAAU,GAAA,IAAA,CAAK,CAAC,CAAA,CAAE,UAAA,CAAW,CAAC,CAAA,CAAA;YAEpC,IAAI,UAAU,SACd,EAAA;gBACU,MAAA,IAAI,MAAM,wCAAwC,CAAA,CAAA;YAAA,CAC5D;YAEA,IAAA,IAASA,KAAI,SAAWC,EAAAA,EAAAA,GAAI,OAASD,EAAAA,EAAAA,IAAKC,IAAGD,EAC7C,EAAA,CAAA;gBACI,MAAA,CAAO,IAAK,CAAA,MAAA,CAAO,YAAaA,CAAAA,EAAC,CAAC,CAAA,CAAA;YAAA,CACtC;QAAA,CAGJ,MAAA;YACI,MAAA,CAAO,IAAK,CAAA,GAAG,KAAM,CAAA,IAAA,CAAK,IAAI,CAAC,CAAA,CAAA;QAAA,CACnC;IAAA,CACJ;IAEI,IAAA,MAAA,CAAO,MAAA,KAAW,CACtB,EAAA;QACU,MAAA,IAAI,MAAM,oDAAoD,CAAA,CAAA;IAAA,CACxE;IAEO,OAAA,MAAA,CAAA;AACX","debugId":null}},
    {"offset": {"line": 10100, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/text-bitmap/BitmapFontManager.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/text-bitmap/BitmapFontManager.ts"],"sourcesContent":["import { lru } from 'tiny-lru';\nimport { Cache } from '../../assets/cache/Cache';\nimport { type TextureStyle, type TextureStyleOptions } from '../../rendering/renderers/shared/texture/TextureStyle';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { warn } from '../../utils/logging/warn';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics';\nimport { TextStyle } from '../text/TextStyle';\nimport { DynamicBitmapFont } from './DynamicBitmapFont';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\nimport { resolveCharacters } from './utils/resolveCharacters';\n\nimport type { TextStyleOptions } from '../text/TextStyle';\nimport type { BitmapFont } from './BitmapFont';\nimport type { BitmapTextLayoutData } from './utils/getBitmapTextLayout';\n\nlet fontCount = 0;\n\n/**\n * The options for installing a new BitmapFont. Once installed, the font will be available\n * for use in BitmapText objects through the fontFamily property of TextStyle.\n * @example\n * ```ts\n * import { BitmapFont, BitmapText } from 'pixi.js';\n *\n * // Basic font installation\n * BitmapFont.install({\n *     name: 'BasicFont',\n *     style: {\n *         fontFamily: 'Arial',\n *         fontSize: 24,\n *         fill: '#ffffff'\n *     }\n * });\n *\n * // Advanced font installation\n * BitmapFont.install({\n *     name: 'AdvancedFont',\n *     style: {\n *         fontFamily: 'Arial',\n *         fontSize: 32,\n *         fill: '#ff0000',\n *         stroke: { color: '#000000', width: 2 }\n *     },\n *     // Include specific character ranges\n *     chars: [\n *         ['a', 'z'],           // lowercase letters\n *         ['A', 'Z'],           // uppercase letters\n *         ['0', '9'],           // numbers\n *         '!@#$%^&*()_+-=[]{}' // symbols\n *     ],\n *     resolution: 2,            // High-DPI support\n *     padding: 4,              // Glyph padding\n *     skipKerning: false,      // Enable kerning\n *     textureStyle: {\n *         scaleMode: 'linear',\n *     }\n * });\n *\n * // Using the installed font\n * const text = new BitmapText({\n *     text: 'Hello World',\n *     style: {\n *         fontFamily: 'AdvancedFont',\n *         fontSize: 48\n *     }\n * });\n * ```\n * @category text\n * @standard\n */\nexport interface BitmapFontInstallOptions\n{\n    /**\n     * The name of the font. This will be used as the fontFamily in text styles to access this font.\n     * Must be unique across all installed bitmap fonts.\n     * @example\n     * ```ts\n     * BitmapFont.install({\n     *     name: 'MyCustomFont',\n     *     style: { fontFamily: 'Arial' }\n     * });\n     * ```\n     */\n    name?: string;\n\n    /**\n     * Characters included in the font set. You can specify individual characters or ranges.\n     * Don't forget to include spaces ' ' in your character set!\n     * @default BitmapFont.ALPHANUMERIC\n     * @example\n     * ```ts\n     * // Different ways to specify characters\n     * BitmapFont.install({\n     *     name: 'RangeFont',\n     *     chars: [\n     *         ['a', 'z'],              // Range of characters\n     *         '0123456789',            // String of characters\n     *         [['0', '9'], ['A', 'Z']] // Multiple ranges\n     *     ]\n     * });\n     * ```\n     */\n    chars?: string | (string | string[])[];\n\n    /**\n     * Render resolution for glyphs. Higher values create sharper text at the cost of memory.\n     * Useful for supporting high-DPI displays.\n     * @default 1\n     * @example\n     * ```ts\n     * BitmapFont.install({\n     *     name: 'HiDPIFont',\n     *     resolution: window.devicePixelRatio || 2\n     * });\n     * ```\n     */\n    resolution?: number;\n\n    /**\n     * Padding between glyphs on texture atlas. Balances visual quality with texture space.\n     * - Lower values: More compact, but may have visual artifacts\n     * - Higher values: Better quality, but uses more texture space\n     * @default 4\n     * @example\n     * ```ts\n     * BitmapFont.install({\n     *     name: 'PaddedFont',\n     *     padding: 8 // More padding for better quality\n     * });\n     * ```\n     */\n    padding?: number;\n\n    /**\n     * Skip generation of kerning information for the BitmapFont.\n     * - true: Faster generation, but text may have inconsistent spacing\n     * - false: Better text appearance, but slower generation\n     * @default false\n     * @example\n     * ```ts\n     * BitmapFont.install({\n     *     name: 'FastFont',\n     *     skipKerning: true // Prioritize performance\n     * });\n     * ```\n     */\n    skipKerning?: boolean;\n\n    /**\n     * Style options to render the BitmapFont with.\n     * Supports all TextStyle properties including fill, stroke, and shadow effects.\n     * @example\n     * ```ts\n     * BitmapFont.install({\n     *     name: 'StyledFont',\n     *     style: {\n     *         fontFamily: 'Arial',\n     *         fontSize: 32,\n     *         fill: 'white',\n     *         stroke: { color: '#000000', width: 2 },\n     *         dropShadow: {\n     *             color: '#000000',\n     *             blur: 2,\n     *             distance: 3\n     *         }\n     *     }\n     * });\n     * ```\n     */\n    style?: TextStyle | TextStyleOptions;\n\n    /**\n     * Optional texture style to use when creating the font textures.\n     * Controls how the font textures are rendered and filtered.\n     * @example\n     * ```ts\n     * BitmapFont.install({\n     *     name: 'CrispFont',\n     *     textureStyle: {\n     *         scaleMode: 'nearest',\n     *     }\n     * });\n     * ```\n     */\n    textureStyle?: TextureStyle | TextureStyleOptions;\n\n    /**\n     * Whether to allow overriding the fill color with a tint at runtime.\n     *\n     * When enabled, the font can be dynamically tinted using the `tint` property of BitmapText,\n     * allowing a single font to display multiple colors without creating separate font textures.\n     * This is memory efficient but requires the font to be rendered with white fill color.\n     *\n     * When disabled, the fill color is permanently baked into the font texture. This allows\n     * any fill color but prevents runtime tinting - each color variation requires a separate font.\n     * @default false (automatically determined based on style)\n     *\n     * **Requirements for tinting:**\n     * - Fill color must be white (`0xFFFFFF` or `'#ffffff'`)\n     * - No stroke effects\n     * - No drop shadows (or only black shadows)\n     * - No gradient or pattern fills\n     *\n     * **Performance considerations:**\n     * - ✅ Enabled: One font texture, multiple colors via tinting (memory efficient)\n     * - ❌ Disabled: Separate font texture per color (higher memory usage)\n     * @example\n     * ```ts\n     * // Correct usage - white fill with tinting enabled\n     * BitmapFont.install({\n     *     name: 'TintableFont',\n     *     style: {\n     *         fontFamily: 'Arial',\n     *         fontSize: 24,\n     *         fill: 0xFFFFFF  // Must be white for tinting\n     *     },\n     *     dynamicFill: true\n     * });\n     *\n     * // Use the font with different colors via tinting\n     * const redText = new BitmapText({\n     *     text: 'Red Text',\n     *     style: { fontFamily: 'TintableFont', fill: 'red }, // Red tint\n     * });\n     *\n     * const blueText = new BitmapText({\n     *     text: 'Blue Text',\n     *     style: { fontFamily: 'TintableFont', fill: 'blue' }, // Blue tint\n     * });\n     * ```\n     * @example\n     * ```ts\n     * // Incorrect usage - colored fill with tinting enabled\n     * BitmapFont.install({\n     *     name: 'BadTintFont',\n     *     style: {\n     *         fontFamily: 'Arial',\n     *         fontSize: 24,\n     *         fill: 0xFF0000  // ❌ Red fill won't tint properly\n     *     },\n     *     dynamicFill: true  // ❌ Will not work as expected\n     * });\n     * ```\n     * @example\n     * ```ts\n     * // Alternative - baked colors (no tinting)\n     * BitmapFont.install({\n     *     name: 'BakedColorFont',\n     *     style: {\n     *         fontFamily: 'Arial',\n     *         fontSize: 24,\n     *         fill: 0xFF0000,  // Any color works\n     *         stroke: { color: 0x000000, width: 2 }  // Strokes allowed\n     *     },\n     *     dynamicFill: false  // Color is baked in\n     * });\n     * ```\n     */\n    dynamicFill?: boolean;\n}\n\n/** @advanced */\nclass BitmapFontManagerClass\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    public readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    public readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    public readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     * @type {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public readonly ASCII = [[' ', '~']];\n\n    /** Default options for installing a new BitmapFont. */\n    public defaultOptions: Omit<BitmapFontInstallOptions, 'style'> = {\n        chars: this.ALPHANUMERIC,\n        resolution: 1,\n        padding: 4,\n        skipKerning: false,\n        textureStyle: null,\n    };\n\n    /** Cache for measured text layouts to avoid recalculating them multiple times. */\n    public readonly measureCache = lru<BitmapTextLayoutData>(1000);\n\n    /**\n     * Get a font for the specified text and style.\n     * @param text - The text to get the font for\n     * @param style - The style to use\n     */\n    public getFont(text: string, style: TextStyle): BitmapFont\n    {\n        let fontFamilyKey = `${style.fontFamily as string}-bitmap`;\n        let overrideFill = true;\n\n        // assuming there is no texture we can use a tint!\n        if (style._fill.fill && !style._stroke)\n        {\n            fontFamilyKey += style._fill.fill.styleKey;\n            overrideFill = false;\n        }\n        else if (style._stroke || style.dropShadow)\n        {\n            // if there is a stoke, we need to use the style key as this the font generated cannot be tinted\n            // due to the fact the font has at least two colors.\n            fontFamilyKey = `${style.styleKey}-bitmap`;\n            overrideFill = false;\n        }\n\n        // first get us the the right font...\n        if (!Cache.has(fontFamilyKey))\n        {\n            const styleCopy = Object.create(style);\n\n            // Override the lineHeight, let the BitmapFont calculate the lineHeight\n            // from the fontMetrics instead using a custom lineHeight from BitmapText parameter\n            styleCopy.lineHeight = 0;\n\n            const fnt = new DynamicBitmapFont({\n                style: styleCopy,\n                overrideFill,\n                overrideSize: true,\n                ...this.defaultOptions,\n            });\n\n            fontCount++;\n\n            // warn users if they have created too many dynamic fonts\n            if (fontCount > 50)\n            {\n                // eslint-disable-next-line max-len\n                warn('BitmapText', `You have dynamically created ${fontCount} bitmap fonts, this can be inefficient. Try pre installing your font styles using \\`BitmapFont.install({name:\"style1\", style})\\``);\n            }\n\n            fnt.once('destroy', () =>\n            {\n                fontCount--;\n                Cache.remove(fontFamilyKey);\n            });\n\n            Cache.set(\n                fontFamilyKey as string,\n                fnt\n            );\n        }\n\n        const dynamicFont = Cache.get(fontFamilyKey);\n\n        (dynamicFont as DynamicBitmapFont).ensureCharacters?.(text);\n\n        return dynamicFont;\n    }\n\n    /**\n     * Get the layout of a text for the specified style.\n     * @param text - The text to get the layout for\n     * @param style - The style to use\n     * @param trimEnd - Whether to ignore whitespaces at the end of each line\n     */\n    public getLayout(text: string, style: TextStyle, trimEnd: boolean = true): BitmapTextLayoutData\n    {\n        const bitmapFont = this.getFont(text, style);\n\n        const id = `${text}-${style.styleKey}-${trimEnd}`;\n\n        // Check if we have a cached layout\n        if (this.measureCache.has(id))\n        {\n            return this.measureCache.get(id);\n        }\n\n        const segments = CanvasTextMetrics.graphemeSegmenter(text);\n\n        // Generate the layout data\n        const layoutData = getBitmapTextLayout(segments, style, bitmapFont, trimEnd);\n\n        this.measureCache.set(id, layoutData);\n\n        return layoutData;\n    }\n\n    /**\n     * Measure the text using the specified style.\n     * @param text - The text to measure\n     * @param style - The style to use\n     * @param trimEnd - Whether to ignore whitespaces at the end of each line\n     */\n    public measureText(\n        text: string,\n        style: TextStyle,\n        trimEnd: boolean = true\n    ): { width: number; height: number; scale: number; offsetY: number }\n    {\n        return this.getLayout(text, style, trimEnd);\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set\n     * @param options - Setup options for font generation.\n     * @returns Font generated by style options.\n     * @example\n     * import { BitmapFontManager, BitmapText } from 'pixi.js';\n     *\n     * BitmapFontManager.install('TitleFont', {\n     *     fontFamily: 'Arial',\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: 'purple',\n     * });\n     *\n     * const title = new BitmapText({ text: 'This is the title', fontFamily: 'TitleFont' });\n     */\n    public install(options: BitmapFontInstallOptions): BitmapFont;\n    /** @deprecated since 7.0.0 */\n    public install(name: string, style?: TextStyle | TextStyleOptions, options?: BitmapFontInstallOptions): BitmapFont;\n    // eslint-disable-next-line max-len\n    public install(...args: [string | BitmapFontInstallOptions, (TextStyle | TextStyleOptions)?, BitmapFontInstallOptions?]): BitmapFont\n    {\n        let options = args[0] as BitmapFontInstallOptions;\n\n        if (typeof options === 'string')\n        {\n            options = {\n                name: options,\n                style: args[1],\n                chars: args[2]?.chars,\n                resolution: args[2]?.resolution,\n                padding: args[2]?.padding,\n                skipKerning: args[2]?.skipKerning,\n            } as BitmapFontInstallOptions;\n\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})');\n            // #endif\n        }\n\n        const name = options?.name;\n\n        if (!name)\n        {\n            throw new Error('[BitmapFontManager] Property `name` is required.');\n        }\n\n        options = { ...this.defaultOptions, ...options };\n\n        const textStyle = options.style;\n\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const overrideFill = options.dynamicFill ?? this._canUseTintForStyle(style);\n        const font = new DynamicBitmapFont({\n            style,\n            overrideFill,\n            skipKerning: options.skipKerning,\n            padding: options.padding,\n            resolution: options.resolution,\n            overrideSize: false,\n            textureStyle: options.textureStyle,\n        });\n\n        const flatChars = resolveCharacters(options.chars);\n\n        font.ensureCharacters(flatChars.join(''));\n\n        Cache.set(`${name}-bitmap`, font);\n\n        font.once('destroy', () => Cache.remove(`${name}-bitmap`));\n\n        return font;\n    }\n\n    /**\n     * Uninstalls a bitmap font from the cache.\n     * @param {string} name - The name of the bitmap font to uninstall.\n     */\n    public uninstall(name: string)\n    {\n        const cacheKey = `${name}-bitmap`;\n        const font = Cache.get<BitmapFont>(cacheKey);\n\n        if (font)\n        {\n            font.destroy();\n        }\n    }\n\n    /**\n     * Determines if a style can use tinting instead of baking colors into the bitmap.\n     * Tinting is more efficient as it allows reusing the same bitmap with different colors.\n     * @param style - The text style to evaluate\n     * @returns true if the style can use tinting, false if colors must be baked in\n     * @private\n     */\n    private _canUseTintForStyle(style: TextStyle): boolean\n    {\n        // Exclude strokes, non black shadows and ensure\n        // we have a non gradient or pattern fill,\n        // and the fill color is white\n        return !style._stroke\n            && (!style.dropShadow || style.dropShadow.color === 0x000000)\n            && !style._fill.fill\n            && style._fill.color === 0xFFFFFF;\n    }\n}\n\n/**\n * The BitmapFontManager is a helper that exists to install and uninstall fonts\n * into the cache for BitmapText objects.\n * @category text\n * @advanced\n * @class\n * @example\n * import { BitmapFontManager, BitmapText } from 'pixi.js';\n *\n * BitmapFontManager.install({\n *   name: 'TitleFont',\n *   style: {}\n * });\n *\n * const title = new BitmapText({ text: 'This is the title', style: { fontFamily: 'TitleFont' }});\n */\nexport const BitmapFontManager = new BitmapFontManagerClass();\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 10318, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/text-bitmap/BitmapFont.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/text-bitmap/BitmapFont.ts"],"sourcesContent":["import { groupD8 } from '../../maths/matrix/groupD8';\nimport { Rectangle } from '../../maths/shapes/Rectangle';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { AbstractBitmapFont } from './AbstractBitmapFont';\nimport { BitmapFontManager } from './BitmapFontManager';\n\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\nimport type { BitmapFontData } from './AbstractBitmapFont';\nimport type { BitmapFontInstallOptions } from './BitmapFontManager';\n\n/**\n * Options for creating a BitmapFont. Used when loading or creating bitmap fonts from existing textures and data.\n * @example\n * ```ts\n * import { BitmapFont, Texture } from 'pixi.js';\n *\n * // Create a bitmap font from loaded textures and data\n * const font = new BitmapFont({\n *     // Font data containing character metrics and layout info\n *     data: {\n *         pages: [{ id: 0, file: 'font.png' }],\n *         chars: {\n *             '65': { // 'A'\n *                 id: 65,\n *                 page: 0,\n *                 x: 0,\n *                 y: 0,\n *                 width: 32,\n *                 height: 32,\n *                 xOffset: 0,\n *                 yOffset: 0,\n *                 xAdvance: 32,\n *                 letter: 'A'\n *             }\n *             // ... other characters\n *         },\n *         fontSize: 32,\n *         lineHeight: 36,\n *         baseLineOffset: 26,\n *         fontFamily: 'MyFont',\n *         // Optional distance field info for MSDF/SDF fonts\n *         distanceField: {\n *             type: 'msdf',\n *             range: 4\n *         }\n *     },\n *     // Array of textures containing the font glyphs\n *     textures: [\n *         Texture.from('font.png')\n *     ]\n * });\n * ```\n * @category text\n * @standard\n */\nexport interface BitmapFontOptions\n{\n    /**\n     * The bitmap font data containing character metrics, layout information,\n     * and font properties. This includes character positions, dimensions,\n     * kerning data, and general font settings.\n     */\n    data: BitmapFontData;\n\n    /**\n     * Array of textures containing the font glyphs. Each texture corresponds\n     * to a page in the font data. For simple fonts this is typically just\n     * one texture, but complex fonts may split glyphs across multiple textures.\n     */\n    textures: Texture[];\n}\n\n/**\n * A BitmapFont object represents a particular font face, size, and style.\n * This class handles both pre-loaded bitmap fonts and dynamically generated ones.\n * @example\n * ```ts\n * import { BitmapFont, Texture } from 'pixi.js';\n *\n * // Create a bitmap font from loaded textures and data\n * const font = new BitmapFont({\n *     data: {\n *         pages: [{ id: 0, file: 'font.png' }],\n *         chars: {\n *             '65': { // 'A'\n *                 id: 65,\n *                 page: 0,\n *                 x: 0,\n *                 y: 0,\n *                 width: 32,\n *                 height: 32,\n *                 xOffset: 0,\n *                 yOffset: 0,\n *                 xAdvance: 32,\n *                 letter: 'A'\n *             }\n *         },\n *         fontSize: 32,\n *         lineHeight: 36,\n *         baseLineOffset: 26,\n *         fontFamily: 'MyFont',\n *         distanceField: {\n *             type: 'msdf',\n *             range: 4\n *         }\n *     },\n *     textures: [Texture.from('font.png')]\n * });\n *\n * // Install a font for global use\n * BitmapFont.install({\n *     name: 'MyCustomFont',\n *     style: {\n *         fontFamily: 'Arial',\n *         fontSize: 32,\n *         fill: '#ffffff',\n *         stroke: { color: '#000000', width: 2 }\n *     }\n * });\n *\n * // Uninstall when no longer needed\n * BitmapFont.uninstall('MyCustomFont');\n * ```\n * @category text\n * @standard\n */\nexport class BitmapFont extends AbstractBitmapFont<BitmapFont>\n{\n    /**\n     * The URL from which the font was loaded, if applicable.\n     * This is useful for tracking font sources and reloading.\n     * @example\n     * ```ts\n     * console.log(font.url); // 'fonts/myFont.fnt'\n     * ```\n     */\n    public url?: string;\n\n    constructor(options: BitmapFontOptions, url?: string)\n    {\n        super();\n\n        const { textures, data } = options;\n\n        Object.keys(data.pages).forEach((key: string) =>\n        {\n            const pageData = data.pages[parseInt(key, 10)];\n\n            const texture = textures[pageData.id];\n\n            this.pages.push({ texture });\n        });\n\n        Object.keys(data.chars).forEach((key: string) =>\n        {\n            const charData = data.chars[key];\n            const {\n                frame: textureFrame,\n                source: textureSource,\n                rotate: textureRotate,\n            } = textures[charData.page];\n\n            // Transform character coordinates based on texture rotation\n            const frame = groupD8.transformRectCoords(\n                charData,\n                textureFrame,\n                textureRotate,\n                new Rectangle()\n            );\n\n            const texture = new Texture({\n                frame,\n                orig: new Rectangle(0, 0, charData.width, charData.height),\n                source: textureSource,\n                rotate: textureRotate,\n            });\n\n            this.chars[key] = {\n                id: key.codePointAt(0),\n                xOffset: charData.xOffset,\n                yOffset: charData.yOffset,\n                xAdvance: charData.xAdvance,\n                kerning: charData.kerning ?? {},\n                texture,\n            };\n        });\n\n        this.baseRenderedFontSize = data.fontSize;\n\n        (this.baseMeasurementFontSize as number) = data.fontSize;\n        (this.fontMetrics as FontMetrics) = {\n            ascent: 0,\n            descent: 0,\n            fontSize: data.fontSize,\n        };\n        (this.baseLineOffset as number) = data.baseLineOffset;\n        (this.lineHeight as number) = data.lineHeight;\n        (this.fontFamily as string) = data.fontFamily;\n        (this.distanceField as { type: string, range: number }) = data.distanceField ?? {\n            type: 'none',\n            range: 0,\n        };\n\n        this.url = url;\n    }\n\n    /** Destroys the BitmapFont object. */\n    public override destroy(): void\n    {\n        super.destroy();\n\n        for (let i = 0; i < this.pages.length; i++)\n        {\n            const { texture } = this.pages[i];\n\n            texture.destroy(true);\n        }\n\n        (this.pages as null) = null;\n    }\n\n    /**\n     * Generates and installs a bitmap font with the specified options.\n     * The font will be cached and available for use in BitmapText objects.\n     * @param options - Setup options for font generation\n     * @returns Installed font instance\n     * @example\n     * ```ts\n     * // Install a basic font\n     * BitmapFont.install({\n     *     name: 'Title',\n     *     style: {\n     *         fontFamily: 'Arial',\n     *         fontSize: 32,\n     *         fill: '#ffffff'\n     *     }\n     * });\n     *\n     * // Install with advanced options\n     * BitmapFont.install({\n     *     name: 'Custom',\n     *     style: {\n     *         fontFamily: 'Arial',\n     *         fontSize: 24,\n     *         fill: '#00ff00',\n     *         stroke: { color: '#000000', width: 2 }\n     *     },\n     *     chars: [['a', 'z'], ['A', 'Z'], ['0', '9']],\n     *     resolution: 2,\n     *     padding: 4,\n     *     textureStyle: {\n     *         scaleMode: 'nearest'\n     *     }\n     * });\n     * ```\n     */\n    public static install(options: BitmapFontInstallOptions)\n    {\n        BitmapFontManager.install(options);\n    }\n    /**\n     * Uninstalls a bitmap font from the cache.\n     * This frees up memory and resources associated with the font.\n     * @param name - The name of the bitmap font to uninstall\n     * @example\n     * ```ts\n     * // Remove a font when it's no longer needed\n     * BitmapFont.uninstall('MyCustomFont');\n     *\n     * // Clear multiple fonts\n     * ['Title', 'Heading', 'Body'].forEach(BitmapFont.uninstall);\n     * ```\n     */\n    public static uninstall(name: string)\n    {\n        BitmapFontManager.uninstall(name);\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 10446, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/text-bitmap/asset/bitmapFontTextParser.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/text-bitmap/asset/bitmapFontTextParser.ts"],"sourcesContent":["import type { BitmapFontData, RawCharData } from '../AbstractBitmapFont';\n\n/**\n * Internal data format used to convert to BitmapFontData.\n * @private\n */\nexport interface BitmapFontRawData\n{\n    info: {\n        face: string;\n        size: string;\n    }[];\n    common: { lineHeight: string, base: string }[];\n    page: {\n        id: string;\n        file: string;\n    }[];\n    chars: {\n        count: number;\n    }[];\n    char: {\n        id: string\n        page: string\n        xoffset: string\n        yoffset: string\n        xadvance: string,\n        x: string\n        y: string\n        width: string\n        height: string\n        letter?: string\n        char?: string\n    }[];\n    kernings?: {\n        count: number;\n    }[];\n    kerning?: {\n        first: string;\n        second: string;\n        amount: string;\n    }[];\n    distanceField?: {\n        fieldType: 'sdf' | 'msdf' | 'none';\n        distanceRange: string;\n    }[]\n}\n\n/** @internal */\nexport const bitmapFontTextParser = {\n    test(data: string | XMLDocument | BitmapFontData): boolean\n    {\n        return typeof data === 'string' && data.startsWith('info face=');\n    },\n\n    parse(txt: string): BitmapFontData\n    {\n        // Retrieve data item\n        const items = txt.match(/^[a-z]+\\s+.+$/gm);\n        const rawData: BitmapFontRawData = {\n            info: [],\n            common: [],\n            page: [],\n            char: [],\n            chars: [],\n            kerning: [],\n            kernings: [],\n            distanceField: [],\n        };\n\n        for (const i in items)\n        {\n            // Extract item name\n            const name = items[i].match(/^[a-z]+/gm)[0] as keyof BitmapFontRawData;\n\n            // Extract item attribute list as string ex.: \"width=10\"\n            const attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm);\n\n            // Convert attribute list into an object\n            const itemData: any = {};\n\n            for (const i in attributeList)\n            {\n                // Split key-value pairs\n                const split = attributeList[i].split('=');\n                const key = split[0];\n\n                // Remove eventual quotes from value\n                const strValue = split[1].replace(/\"/gm, '');\n\n                // Try to convert value into float\n                const floatValue = parseFloat(strValue);\n\n                // Use string value case float value is NaN\n                const value = isNaN(floatValue) ? strValue : floatValue;\n\n                itemData[key] = value;\n            }\n\n            // Push current item to the resulting data\n            rawData[name].push(itemData);\n        }\n\n        const font: BitmapFontData = {\n            chars: {},\n            pages: [],\n            lineHeight: 0,\n            fontSize: 0,\n            fontFamily: '',\n            distanceField: null,\n            baseLineOffset: 0,\n        };\n\n        const [info] = rawData.info;\n        const [common] = rawData.common;\n        const [distanceField] = rawData.distanceField ?? [];\n\n        if (distanceField)\n        {\n            font.distanceField = {\n                range: parseInt(distanceField.distanceRange, 10),\n                type: distanceField.fieldType\n            };\n        }\n\n        font.fontSize = parseInt(info.size, 10);\n        font.fontFamily = info.face;\n        font.lineHeight = parseInt(common.lineHeight, 10);\n\n        const page = rawData.page;\n\n        for (let i = 0; i < page.length; i++)\n        {\n            font.pages.push({\n                id: parseInt(page[i].id, 10) || 0,\n                file: page[i].file,\n            });\n        }\n\n        const map: Record<string, string> = {};\n\n        font.baseLineOffset = font.lineHeight - parseInt(common.base, 10);\n\n        const char = rawData.char;\n\n        for (let i = 0; i < char.length; i++)\n        {\n            const charNode = char[i];\n            const id = parseInt(charNode.id, 10);\n\n            let letter = charNode.letter ?? charNode.char ?? String.fromCharCode(id);\n\n            if (letter === 'space')letter = ' ';\n\n            map[id] = letter;\n\n            font.chars[letter] = {\n                id,\n                // texture deets..\n                page: parseInt(charNode.page, 10) || 0,\n                x: parseInt(charNode.x, 10),\n                y: parseInt(charNode.y, 10),\n                width: parseInt(charNode.width, 10),\n                height: parseInt(charNode.height, 10),\n                xOffset: parseInt(charNode.xoffset, 10),\n                yOffset: parseInt(charNode.yoffset, 10),\n                xAdvance: parseInt(charNode.xadvance, 10),\n                kerning: {},\n            } as RawCharData;\n        }\n\n        const kerning = rawData.kerning || [];\n\n        for (let i = 0; i < kerning.length; i++)\n        {\n            const first = parseInt(kerning[i].first, 10);\n            const second = parseInt(kerning[i].second, 10);\n            const amount = parseInt(kerning[i].amount, 10);\n\n            font.chars[map[second]].kerning[map[first]] = amount;\n        }\n\n        return font;\n    }\n};\n"],"names":["i"],"mappings":"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","debugId":null}},
    {"offset": {"line": 10548, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/text-bitmap/asset/bitmapFontXMLParser.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/text-bitmap/asset/bitmapFontXMLParser.ts"],"sourcesContent":["import type { BitmapFontData, RawCharData } from '../AbstractBitmapFont';\n\n/** @internal */\nexport const bitmapFontXMLParser = {\n    test(data: string | XMLDocument | BitmapFontData): boolean\n    {\n        const xml = data as Document;\n\n        return typeof xml !== 'string'\n            && 'getElementsByTagName' in xml\n            && xml.getElementsByTagName('page').length\n            && xml.getElementsByTagName('info')[0].getAttribute('face') !== null;\n    },\n\n    parse(xml: Document): BitmapFontData\n    {\n        const data: BitmapFontData = {\n            chars: {},\n            pages: [],\n            lineHeight: 0,\n            fontSize: 0,\n            fontFamily: '',\n            distanceField: null,\n            baseLineOffset: 0,\n        };\n\n        const info = xml.getElementsByTagName('info')[0];\n        const common = xml.getElementsByTagName('common')[0];\n        const distanceField = xml.getElementsByTagName('distanceField')[0];\n\n        if (distanceField)\n        {\n            data.distanceField = {\n                type: distanceField.getAttribute('fieldType') as 'sdf' | 'msdf' | 'none',\n                range: parseInt(distanceField.getAttribute('distanceRange'), 10),\n            };\n        }\n\n        // pages and chars:\n        const page = xml.getElementsByTagName('page');\n        const char = xml.getElementsByTagName('char');\n        const kerning = xml.getElementsByTagName('kerning');\n\n        data.fontSize = parseInt(info.getAttribute('size'), 10);\n        data.fontFamily = info.getAttribute('face');\n        data.lineHeight = parseInt(common.getAttribute('lineHeight'), 10);\n\n        for (let i = 0; i < page.length; i++)\n        {\n            data.pages.push({\n                id: parseInt(page[i].getAttribute('id'), 10) || 0,\n                file: page[i].getAttribute('file'),\n            });\n        }\n\n        const map: Record<string, string> = {};\n\n        data.baseLineOffset = data.lineHeight - parseInt(common.getAttribute('base'), 10);\n\n        for (let i = 0; i < char.length; i++)\n        {\n            const charNode = char[i];\n            const id = parseInt(charNode.getAttribute('id'), 10);\n\n            let letter = charNode.getAttribute('letter') ?? charNode.getAttribute('char') ?? String.fromCharCode(id);\n\n            if (letter === 'space')letter = ' ';\n\n            map[id] = letter;\n\n            data.chars[letter] = {\n                id,\n                // texture deets..\n                page: parseInt(charNode.getAttribute('page'), 10) || 0,\n                x: parseInt(charNode.getAttribute('x'), 10),\n                y: parseInt(charNode.getAttribute('y'), 10),\n                width: parseInt(charNode.getAttribute('width'), 10),\n                height: parseInt(charNode.getAttribute('height'), 10),\n\n                // render deets..\n                xOffset: parseInt(charNode.getAttribute('xoffset'), 10),\n                yOffset: parseInt(charNode.getAttribute('yoffset'), 10), // + baseLineOffset,\n                xAdvance: parseInt(charNode.getAttribute('xadvance'), 10),\n                kerning: {},\n            } as RawCharData;\n        }\n\n        for (let i = 0; i < kerning.length; i++)\n        {\n            const first = parseInt(kerning[i].getAttribute('first'), 10);\n            const second = parseInt(kerning[i].getAttribute('second'), 10);\n            const amount = parseInt(kerning[i].getAttribute('amount'), 10);\n\n            data.chars[map[second]].kerning[map[first]] = amount;// * 10000;\n        }\n\n        return data;\n    }\n};\n"],"names":[],"mappings":";;;;;AAGO,MAAM,mBAAsB,GAAA;IAC/B,MAAK,IACL,EAAA;QACI,MAAM,GAAM,GAAA,IAAA,CAAA;QAEZ,OAAO,OAAO,GAAQ,KAAA,QAAA,IACf,0BAA0B,GAC1B,IAAA,GAAA,CAAI,oBAAA,CAAqB,MAAM,CAAA,CAAE,MACjC,IAAA,GAAA,CAAI,oBAAA,CAAqB,MAAM,CAAA,CAAE,CAAC,CAAE,CAAA,YAAA,CAAa,MAAM,CAAM,KAAA,IAAA,CAAA;IAAA,CACxE;IAEA,OAAM,GACN,EAAA;QACI,MAAM,IAAuB,GAAA;YACzB,OAAO,CAAA,CAAC;YACR,OAAO,EAAC;YACR,UAAY,EAAA,CAAA;YACZ,QAAU,EAAA,CAAA;YACV,UAAY,EAAA,EAAA;YACZ,aAAe,EAAA,IAAA;YACf,cAAgB,EAAA,CAAA;QAAA,CACpB,CAAA;QAEA,MAAM,IAAO,GAAA,GAAA,CAAI,oBAAqB,CAAA,MAAM,CAAA,CAAE,CAAC,CAAA,CAAA;QAC/C,MAAM,MAAS,GAAA,GAAA,CAAI,oBAAqB,CAAA,QAAQ,CAAA,CAAE,CAAC,CAAA,CAAA;QACnD,MAAM,aAAgB,GAAA,GAAA,CAAI,oBAAqB,CAAA,eAAe,CAAA,CAAE,CAAC,CAAA,CAAA;QAEjE,IAAI,aACJ,EAAA;YACI,IAAA,CAAK,aAAgB,GAAA;gBACjB,IAAA,EAAM,aAAc,CAAA,YAAA,CAAa,WAAW,CAAA;gBAC5C,OAAO,QAAS,CAAA,aAAA,CAAc,YAAa,CAAA,eAAe,GAAG,EAAE,CAAA;YAAA,CACnE,CAAA;QAAA,CACJ;QAGM,MAAA,IAAA,GAAO,GAAI,CAAA,oBAAA,CAAqB,MAAM,CAAA,CAAA;QACtC,MAAA,IAAA,GAAO,GAAI,CAAA,oBAAA,CAAqB,MAAM,CAAA,CAAA;QACtC,MAAA,OAAA,GAAU,GAAI,CAAA,oBAAA,CAAqB,SAAS,CAAA,CAAA;QAElD,IAAA,CAAK,QAAA,GAAW,QAAS,CAAA,IAAA,CAAK,YAAa,CAAA,MAAM,GAAG,EAAE,CAAA,CAAA;QACjD,IAAA,CAAA,UAAA,GAAa,IAAK,CAAA,YAAA,CAAa,MAAM,CAAA,CAAA;QAC1C,IAAA,CAAK,UAAA,GAAa,QAAS,CAAA,MAAA,CAAO,YAAa,CAAA,YAAY,GAAG,EAAE,CAAA,CAAA;QAEhE,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,IAAA,CAAK,MAAA,EAAQ,CACjC,EAAA,CAAA;YACI,IAAA,CAAK,KAAA,CAAM,IAAK,CAAA;gBACZ,EAAA,EAAI,SAAS,IAAK,CAAA,CAAC,CAAA,CAAE,YAAa,CAAA,IAAI,CAAG,EAAA,EAAE,CAAK,IAAA,CAAA;gBAChD,IAAM,EAAA,IAAA,CAAK,CAAC,CAAA,CAAE,YAAA,CAAa,MAAM,CAAA;YAAA,CACpC,CAAA,CAAA;QAAA,CACL;QAEA,MAAM,MAA8B,CAAA,CAAC,CAAA;QAEhC,IAAA,CAAA,cAAA,GAAiB,KAAK,UAAa,GAAA,QAAA,CAAS,OAAO,YAAa,CAAA,MAAM,GAAG,EAAE,CAAA,CAAA;QAEhF,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,IAAA,CAAK,MAAA,EAAQ,CACjC,EAAA,CAAA;YACU,MAAA,QAAA,GAAW,IAAA,CAAK,CAAC,CAAA,CAAA;YACvB,MAAM,KAAK,QAAS,CAAA,QAAA,CAAS,YAAa,CAAA,IAAI,GAAG,EAAE,CAAA,CAAA;YAE/C,IAAA,MAAA,GAAS,QAAS,CAAA,YAAA,CAAa,QAAQ,CAAA,IAAK,QAAS,CAAA,YAAA,CAAa,MAAM,CAAA,IAAK,MAAO,CAAA,YAAA,CAAa,EAAE,CAAA,CAAA;YAEvG,IAAI,MAAW,KAAA,OAAA,EAAiB,MAAA,GAAA,GAAA,CAAA;YAEhC,GAAA,CAAI,EAAE,CAAI,GAAA,MAAA,CAAA;YAEL,IAAA,CAAA,KAAA,CAAM,MAAM,CAAI,GAAA;gBACjB,EAAA;gBAAA,kBAAA;gBAEA,MAAM,QAAS,CAAA,QAAA,CAAS,YAAA,CAAa,MAAM,CAAA,EAAG,EAAE,CAAK,IAAA,CAAA;gBACrD,GAAG,QAAS,CAAA,QAAA,CAAS,YAAa,CAAA,GAAG,GAAG,EAAE,CAAA;gBAC1C,GAAG,QAAS,CAAA,QAAA,CAAS,YAAa,CAAA,GAAG,GAAG,EAAE,CAAA;gBAC1C,OAAO,QAAS,CAAA,QAAA,CAAS,YAAa,CAAA,OAAO,GAAG,EAAE,CAAA;gBAClD,QAAQ,QAAS,CAAA,QAAA,CAAS,YAAa,CAAA,QAAQ,GAAG,EAAE,CAAA;gBAAA,iBAAA;gBAGpD,SAAS,QAAS,CAAA,QAAA,CAAS,YAAa,CAAA,SAAS,GAAG,EAAE,CAAA;gBACtD,SAAS,QAAS,CAAA,QAAA,CAAS,YAAa,CAAA,SAAS,GAAG,EAAE,CAAA;gBAAA,oBAAA;gBACtD,UAAU,QAAS,CAAA,QAAA,CAAS,YAAa,CAAA,UAAU,GAAG,EAAE,CAAA;gBACxD,SAAS,CAAA,CAAC;YAAA,CACd,CAAA;QAAA,CACJ;QAEA,IAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,OAAA,CAAQ,MAAA,EAAQ,CACpC,EAAA,CAAA;YACU,MAAA,KAAA,GAAQ,SAAS,OAAQ,CAAA,CAAC,CAAA,CAAE,YAAa,CAAA,OAAO,GAAG,EAAE,CAAA,CAAA;YACrD,MAAA,MAAA,GAAS,SAAS,OAAQ,CAAA,CAAC,CAAA,CAAE,YAAa,CAAA,QAAQ,GAAG,EAAE,CAAA,CAAA;YACvD,MAAA,MAAA,GAAS,SAAS,OAAQ,CAAA,CAAC,CAAA,CAAE,YAAa,CAAA,QAAQ,GAAG,EAAE,CAAA,CAAA;YAExD,IAAA,CAAA,KAAA,CAAM,GAAA,CAAI,MAAM,CAAC,CAAA,CAAE,OAAQ,CAAA,GAAA,CAAI,KAAK,CAAC,CAAI,GAAA,MAAA,CAAA;QAAA,CAClD;QAEO,OAAA,IAAA,CAAA;IAAA,CACX;AACJ","debugId":null}},
    {"offset": {"line": 10628, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/text-bitmap/asset/bitmapFontXMLStringParser.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/text-bitmap/asset/bitmapFontXMLStringParser.ts"],"sourcesContent":["import { DOMAdapter } from '../../../environment/adapter';\nimport { bitmapFontXMLParser } from './bitmapFontXMLParser';\n\nimport type { BitmapFontData } from '../AbstractBitmapFont';\n\n/** @internal */\nexport const bitmapFontXMLStringParser = {\n    test(data: string | XMLDocument | BitmapFontData): boolean\n    {\n        if (typeof data === 'string' && data.includes('<font>'))\n        {\n            return bitmapFontXMLParser.test(DOMAdapter.get().parseXML(data));\n        }\n\n        return false;\n    },\n\n    parse(data: string): BitmapFontData\n    {\n        return bitmapFontXMLParser.parse(DOMAdapter.get().parseXML(data));\n    }\n};\n"],"names":[],"mappings":";;;;;;;;;AAMO,MAAM,yBAA4B,GAAA;IACrC,MAAK,IACL,EAAA;QACI,IAAI,OAAO,IAAS,KAAA,QAAA,IAAY,IAAK,CAAA,QAAA,CAAS,QAAQ,CACtD,EAAA;YACI,OAAO,4QAAA,CAAoB,IAAK,CAAA,kOAAA,CAAW,GAAA,EAAM,CAAA,QAAA,CAAS,IAAI,CAAC,CAAA,CAAA;QAAA,CACnE;QAEO,OAAA,KAAA,CAAA;IAAA,CACX;IAEA,OAAM,IACN,EAAA;QACI,OAAO,4QAAA,CAAoB,KAAM,CAAA,kOAAA,CAAW,GAAA,EAAM,CAAA,QAAA,CAAS,IAAI,CAAC,CAAA,CAAA;IAAA,CACpE;AACJ","debugId":null}},
    {"offset": {"line": 10654, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/.pnpm/pixi.js@8.13.1/node_modules/pixi.js/lib/scene/text-bitmap/asset/loadBitmapFont.mjs","sources":["file:///home/andrew/Development/bitwars/node_modules/.pnpm/pixi.js%408.13.1/node_modules/pixi.js/src/scene/text-bitmap/asset/loadBitmapFont.ts"],"sourcesContent":["import { LoaderParserPriority } from '../../../assets/loader/parsers/LoaderParser';\nimport { copySearchParams } from '../../../assets/utils/copySearchParams';\nimport { DOMAdapter } from '../../../environment/adapter';\nimport { ExtensionType } from '../../../extensions/Extensions';\nimport { path } from '../../../utils/path';\nimport { BitmapFont } from '../BitmapFont';\nimport { bitmapFontTextParser } from './bitmapFontTextParser';\nimport { bitmapFontXMLStringParser } from './bitmapFontXMLStringParser';\n\nimport type { CacheParser } from '../../../assets/cache/CacheParser';\nimport type { Loader } from '../../../assets/loader/Loader';\nimport type { LoaderParserAdvanced } from '../../../assets/loader/parsers/LoaderParser';\nimport type { ResolvedAsset } from '../../../assets/types';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\n\nconst validExtensions = ['.xml', '.fnt'];\n\n/**\n * simple loader plugin for loading in bitmap fonts!\n * @category assets\n * @internal\n */\nexport const bitmapFontCachePlugin = {\n    extension: {\n        type: ExtensionType.CacheParser,\n        name: 'cacheBitmapFont',\n    },\n    test: (asset: BitmapFont) => asset instanceof BitmapFont,\n    getCacheableAssets(keys: string[], asset: BitmapFont)\n    {\n        const out: Record<string, BitmapFont> = {};\n\n        keys.forEach((key) =>\n        {\n            out[key] = asset;\n            out[`${key}-bitmap`] = asset;\n        });\n\n        out[`${asset.fontFamily}-bitmap`] = asset;\n\n        return out;\n    }\n} satisfies CacheParser<BitmapFont>;\n\n/**\n * Loader plugin for loading bitmap fonts.\n * It supports both XML and text formats, and can handle distance field fonts.\n * @category assets\n * @advanced\n */\nexport const loadBitmapFont = {\n    extension: {\n        type: ExtensionType.LoadParser,\n        priority: LoaderParserPriority.Normal,\n    },\n\n    /** used for deprecation purposes */\n    name: 'loadBitmapFont',\n    id: 'bitmap-font',\n\n    test(url: string): boolean\n    {\n        return validExtensions.includes(path.extname(url).toLowerCase());\n    },\n\n    async testParse(data: string): Promise<boolean>\n    {\n        return bitmapFontTextParser.test(data) || bitmapFontXMLStringParser.test(data);\n    },\n\n    async parse(asset: string, data: ResolvedAsset, loader: Loader): Promise<BitmapFont>\n    {\n        const bitmapFontData = bitmapFontTextParser.test(asset)\n            ? bitmapFontTextParser.parse(asset)\n            : bitmapFontXMLStringParser.parse(asset);\n\n        const { src } = data;\n        const { pages } = bitmapFontData;\n        const textureUrls = [];\n\n        // if we have a distance field - we can assume this is a signed distance field font\n        // and we should use force linear filtering and no alpha premultiply\n        const textureOptions = (bitmapFontData.distanceField) ? {\n            scaleMode: 'linear',\n            alphaMode: 'premultiply-alpha-on-upload',\n            autoGenerateMipmaps: false,\n            resolution: 1,\n        } : {};\n\n        for (let i = 0; i < pages.length; ++i)\n        {\n            const pageFile = pages[i].file;\n            let imagePath = path.join(path.dirname(src), pageFile);\n\n            imagePath = copySearchParams(imagePath, src);\n\n            textureUrls.push({\n                src: imagePath,\n                data: textureOptions\n            });\n        }\n\n        const loadedTextures = await loader.load<Texture>(textureUrls);\n        const textures = textureUrls.map((url) => loadedTextures[url.src]);\n\n        const bitmapFont = new BitmapFont({\n            data: bitmapFontData,\n            textures\n        }, src);\n\n        return bitmapFont;\n    },\n\n    async load(url: string, _options: ResolvedAsset): Promise<string>\n    {\n        const response = await DOMAdapter.get().fetch(url);\n\n        return await response.text();\n    },\n\n    async unload(bitmapFont: BitmapFont, _resolvedAsset, loader): Promise<void>\n    {\n        await Promise.all(bitmapFont.pages.map((page) => loader.unload(page.texture.source._sourceOrigin)));\n\n        bitmapFont.destroy();\n    }\n} satisfies LoaderParserAdvanced<string, BitmapFont, BitmapFont>;\n"],"names":[],"mappings":"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","debugId":null}}]
}