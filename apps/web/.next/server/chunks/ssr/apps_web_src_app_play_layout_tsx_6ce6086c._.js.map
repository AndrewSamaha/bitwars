{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/app/play/layout.tsx"],"sourcesContent":["import { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\nimport { jwtVerify } from 'jose';\nimport React from 'react';\n\nconst SECRET = process.env.PLAYER_AUTH_SECRET;\n\nasync function verifyToken(token: string) {\n  if (!SECRET) {\n    console.error('PLAYER_AUTH_SECRET is not set');\n    return null;\n  }\n  try {\n    const encoder = new TextEncoder();\n    const { payload } = await jwtVerify(token, encoder.encode(SECRET), {\n      algorithms: ['HS256'],\n    });\n    return payload;\n  } catch (err) {\n    // Token invalid or expired\n    return null;\n  }\n}\n\nexport default async function Layout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const cookieStore = await cookies();\n  const token = cookieStore.get('player_token')?.value;\n\n  if (!token) {\n    redirect('/');\n  }\n\n  const payload = await verifyToken(token!);\n  if (!payload) {\n    redirect('/');\n  }\n\n  // Optionally, you could pass payload via context or props if needed\n  return <>{children}</>;\n}\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAAA;AACA;;;;;AAGA,MAAM,SAAS,QAAQ,GAAG,CAAC,kBAAkB;AAE7C,eAAe,YAAY,KAAa;IACtC,IAAI,CAAC,QAAQ;QACX,QAAQ,KAAK,CAAC;QACd,OAAO;IACT;IACA,IAAI;QACF,MAAM,UAAU,IAAI;QACpB,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAA,qNAAS,EAAC,OAAO,QAAQ,MAAM,CAAC,SAAS;YACjE,YAAY;gBAAC;aAAQ;QACvB;QACA,OAAO;IACT,EAAE,OAAO,KAAK;QACZ,2BAA2B;QAC3B,OAAO;IACT;AACF;AAEe,eAAe,OAAO,EACnC,QAAQ,EAGT;IACC,MAAM,cAAc,MAAM,IAAA,yQAAO;IACjC,MAAM,QAAQ,YAAY,GAAG,CAAC,iBAAiB;IAE/C,IAAI,CAAC,OAAO;QACV,IAAA,gUAAQ,EAAC;IACX;IAEA,MAAM,UAAU,MAAM,YAAY;IAClC,IAAI,CAAC,SAAS;QACZ,IAAA,gUAAQ,EAAC;IACX;IAEA,oEAAoE;IACpE,qBAAO;kBAAG;;AACZ","debugId":null}}]
}