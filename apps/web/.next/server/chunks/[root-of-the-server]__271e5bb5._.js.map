{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/lib/db/connection.ts"],"sourcesContent":["import { createClient } from \"redis\";\n\nexport const redis = createClient({ url: process.env.GAMESTATE_REDIS_URL });\nawait redis.connect();"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,QAAQ,IAAA,0MAAY,EAAC;IAAE,KAAK,QAAQ,GAAG,CAAC,mBAAmB;AAAC;AACzE,MAAM,MAAM,OAAO","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/features/users/schema/keys.ts"],"sourcesContent":["export const PLAYER_INDEX = \"idx:player\";\nexport const PLAYER_PREFIX = \"player:\";\n\nexport const playerKey = (id: string) => `player:${id}`;\n"],"names":[],"mappings":";;;;;;;;AAAO,MAAM,eAAe;AACrB,MAAM,gBAAgB;AAEtB,MAAM,YAAY,CAAC,KAAe,CAAC,OAAO,EAAE,IAAI","debugId":null}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\nimport type { Unit } from \"@bitwars/shared\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function normalizeString(inputString: string): string {\n  // 1. Replace special characters with spaces\n  let cleanedString = inputString.toLowerCase().trim().replace(/[^a-zA-Z0-9\\s]/g, ' ');\n\n  // 2. Replace consecutive spaces with a single space\n  cleanedString = cleanedString.replace(/\\s+/g, ' ');\n\n  // 3. Trim leading/trailing spaces\n  cleanedString = cleanedString.trim();\n\n  return cleanedString;\n}\n\nexport function consoleUnit(unit: Unit) {\n  console.log(unit);\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;AACA;;;AAGO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,IAAA,sOAAO,EAAC,IAAA,gMAAI,EAAC;AACtB;AAEO,SAAS,gBAAgB,WAAmB;IACjD,4CAA4C;IAC5C,IAAI,gBAAgB,YAAY,WAAW,GAAG,IAAI,GAAG,OAAO,CAAC,mBAAmB;IAEhF,oDAAoD;IACpD,gBAAgB,cAAc,OAAO,CAAC,QAAQ;IAE9C,kCAAkC;IAClC,gBAAgB,cAAc,IAAI;IAElC,OAAO;AACT;AAEO,SAAS,YAAY,IAAU;IACpC,QAAQ,GAAG,CAAC;AACd","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/lib/constants.ts"],"sourcesContent":["export const PLAYER_NAMESPACE = '20f3bcf2-e4c3-4589-a7b5-9697afe1b1a8';\nexport const PLAYER_COLORS = [\n  'bg-red-500',\n  'bg-green-500',\n  'bg-blue-500',\n  'bg-yellow-500',\n  'bg-purple-500',\n  'bg-orange-500',\n];\nexport const PLAYER_NAME_PARTS = [\n    \"Grimm\",\n    \"Alice\",\n    \"Bob\",\n    \"Charlie\",\n    \"David\",\n    \"Eve\",\n    \"Frank\",\n    \"Grace\",\n    \"Hannah\",\n    \"Isaac\",\n    \"Jack\",\n    \"Jill\",\n    \"Katie\",\n    \"Liam\",\n    \"Mia\",\n    \"Noah\",\n    \"Olivia\",\n    \"Patrick\",\n    \"Quinn\",\n    \"Rachel\",\n    \"Sam\",\n    \"Taylor\",\n    \"Victor\",\n    \"Wendy\",\n    \"Xander\",\n    \"Yara\",\n    \"Zack\",\n];\n"],"names":[],"mappings":";;;;;;;;AAAO,MAAM,mBAAmB;AACzB,MAAM,gBAAgB;IAC3B;IACA;IACA;IACA;IACA;IACA;CACD;AACM,MAAM,oBAAoB;IAC7B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACH","debugId":null}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/features/users/schema/player/mappers.ts"],"sourcesContent":["import type { Player } from \"./player\";\nimport type { PlayerDoc } from \"./playerDoc\";\nimport type { PlayerLogin } from \"./playerLogin\";\nimport { v5 as uuidv5 } from 'uuid';\nimport { normalizeString } from \"@/lib/utils\";\nimport { PLAYER_NAMESPACE } from \"@/lib/constants\";\n\nexport const loginToPlayer = (login: PlayerLogin): Player => {\n  const gameId = process.env.GAME_ID;\n  if (!gameId) throw new Error(\"GAME_ID not set\");\n  const normalized = normalizeString(login.name);\n  const id = uuidv5(normalized, PLAYER_NAMESPACE);\n  const createdAt = new Date();\n  const lastSeen = createdAt;\n  const createdAtMs = createdAt.getTime();\n  const lastSeenMs = lastSeen.getTime();\n  return {\n    id,\n    gameId,\n    name: login.name,\n    normalizedName: normalizeString(login.name),\n    color: login.color,\n    createdAt,\n    lastSeen,\n    createdAtMs,\n    lastSeenMs,\n  };\n};\n\nexport const playerToPlayerDoc = (p: Player): PlayerDoc => ({\n  ...p,\n  createdAt: p.createdAt.toISOString(),\n  lastSeen: p.lastSeen.toISOString(),\n});\n\nexport const playerDocToPlayer = (d: PlayerDoc): Player => {\n  return {\n    ...d,\n    createdAt: new Date(d.createdAt),\n    lastSeen: new Date(d.lastSeen),\n  };\n};\n"],"names":[],"mappings":";;;;;;;;AAGA;AACA;AACA;;;;AAEO,MAAM,gBAAgB,CAAC;IAC5B,MAAM,SAAS,QAAQ,GAAG,CAAC,OAAO;IAClC,IAAI,CAAC,QAAQ,MAAM,IAAI,MAAM;IAC7B,MAAM,aAAa,IAAA,uJAAe,EAAC,MAAM,IAAI;IAC7C,MAAM,KAAK,IAAA,oPAAM,EAAC,YAAY,4JAAgB;IAC9C,MAAM,YAAY,IAAI;IACtB,MAAM,WAAW;IACjB,MAAM,cAAc,UAAU,OAAO;IACrC,MAAM,aAAa,SAAS,OAAO;IACnC,OAAO;QACL;QACA;QACA,MAAM,MAAM,IAAI;QAChB,gBAAgB,IAAA,uJAAe,EAAC,MAAM,IAAI;QAC1C,OAAO,MAAM,KAAK;QAClB;QACA;QACA;QACA;IACF;AACF;AAEO,MAAM,oBAAoB,CAAC,IAAyB,CAAC;QAC1D,GAAG,CAAC;QACJ,WAAW,EAAE,SAAS,CAAC,WAAW;QAClC,UAAU,EAAE,QAAQ,CAAC,WAAW;IAClC,CAAC;AAEM,MAAM,oBAAoB,CAAC;IAChC,OAAO;QACL,GAAG,CAAC;QACJ,WAAW,IAAI,KAAK,EAAE,SAAS;QAC/B,UAAU,IAAI,KAAK,EAAE,QAAQ;IAC/B;AACF","debugId":null}},
    {"offset": {"line": 269, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/features/users/queries/read/getPlayerById.ts"],"sourcesContent":["import { redis } from \"@/lib/db/connection\";\nimport { playerKey } from \"@/features/users/schema/keys\";\nimport { playerDocToPlayer } from \"@/features/users/schema/player/mappers\";\nimport type { Player } from \"@/features/users/schema/player/player\";\n\nexport async function getPlayerById(id: string): Promise<Player | null> {\n  if (!id) return null;\n  const key = playerKey(id);\n  const doc = (await redis.json.get(key)) as any | null;\n  if (!doc) return null;\n  return playerDocToPlayer(doc);\n}\n  "],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;;;;AAGO,eAAe,cAAc,EAAU;IAC5C,IAAI,CAAC,IAAI,OAAO;IAChB,MAAM,MAAM,IAAA,wKAAS,EAAC;IACtB,MAAM,MAAO,MAAM,wJAAK,CAAC,IAAI,CAAC,GAAG,CAAC;IAClC,IAAI,CAAC,KAAK,OAAO;IACjB,OAAO,IAAA,6LAAiB,EAAC;AAC3B","debugId":null}},
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/features/users/schema/player/player.ts"],"sourcesContent":["// zod schema + helpers\nimport { z } from \"zod\";\n\nexport const PlayerSchema = z.object({\n  id: z.uuid(),\n  gameId: z.string(),\n  name: z.string(),\n  normalizedName: z.string(),\n  color: z.string(),\n  createdAt: z.date(),\n  lastSeen: z.date(),\n  createdAtMs: z.number(),\n  lastSeenMs: z.number(),\n  detail: z.record(z.string(), z.unknown()).optional(),\n  detailVersion: z.tuple([z.number(), z.number(), z.number()]).optional(),\n});\n\nexport type Player = z.infer<typeof PlayerSchema>;\n\nexport const semVer = (version: [number, number, number]) => `${version[0]}.${version[1]}.${version[2]}`;\n"],"names":[],"mappings":"AAAA,uBAAuB;;;;;;;AACvB;;AAEO,MAAM,eAAe,oOAAC,CAAC,MAAM,CAAC;IACnC,IAAI,oOAAC,CAAC,IAAI;IACV,QAAQ,oOAAC,CAAC,MAAM;IAChB,MAAM,oOAAC,CAAC,MAAM;IACd,gBAAgB,oOAAC,CAAC,MAAM;IACxB,OAAO,oOAAC,CAAC,MAAM;IACf,WAAW,oOAAC,CAAC,IAAI;IACjB,UAAU,oOAAC,CAAC,IAAI;IAChB,aAAa,oOAAC,CAAC,MAAM;IACrB,YAAY,oOAAC,CAAC,MAAM;IACpB,QAAQ,oOAAC,CAAC,MAAM,CAAC,oOAAC,CAAC,MAAM,IAAI,oOAAC,CAAC,OAAO,IAAI,QAAQ;IAClD,eAAe,oOAAC,CAAC,KAAK,CAAC;QAAC,oOAAC,CAAC,MAAM;QAAI,oOAAC,CAAC,MAAM;QAAI,oOAAC,CAAC,MAAM;KAAG,EAAE,QAAQ;AACvE;AAIO,MAAM,SAAS,CAAC,UAAsC,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE,EAAE","debugId":null}},
    {"offset": {"line": 326, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/features/users/utils/jwt.ts"],"sourcesContent":["import { jwtVerify } from 'jose';\n\nconst SECRET = process.env.PLAYER_AUTH_SECRET;\n\nexport async function verifyToken(token: string) {\n  if (!SECRET) {\n    console.error('PLAYER_AUTH_SECRET is not set');\n    return null;\n  }\n  try {\n    const encoder = new TextEncoder();\n    const { payload } = await jwtVerify(token, encoder.encode(SECRET), {\n      algorithms: ['HS256'],\n    });\n    return payload;\n  } catch (err) {\n    // Token invalid or expired\n    return null;\n  }\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,SAAS,QAAQ,GAAG,CAAC,kBAAkB;AAEtC,eAAe,YAAY,KAAa;IAC7C,IAAI,CAAC,QAAQ;QACX,QAAQ,KAAK,CAAC;QACd,OAAO;IACT;IACA,IAAI;QACF,MAAM,UAAU,IAAI;QACpB,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAA,uNAAS,EAAC,OAAO,QAAQ,MAAM,CAAC,SAAS;YACjE,YAAY;gBAAC;aAAQ;QACvB;QACA,OAAO;IACT,EAAE,OAAO,KAAK;QACZ,2BAA2B;QAC3B,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/features/users/utils/auth.ts"],"sourcesContent":["// lib/auth.ts\nimport { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\nimport { verifyToken } from './jwt';\nimport { NextResponse } from 'next/server';\n\ntype AuthPayload = {\n  playerId: string;\n  name: string;\n  normalizedName: string;\n  exp?: number;\n  iat?: number;\n};\n\n/**\n * Server-only auth guard for pages and actions.\n *\n * Use at the top of Server Components or Server Actions to ensure the user is\n * authenticated before continuing. If the JWT cookie is missing or invalid,\n * this calls Next.js redirect (which throws) to navigate to the provided path\n * (defaults to '/').\n *\n * Use requireAuthOr401 for API route handlers (files under app/.../route.ts).\n * \n * Behavior summary:\n * - Reads the player_token httpOnly cookie.\n * - Verifies the JWT (HS256) with the server secret.\n * - On failure: redirects to the given path.\n * - On success: returns the decoded payload.\n *\n * Examples:\n *\n * ```ts\n * import { requireAuthOrRedirect } from '@/features/users/utils/auth';\n *\n * export default async function Page() {\n *   const auth = await requireAuthOrRedirect('/');\n *   return <div>Welcome, {`{`}{auth.name}{`}`}</div>;\n * }\n * ```\n *\n */\nexport async function requireAuthOrRedirect(redirectTo: string = '/') : Promise<AuthPayload> {\n  const token = (await cookies()).get('player_token')?.value;\n  if (!token) redirect(redirectTo); // throws to stop execution\n\n  try {\n    const payload = await verifyToken(token);\n    if (!payload) redirect(redirectTo);\n    return payload as AuthPayload;\n  } catch {\n    redirect(redirectTo);\n  }\n}\n\n/**\n * API-route auth helper that returns 401 Unauthorized when not authenticated.\n *\n * Intended usage: call at the top of API route handlers (files under\n * app/.../route.ts). This function reads and verifies the player_token cookie.\n * If missing or invalid, it returns a NextResponse JSON with status 401.\n * If valid, it returns the decoded auth payload and no response.\n *\n * Return shape:\n * - { auth: null,  res: NextResponse } when unauthorized (status 401)\n * - { auth: object, res: null } when authorized (payload is the decoded JWT)\n *\n * Example (API route handler):\n * ```ts\n * import { NextResponse } from 'next/server';\n * import { requireAuthOr401 } from '@/features/users/utils/auth';\n *\n * export async function GET() {\n *   const { auth, res } = await requireAuthOr401();\n *   if (res) return res; // 401 when not authenticated\n *\n *   // authenticated request logic here, e.g. use auth.playerId\n *   return NextResponse.json({ ok: true, playerId: (auth as any).playerId });\n * }\n * ```\n */\nexport async function requireAuthOr401() {\n    const token = (await cookies()).get('player_token')?.value;\n    if (!token) return { \n        auth: null,\n        res: NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    };\n  \n    try {\n      const payload = await verifyToken(token);\n      return {\n        auth: payload,\n        res: null\n      };\n    } catch {\n      return {\n        auth: null,\n        res: NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n      };\n    }\n  }\n"],"names":[],"mappings":"AAAA,cAAc;;;;;;;AACd;AACA;AAAA;AACA;AACA;;;;;AAsCO,eAAe,sBAAsB,aAAqB,GAAG;IAClE,MAAM,QAAQ,CAAC,MAAM,IAAA,2QAAO,GAAE,EAAE,GAAG,CAAC,iBAAiB;IACrD,IAAI,CAAC,OAAO,IAAA,kUAAQ,EAAC,aAAa,2BAA2B;IAE7D,IAAI;QACF,MAAM,UAAU,MAAM,IAAA,wKAAW,EAAC;QAClC,IAAI,CAAC,SAAS,IAAA,kUAAQ,EAAC;QACvB,OAAO;IACT,EAAE,OAAM;QACN,IAAA,kUAAQ,EAAC;IACX;AACF;AA4BO,eAAe;IAClB,MAAM,QAAQ,CAAC,MAAM,IAAA,2QAAO,GAAE,EAAE,GAAG,CAAC,iBAAiB;IACrD,IAAI,CAAC,OAAO,OAAO;QACf,MAAM;QACN,KAAK,+QAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;IAEA,IAAI;QACF,MAAM,UAAU,MAAM,IAAA,wKAAW,EAAC;QAClC,OAAO;YACL,MAAM;YACN,KAAK;QACP;IACF,EAAE,OAAM;QACN,OAAO;YACL,MAAM;YACN,KAAK,+QAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QAClE;IACF;AACF","debugId":null}},
    {"offset": {"line": 415, "column": 0}, "map": {"version":3,"sources":["file:///home/andrew/Development/bitwars/apps/web/src/app/api/players/me/route.ts"],"sourcesContent":["// app/api/players/me/route.ts\nimport { NextResponse } from 'next/server';\nimport { getPlayerById } from '@/features/users/queries/read/getPlayerById'; // implement this\nimport { PlayerSchema } from '@/features/users/schema/player/player';\nimport { requireAuthOr401 } from '@/features/users/utils/auth';\n\nexport async function GET() {\n  const { auth, res } = await requireAuthOr401();\n  if (res) return res; // 401 when not authenticated\n  console.log(auth);\n  try {\n    const playerId = auth?.playerId as string | undefined;\n    if (!playerId) return NextResponse.json(null, { status: 401 });\n\n    const player = await getPlayerById(playerId);\n    if (!player) return NextResponse.json(null, { status: 401 });\n\n    const parse = PlayerSchema.safeParse(player);\n    if (!parse.success) return NextResponse.json(null, { status: 401 });\n\n    return NextResponse.json(parse.data, { status: 200 });\n  } catch {\n    return NextResponse.json(null, { status: 401 });\n  }\n}\n"],"names":[],"mappings":"AAAA,8BAA8B;;;;;AAC9B;AACA,6SAA6E,iBAAiB;AAC9F;AACA;;;;;;;;;AAEO,eAAe;IACpB,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,MAAM,IAAA,8KAAgB;IAC5C,IAAI,KAAK,OAAO,KAAK,6BAA6B;IAClD,QAAQ,GAAG,CAAC;IACZ,IAAI;QACF,MAAM,WAAW,MAAM;QACvB,IAAI,CAAC,UAAU,OAAO,+QAAY,CAAC,IAAI,CAAC,MAAM;YAAE,QAAQ;QAAI;QAE5D,MAAM,SAAS,MAAM,IAAA,8LAAa,EAAC;QACnC,IAAI,CAAC,QAAQ,OAAO,+QAAY,CAAC,IAAI,CAAC,MAAM;YAAE,QAAQ;QAAI;QAE1D,MAAM,QAAQ,uLAAY,CAAC,SAAS,CAAC;QACrC,IAAI,CAAC,MAAM,OAAO,EAAE,OAAO,+QAAY,CAAC,IAAI,CAAC,MAAM;YAAE,QAAQ;QAAI;QAEjE,OAAO,+QAAY,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE;YAAE,QAAQ;QAAI;IACrD,EAAE,OAAM;QACN,OAAO,+QAAY,CAAC,IAAI,CAAC,MAAM;YAAE,QAAQ;QAAI;IAC/C;AACF","debugId":null}}]
}